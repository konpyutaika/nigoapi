---
swagger: "2.0"
info:
  description: "The REST API provides an interface to a registry with operations for\
    \ saving, versioning, reading NiFi flows and components."
  version: "0.8.0"
  title: "Apache NiFi Registry REST API"
  termsOfService: "As described in the license"
  contact:
    name: "Apache NiFi Registry"
    url: "https://nifi.apache.org"
    email: "dev@nifi.apache.org"
  license:
    name: "Apache 2.0 License"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/nifi-registry-api"
tags:
- name: "access"
  description: "Endpoints for obtaining an access token or checking access status."
- name: "bucket bundles"
  description: "Create extension bundles scoped to an existing bucket in the registry. "
- name: "bucket flows"
  description: "Create flows scoped to an existing bucket in the registry."
- name: "buckets"
  description: "Create named buckets in the registry to store NiFi objects such flows\
    \ and extensions. Search for and retrieve existing buckets."
- name: "bundles"
  description: "Gets metadata about extension bundles and their versions. "
- name: "config"
  description: "Retrieves the configuration for this NiFi Registry."
- name: "extension repository"
  description: "Interact with extension bundles via the hierarchy of bucket/group/artifact/version. "
- name: "extensions"
  description: "Find and retrieve extensions. "
- name: "flows"
  description: "Gets metadata about flows."
- name: "items"
  description: "Retrieve items across all buckets for which the user is authorized."
- name: "policies"
  description: "Endpoint for managing access policies."
- name: "tenants"
  description: "Endpoint for managing users and user groups."
schemes:
- "http"
- "https"
paths:
  /access:
    get:
      tags:
      - "access"
      summary: "Get access status"
      description: "Returns the current client's authenticated identity and permissions\
        \ to top-level resources"
      operationId: "getAccessStatus"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CurrentUser"
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry might be\
            \ running unsecured."
      security:
      - Authorization: []
  /access/logout:
    delete:
      tags:
      - "access"
      summary: "Performs a logout for other providers that have been issued a JWT."
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "logOut"
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters: []
      responses:
        "200":
          description: "User was logged out successfully."
        "401":
          description: "Authentication token provided was empty or not in the correct\
            \ JWT format."
        "500":
          description: "Client failed to log out."
  /access/oidc/callback:
    get:
      tags:
      - "access"
      summary: "Redirect/callback URI for processing the result of the OpenId Connect\
        \ login sequence."
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "oidcCallback"
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /access/oidc/exchange:
    post:
      tags:
      - "access"
      summary: "Retrieves a JWT following a successful login sequence using the configured\
        \ OpenId Connect provider."
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "oidcExchange"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
  /access/oidc/logout:
    delete:
      tags:
      - "access"
      summary: "Performs a logout in the OpenId Provider."
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "oidcLogout"
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /access/oidc/request:
    get:
      tags:
      - "access"
      summary: "Initiates a request to authenticate through the configured OpenId\
        \ Connect provider."
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "oidcRequest"
      consumes:
      - "*/*"
      produces:
      - "*/*"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /access/token:
    post:
      tags:
      - "access"
      summary: "Create token trying all providers"
      description: "Creates a token for accessing the REST API via auto-detected method\
        \ of verifying client identity claim credentials. The token returned is formatted\
        \ as a JSON Web Token (JWT). The token is base64 encoded and comprised of\
        \ three parts. The header, the body, and the signature. The expiration of\
        \ the token is a contained within the body. The token can be used in the Authorization\
        \ header in the format 'Authorization: Bearer <token>'."
      operationId: "createAccessTokenByTryingAllProviders"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login with username/password."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
  /access/token/identity-provider:
    post:
      tags:
      - "access"
      summary: "Create token using identity provider"
      description: "Creates a token for accessing the REST API via a custom identity\
        \ provider. The user credentials must be passed in a format understood by\
        \ the custom identity provider, e.g., a third-party auth token in an HTTP\
        \ header. The exact format of the user credentials expected by the custom\
        \ identity provider can be discovered by 'GET /access/token/identity-provider/usage'.\
        \ The token returned is formatted as a JSON Web Token (JWT). The token is\
        \ base64 encoded and comprised of three parts. The header, the body, and the\
        \ signature. The expiration of the token is a contained within the body. The\
        \ token can be used in the Authorization header in the format 'Authorization:\
        \ Bearer <token>'."
      operationId: "createAccessTokenUsingIdentityProviderCredentials"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login with customized credentials."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
  /access/token/identity-provider/test:
    post:
      tags:
      - "access"
      summary: "Test identity provider"
      description: "Tests the format of the credentials against this identity provider\
        \ without preforming authentication on the credentials to validate them. The\
        \ user credentials should be passed in a format understood by the custom identity\
        \ provider as defined by 'GET /access/token/identity-provider/usage'."
      operationId: "testIdentityProviderRecognizesCredentialsFormat"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "The format of the credentials were not recognized by the currently\
            \ configured identity provider."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login with customized credentials."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
  /access/token/identity-provider/usage:
    get:
      tags:
      - "access"
      summary: "Get identity provider usage"
      description: "Provides a description of how the currently configured identity\
        \ provider expects credentials to be passed to POST /access/token/identity-provider"
      operationId: "getIdentityProviderUsageInstructions"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login with customized credentials."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
  /access/token/kerberos:
    post:
      tags:
      - "access"
      summary: "Create token using kerberos"
      description: "Creates a token for accessing the REST API via Kerberos Service\
        \ Tickets or SPNEGO Tokens (which includes Kerberos Service Tickets). The\
        \ token returned is formatted as a JSON Web Token (JWT). The token is base64\
        \ encoded and comprised of three parts. The header, the body, and the signature.\
        \ The expiration of the token is a contained within the body. The token can\
        \ be used in the Authorization header in the format 'Authorization: Bearer\
        \ <token>'."
      operationId: "createAccessTokenUsingKerberosTicket"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login Kerberos credentials."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
  /access/token/login:
    post:
      tags:
      - "access"
      summary: "Create token using basic auth"
      description: "Creates a token for accessing the REST API via username/password.\
        \ The user credentials must be passed in standard HTTP Basic Auth format.\
        \ That is: 'Authorization: Basic <credentials>', where <credentials> is the\
        \ base64 encoded value of '<username>:<password>'. The token returned is formatted\
        \ as a JSON Web Token (JWT). The token is base64 encoded and comprised of\
        \ three parts. The header, the body, and the signature. The expiration of\
        \ the token is a contained within the body. The token can be used in the Authorization\
        \ header in the format 'Authorization: Bearer <token>'."
      operationId: "createAccessTokenUsingBasicAuthCredentials"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry may not\
            \ be configured to support login with username/password."
        "500":
          description: "NiFi Registry was unable to complete the request because an\
            \ unexpected error occurred."
      security:
      - BasicAuth: []
  /buckets:
    get:
      tags:
      - "buckets"
      summary: "Get all buckets"
      description: "The returned list will include only buckets for which the user\
        \ is authorized.If the user is not authorized for any buckets, this returns\
        \ an empty list."
      operationId: "getBuckets"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Bucket"
        "401":
          description: "Client could not be authenticated."
      security:
      - Authorization: []
    post:
      tags:
      - "buckets"
      summary: "Create bucket"
      description: ""
      operationId: "createBucket"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The bucket to create"
        required: true
        schema:
          $ref: "#/definitions/Bucket"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bucket"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets"
        action: "write"
  /buckets/fields:
    get:
      tags:
      - "buckets"
      summary: "Get bucket fields"
      description: "Retrieves bucket field names for searching or sorting on buckets."
      operationId: "getAvailableBucketFields"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Fields"
      security:
      - Authorization: []
  /buckets/{bucketId}:
    get:
      tags:
      - "buckets"
      summary: "Get bucket"
      description: "Gets the bucket with the given id."
      operationId: "getBucket"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bucket"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    put:
      tags:
      - "buckets"
      summary: "Update bucket"
      description: "Updates the bucket with the given id."
      operationId: "updateBucket"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - in: "body"
        name: "body"
        description: "The updated bucket"
        required: true
        schema:
          $ref: "#/definitions/Bucket"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bucket"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
    delete:
      tags:
      - "buckets"
      summary: "Delete bucket"
      description: "Deletes the bucket with the given id, along with all objects stored\
        \ in the bucket"
      operationId: "deleteBucket"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "The version is used to verify the client is working with the\
          \ latest version of the entity."
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "clientId"
        in: "query"
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bucket"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "delete"
  /buckets/{bucketId}/bundles:
    get:
      tags:
      - "bucket bundles"
      summary: "Get extension bundles by bucket"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getExtensionBundles"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionBundle"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /buckets/{bucketId}/bundles/{bundleType}:
    post:
      tags:
      - "bucket bundles"
      summary: "Create extension bundle version"
      description: "Creates a version of an extension bundle by uploading a binary\
        \ artifact. If an extension bundle already exists in the given bucket with\
        \ the same group id and artifact id as that of the bundle being uploaded,\
        \ then it will be added as a new version to the existing bundle. If an extension\
        \ bundle does not already exist in the given bucket with the same group id\
        \ and artifact id, then a new extension bundle will be created and this version\
        \ will be added to the new bundle. Client's may optionally supply a SHA-256\
        \ in hex format through the multi-part form field 'sha256'. If supplied, then\
        \ this value will be compared against the SHA-256 computed by the server,\
        \ and the bundle will be rejected if the values do not match. If not supplied,\
        \ the bundle will be accepted, but will be marked to indicate that the client\
        \ did not supply a SHA-256 during creation. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: "createExtensionBundleVersion"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "bundleType"
        in: "path"
        description: "The type of the bundle"
        required: true
        type: "string"
        enum:
        - "nifi-nar"
        - "minifi-cpp"
        x-exportParamName: "BundleType"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BundleVersion"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
  /buckets/{bucketId}/flows:
    get:
      tags:
      - "bucket flows"
      summary: "Get bucket flows"
      description: "Retrieves all flows in the given bucket."
      operationId: "getFlows"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VersionedFlow"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    post:
      tags:
      - "bucket flows"
      summary: "Create flow"
      description: "Creates a flow in the given bucket. The flow id is created by\
        \ the server and populated in the returned entity."
      operationId: "createFlow"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - in: "body"
        name: "body"
        description: "The details of the flow to create."
        required: true
        schema:
          $ref: "#/definitions/VersionedFlow"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlow"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
  /buckets/{bucketId}/flows/{flowId}:
    get:
      tags:
      - "bucket flows"
      summary: "Get bucket flow"
      description: "Retrieves the flow with the given id in the given bucket."
      operationId: "getFlow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlow"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    put:
      tags:
      - "bucket flows"
      summary: "Update bucket flow"
      description: "Updates the flow with the given id in the given bucket."
      operationId: "updateFlow"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      - in: "body"
        name: "body"
        description: "The updated flow"
        required: true
        schema:
          $ref: "#/definitions/VersionedFlow"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlow"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
    delete:
      tags:
      - "bucket flows"
      summary: "Delete bucket flow"
      description: "Deletes a flow, including all saved versions of that flow."
      operationId: "deleteFlow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "The version is used to verify the client is working with the\
          \ latest version of the entity."
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "clientId"
        in: "query"
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlow"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "delete"
  /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}:
    get:
      tags:
      - "bucket flows"
      summary: "Get bucket flow diff"
      description: "Computes the differences between two given versions of a flow."
      operationId: "getFlowDiff"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      - name: "versionA"
        in: "path"
        description: "The first version number"
        required: true
        type: "integer"
        pattern: "\\d+"
        format: "int32"
        x-exportParamName: "VersionA"
      - name: "versionB"
        in: "path"
        description: "The second version number"
        required: true
        type: "integer"
        pattern: "\\d+"
        format: "int32"
        x-exportParamName: "VersionB"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowDifference"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /buckets/{bucketId}/flows/{flowId}/versions:
    get:
      tags:
      - "bucket flows"
      summary: "Get bucket flow versions"
      description: "Gets summary information for all versions of a flow. Versions\
        \ are ordered newest->oldest."
      operationId: "getFlowVersions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VersionedFlowSnapshotMetadata"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    post:
      tags:
      - "bucket flows"
      summary: "Create flow version"
      description: "Creates the next version of a flow. The version number of the\
        \ object being created must be the next available version integer. Flow versions\
        \ are immutable after they are created."
      operationId: "createFlowVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      - in: "body"
        name: "body"
        description: "The new versioned flow snapshot."
        required: true
        schema:
          $ref: "#/definitions/VersionedFlowSnapshot"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshot"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
  /buckets/{bucketId}/flows/{flowId}/versions/latest:
    get:
      tags:
      - "bucket flows"
      summary: "Get latest bucket flow version content"
      description: "Gets the latest version of a flow, including the metadata and\
        \ content of the flow."
      operationId: "getLatestFlowVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshot"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /buckets/{bucketId}/flows/{flowId}/versions/latest/metadata:
    get:
      tags:
      - "bucket flows"
      summary: "Get latest bucket flow version metadata"
      description: "Gets the metadata for the latest version of a flow."
      operationId: "getLatestFlowVersionMetadata"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshotMetadata"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}:
    get:
      tags:
      - "bucket flows"
      summary: "Get bucket flow version"
      description: "Gets the given version of a flow, including the metadata and content\
        \ for the version."
      operationId: "getFlowVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      - name: "versionNumber"
        in: "path"
        description: "The version number"
        required: true
        type: "integer"
        pattern: "\\d+"
        format: "int32"
        x-exportParamName: "VersionNumber"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshot"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles:
    get:
      tags:
      - "bundles"
      summary: "Get all bundles"
      description: "Gets the metadata for all bundles across all authorized buckets\
        \ with optional filters applied. The returned results will include only items\
        \ from buckets for which the user is authorized. If the user is not authorized\
        \ to any buckets, an empty list will be returned. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: "getBundles"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "query"
        description: "Optional bucket name to filter results. The value may be an\
          \ exact match, or a wildcard, such as 'My Bucket%' to select all bundles\
          \ where the bucket name starts with 'My Bucket'."
        required: false
        type: "string"
        x-exportParamName: "BucketName"
        x-optionalDataType: "String"
      - name: "groupId"
        in: "query"
        description: "Optional groupId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'com.%' to select all bundles where the\
          \ groupId starts with 'com.'."
        required: false
        type: "string"
        x-exportParamName: "GroupId"
        x-optionalDataType: "String"
      - name: "artifactId"
        in: "query"
        description: "Optional artifactId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'nifi-%' to select all bundles where the\
          \ artifactId starts with 'nifi-'."
        required: false
        type: "string"
        x-exportParamName: "ArtifactId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionBundle"
        "401":
          description: "Client could not be authenticated."
      security:
      - Authorization: []
  /bundles/versions:
    get:
      tags:
      - "bundles"
      summary: "Get all bundle versions"
      description: "Gets the metadata about extension bundle versions across all authorized\
        \ buckets with optional filters applied. If the user is not authorized to\
        \ any buckets, an empty list will be returned. \n\nNOTE: This endpoint is\
        \ subject to change as NiFi Registry and its REST API evolve."
      operationId: "getBundleVersions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "query"
        description: "Optional groupId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'com.%' to select all bundle versions where\
          \ the groupId starts with 'com.'."
        required: false
        type: "string"
        x-exportParamName: "GroupId"
        x-optionalDataType: "String"
      - name: "artifactId"
        in: "query"
        description: "Optional artifactId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'nifi-%' to select all bundle versions where\
          \ the artifactId starts with 'nifi-'."
        required: false
        type: "string"
        x-exportParamName: "ArtifactId"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Optional version to filter results. The value maye be an exact\
          \ match, or a wildcard, such as '1.0.%' to select all bundle versions where\
          \ the version starts with '1.0.'."
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BundleVersionMetadata"
        "401":
          description: "Client could not be authenticated."
      security:
      - Authorization: []
  /bundles/{bundleId}:
    get:
      tags:
      - "bundles"
      summary: "Get bundle"
      description: "Gets the metadata about an extension bundle. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: "globalGetExtensionBundle"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtensionBundle"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    delete:
      tags:
      - "bundles"
      summary: "Delete bundle"
      description: "Deletes the given extension bundle and all of it's versions. \n\
        \nNOTE: This endpoint is subject to change as NiFi Registry and its REST API\
        \ evolve."
      operationId: "globalDeleteExtensionBundle"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtensionBundle"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
  /bundles/{bundleId}/versions:
    get:
      tags:
      - "bundles"
      summary: "Get bundle versions"
      description: "Gets the metadata for the versions of the given extension bundle.\
        \ \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST\
        \ API evolve."
      operationId: "globalGetBundleVersions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BundleVersionMetadata"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles/{bundleId}/versions/{version}:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version"
      description: "Gets the descriptor for the given version of the given extension\
        \ bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and\
        \ its REST API evolve."
      operationId: "globalGetBundleVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BundleVersion"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
    delete:
      tags:
      - "bundles"
      summary: "Delete bundle version"
      description: "Deletes the given extension bundle version and it's associated\
        \ binary content. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "globalDeleteBundleVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BundleVersion"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "write"
  /bundles/{bundleId}/versions/{version}/content:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version content"
      description: "Gets the binary content for the given version of the given extension\
        \ bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and\
        \ its REST API evolve."
      operationId: "globalGetBundleVersionContent"
      consumes:
      - "*/*"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              format: "byte"
              pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles/{bundleId}/versions/{version}/extensions:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version extensions"
      description: "Gets the metadata about the extensions in the given extension\
        \ bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "globalGetBundleVersionExtensions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionMetadata"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles/{bundleId}/versions/{version}/extensions/{name}:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version extension"
      description: "Gets the metadata about the extension with the given name in the\
        \ given extension bundle version. \n\nNOTE: This endpoint is subject to change\
        \ as NiFi Registry and its REST API evolve."
      operationId: "globalGetBundleVersionExtension"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Extension"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles/{bundleId}/versions/{version}/extensions/{name}/docs:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version extension docs"
      description: "Gets the documentation for the given extension in the given extension\
        \ bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getBundleVersionExtensionDocs"
      consumes:
      - "*/*"
      produces:
      - "text/html"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details:
    get:
      tags:
      - "bundles"
      summary: "Get bundle version extension docs details"
      description: "Gets the additional details documentation for the given extension\
        \ in the given extension bundle version. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: "getBundleVersionExtensionAdditionalDetailsDocs"
      consumes:
      - "*/*"
      produces:
      - "text/html"
      parameters:
      - name: "bundleId"
        in: "path"
        description: "The extension bundle identifier"
        required: true
        type: "string"
        x-exportParamName: "BundleId"
      - name: "version"
        in: "path"
        description: "The version of the bundle"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /config:
    get:
      tags:
      - "config"
      summary: "Get configration"
      description: "Gets the NiFi Registry configurations."
      operationId: "getConfiguration"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RegistryConfiguration"
        "401":
          description: "Client could not be authenticated."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies,/tenants"
        action: "read"
  /extension-repository:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo buckets"
      description: "Gets the names of the buckets the current user is authorized for\
        \ in order to browse the repo by bucket. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: "getExtensionRepoBuckets"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionRepoBucket"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
  /extension-repository/{bucketName}:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo groups"
      description: "Gets the groups in the extension repository in the given bucket.\
        \ \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST\
        \ API evolve."
      operationId: "getExtensionRepoGroups"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionRepoGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo artifacts"
      description: "Gets the artifacts in the extension repository in the given bucket\
        \ and group. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getExtensionRepoArtifacts"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group id"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionRepoArtifact"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo versions"
      description: "Gets the versions in the extension repository for the given bucket,\
        \ group, and artifact. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: "getExtensionRepoVersions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionRepoVersionSummary"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo version"
      description: "Gets information about the version in the given bucket, group,\
        \ and artifact. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getExtensionRepoVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtensionRepoVersion"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo version content"
      description: "Gets the binary content of the bundle with the given bucket, group,\
        \ artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: "getExtensionRepoVersionContent"
      consumes:
      - "*/*"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              format: "byte"
              pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo extensions"
      description: "Gets information about the extensions in the given bucket, group,\
        \ artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: "getExtensionRepoVersionExtensions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExtensionMetadata"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo extension"
      description: "Gets information about the extension with the given name in the\
        \ given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: "getExtensionRepoVersionExtension"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Extension"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo extension docs"
      description: "Gets the documentation for the extension with the given name in\
        \ the given bucket, group, artifact, and version. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: "getExtensionRepoVersionExtensionDocs"
      consumes:
      - "*/*"
      produces:
      - "text/html"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs/additional-details:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo extension details"
      description: "Gets the additional details documentation for the extension with\
        \ the given name in the given bucket, group, artifact, and version. \n\nNOTE:\
        \ This endpoint is subject to change as NiFi Registry and its REST API evolve."
      operationId: "getExtensionRepoVersionExtensionAdditionalDetailsDocs"
      consumes:
      - "*/*"
      produces:
      - "text/html"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "name"
        in: "path"
        description: "The fully qualified name of the extension"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/sha256:
    get:
      tags:
      - "extension repository"
      summary: "Get extension repo version checksum"
      description: "Gets the hex representation of the SHA-256 digest for the binary\
        \ content of the bundle with the given bucket, group, artifact, and version.\n\
        \nNOTE: This endpoint is subject to change as NiFi Registry and its REST API\
        \ evolve."
      operationId: "getExtensionRepoVersionSha256"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters:
      - name: "bucketName"
        in: "path"
        description: "The bucket name"
        required: true
        type: "string"
        x-exportParamName: "BucketName"
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /extension-repository/{groupId}/{artifactId}/{version}/sha256:
    get:
      tags:
      - "extension repository"
      summary: "Get global extension repo version checksum"
      description: "Gets the hex representation of the SHA-256 digest for the binary\
        \ content with the given bucket, group, artifact, and version. Since the same\
        \ group-artifact-version can exist in multiple buckets, this will return the\
        \ checksum of the first one returned. This will be consistent since the checksum\
        \ must be the same when existing in multiple buckets. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: "getGlobalExtensionRepoVersionSha256"
      consumes:
      - "*/*"
      produces:
      - "text/plain"
      parameters:
      - name: "groupId"
        in: "path"
        description: "The group identifier"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "path"
        description: "The artifact identifier"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "path"
        description: "The version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
  /extensions:
    get:
      tags:
      - "extensions"
      summary: "Get all extensions"
      description: "Gets the metadata for all extensions that match the filter params\
        \ and are part of bundles located in buckets the current user is authorized\
        \ for. If the user is not authorized to any buckets, an empty result set will\
        \ be returned.\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getExtensions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bundleType"
        in: "query"
        description: "The type of bundles to return"
        required: false
        type: "string"
        enum:
        - "nifi-nar"
        - "minifi-cpp"
        x-exportParamName: "BundleType"
        x-optionalDataType: "String"
      - name: "extensionType"
        in: "query"
        description: "The type of extensions to return"
        required: false
        type: "string"
        enum:
        - "PROCESSOR"
        - "CONTROLLER_SERVICE"
        - "REPORTING_TASK"
        x-exportParamName: "ExtensionType"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "The tags to filter on, will be used in an OR statement"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Tag"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtensionMetadataContainer"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
  /extensions/provided-service-api:
    get:
      tags:
      - "extensions"
      summary: "Get extensions providing service API"
      description: "Gets the metadata for extensions that provide the specified API\
        \ and are part of bundles located in buckets the current user is authorized\
        \ for. If the user is not authorized to any buckets, an empty result set will\
        \ be returned.\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getExtensionsProvidingServiceAPI"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "className"
        in: "query"
        description: "The name of the service API class"
        required: true
        type: "string"
        x-exportParamName: "ClassName"
      - name: "groupId"
        in: "query"
        description: "The groupId of the bundle containing the service API class"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "artifactId"
        in: "query"
        description: "The artifactId of the bundle containing the service API class"
        required: true
        type: "string"
        x-exportParamName: "ArtifactId"
      - name: "version"
        in: "query"
        description: "The version of the bundle containing the service API class"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtensionMetadataContainer"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
  /extensions/tags:
    get:
      tags:
      - "extensions"
      summary: "Get extension tags"
      description: "Gets all the extension tags known to this NiFi Registry instance,\
        \ along with the number of extensions that have the given tag.\n\nNOTE: This\
        \ endpoint is subject to change as NiFi Registry and its REST API evolve."
      operationId: "getTags"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TagCount"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
  /flows/fields:
    get:
      tags:
      - "flows"
      summary: "Get flow fields"
      description: "Retrieves the flow field names that can be used for searching\
        \ or sorting on flows."
      operationId: "getAvailableFlowFields"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Fields"
      security:
      - Authorization: []
  /flows/{flowId}:
    get:
      tags:
      - "flows"
      summary: "Get flow"
      description: "Gets a flow by id."
      operationId: "globalGetFlow"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlow"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /flows/{flowId}/versions:
    get:
      tags:
      - "flows"
      summary: "Get flow versions"
      description: "Gets summary information for all versions of a given flow. Versions\
        \ are ordered newest->oldest."
      operationId: "globalGetFlowVersions"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VersionedFlowSnapshotMetadata"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /flows/{flowId}/versions/latest:
    get:
      tags:
      - "flows"
      summary: "Get latest flow version"
      description: "Gets the latest version of a flow, including metadata and flow\
        \ content."
      operationId: "globalGetLatestFlowVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshot"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /flows/{flowId}/versions/latest/metadata:
    get:
      tags:
      - "flows"
      summary: "Get latest flow version metadata"
      description: "Gets the metadata for the latest version of a flow."
      operationId: "globalGetLatestFlowVersionMetadata"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshotMetadata"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /flows/{flowId}/versions/{versionNumber}:
    get:
      tags:
      - "flows"
      summary: "Get flow version"
      description: "Gets the given version of a flow, including metadata and flow\
        \ content."
      operationId: "globalGetFlowVersion"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "flowId"
        in: "path"
        description: "The flow identifier"
        required: true
        type: "string"
        x-exportParamName: "FlowId"
      - name: "versionNumber"
        in: "path"
        description: "The version number"
        required: true
        type: "integer"
        pattern: "\\d+"
        format: "int32"
        x-exportParamName: "VersionNumber"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VersionedFlowSnapshot"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /items:
    get:
      tags:
      - "items"
      summary: "Get all items"
      description: "Get items across all buckets. The returned items will include\
        \ only items from buckets for which the user is authorized. If the user is\
        \ not authorized to any buckets, an empty list will be returned."
      operationId: "getItems"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BucketItem"
        "401":
          description: "Client could not be authenticated."
      security:
      - Authorization: []
  /items/fields:
    get:
      tags:
      - "items"
      summary: "Get item fields"
      description: "Retrieves the item field names for searching or sorting on bucket\
        \ items."
      operationId: "getAvailableBucketItemFields"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Fields"
      security:
      - Authorization: []
  /items/{bucketId}:
    get:
      tags:
      - "items"
      summary: "Get bucket items"
      description: "Gets the items located in the given bucket."
      operationId: "getItemsInBucket"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "bucketId"
        in: "path"
        description: "The bucket identifier"
        required: true
        type: "string"
        x-exportParamName: "BucketId"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BucketItem"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/buckets/{bucketId}"
        action: "read"
  /policies:
    get:
      tags:
      - "policies"
      summary: "Get all access policies"
      description: ""
      operationId: "getAccessPolicies"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessPolicy"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "read"
    post:
      tags:
      - "policies"
      summary: "Create access policy"
      description: ""
      operationId: "createAccessPolicy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The access policy configuration details."
        required: true
        schema:
          $ref: "#/definitions/AccessPolicy"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessPolicy"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry might not\
            \ be configured to use a ConfigurableAccessPolicyProvider."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "write"
  /policies/resources:
    get:
      tags:
      - "policies"
      summary: "Get available resources"
      description: "Gets the available resources that support access/authorization\
        \ policies"
      operationId: "getResources"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Resource"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "read"
  /policies/{action}/{resource}:
    get:
      tags:
      - "policies"
      summary: "Get access policy for resource"
      description: "Gets an access policy for the specified action and resource"
      operationId: "getAccessPolicyForResource"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "action"
        in: "path"
        description: "The request action."
        required: true
        type: "string"
        enum:
        - "read"
        - "write"
        - "delete"
        x-exportParamName: "Action"
      - name: "resource"
        in: "path"
        description: "The resource of the policy."
        required: true
        type: "string"
        pattern: ".+"
        x-exportParamName: "Resource"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessPolicy"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "read"
  /policies/{id}:
    get:
      tags:
      - "policies"
      summary: "Get access policy"
      description: ""
      operationId: "getAccessPolicy"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The access policy id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessPolicy"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "read"
    put:
      tags:
      - "policies"
      summary: "Update access policy"
      description: ""
      operationId: "updateAccessPolicy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The access policy id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "The access policy configuration details."
        required: true
        schema:
          $ref: "#/definitions/AccessPolicy"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessPolicy"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry might not\
            \ be configured to use a ConfigurableAccessPolicyProvider."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "write"
    delete:
      tags:
      - "policies"
      summary: "Delete access policy"
      description: ""
      operationId: "removeAccessPolicy"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "The version is used to verify the client is working with the\
          \ latest version of the entity."
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "clientId"
        in: "query"
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The access policy id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccessPolicy"
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid. The NiFi Registry might not\
            \ be configured to use a ConfigurableAccessPolicyProvider."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/policies"
        action: "delete"
  /tenants/user-groups:
    get:
      tags:
      - "tenants"
      summary: "Get user groups"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getUserGroups"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "read"
    post:
      tags:
      - "tenants"
      summary: "Create user group"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "createUserGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user group configuration details."
        required: true
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "write"
  /tenants/user-groups/{id}:
    get:
      tags:
      - "tenants"
      summary: "Get user group"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getUserGroup"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user group id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "read"
    put:
      tags:
      - "tenants"
      summary: "Update user group"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "updateUserGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user group id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "The user group configuration details."
        required: true
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "write"
    delete:
      tags:
      - "tenants"
      summary: "Delete user group"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "removeUserGroup"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "The version is used to verify the client is working with the\
          \ latest version of the entity."
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "clientId"
        in: "query"
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The user group id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "delete"
  /tenants/users:
    get:
      tags:
      - "tenants"
      summary: "Get all users"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getUsers"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "read"
    post:
      tags:
      - "tenants"
      summary: "Create user"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user configuration details."
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "write"
  /tenants/users/{id}:
    get:
      tags:
      - "tenants"
      summary: "Get user"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "getUser"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "read"
    put:
      tags:
      - "tenants"
      summary: "Update user"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The user id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        description: "The user configuration details."
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "write"
    delete:
      tags:
      - "tenants"
      summary: "Delete user"
      description: "\n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: "removeUser"
      consumes:
      - "*/*"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "The version is used to verify the client is working with the\
          \ latest version of the entity."
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "clientId"
        in: "query"
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "The user id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "NiFi Registry was unable to complete the request because it\
            \ was invalid. The request should not be retried without modification."
        "401":
          description: "Client could not be authenticated."
        "403":
          description: "Client is not authorized to make this request."
        "404":
          description: "The specified resource could not be found."
        "409":
          description: "NiFi Registry was unable to complete the request because it\
            \ assumes a server state that is not valid."
      security:
      - Authorization: []
      x-access-policy:
        resource: "/tenants"
        action: "delete"
securityDefinitions:
  Authorization:
    description: "NiFi Registry Auth Token (JWT)"
    type: "apiKey"
    name: "Authorization"
    in: "header"
  BasicAuth:
    description: "HTTP Basic Auth"
    type: "basic"
definitions:
  AccessPolicy:
    type: "object"
    required:
    - "action"
    - "resource"
    properties:
      identifier:
        type: "string"
        description: "The id of the policy. Set by server at creation time."
        readOnly: true
      resource:
        type: "string"
        description: "The resource for this access policy."
      action:
        type: "string"
        description: "The action associated with this access policy."
        enum:
        - "read"
        - "write"
        - "delete"
      configurable:
        type: "boolean"
        description: "Indicates if this access policy is configurable, based on which\
          \ Authorizer has been configured to manage it."
        readOnly: true
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
      users:
        type: "array"
        description: "The set of user IDs associated with this access policy."
        uniqueItems: true
        items:
          $ref: "#/definitions/Tenant"
      userGroups:
        type: "array"
        description: "The set of user group IDs associated with this access policy."
        uniqueItems: true
        items:
          $ref: "#/definitions/Tenant"
    example:
      identifier: "identifier"
      userGroups:
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      resource: "resource"
      action: "read"
      configurable: true
      users:
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  AccessPolicySummary:
    type: "object"
    required:
    - "action"
    - "resource"
    properties:
      identifier:
        type: "string"
        description: "The id of the policy. Set by server at creation time."
        readOnly: true
      resource:
        type: "string"
        description: "The resource for this access policy."
      action:
        type: "string"
        description: "The action associated with this access policy."
        enum:
        - "read"
        - "write"
        - "delete"
      configurable:
        type: "boolean"
        description: "Indicates if this access policy is configurable, based on which\
          \ Authorizer has been configured to manage it."
        readOnly: true
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
    example:
      identifier: "identifier"
      resource: "resource"
      action: "read"
      configurable: true
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  AllowableValue:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The value of the allowable value"
      displayName:
        type: "string"
        description: "The display name of the allowable value"
      description:
        type: "string"
        description: "The description of the allowable value"
    example:
      displayName: "displayName"
      description: "description"
      value: "value"
  Attribute:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the attribute"
      description:
        type: "string"
        description: "The description of the attribute"
    example:
      name: "name"
      description: "description"
  BatchSize:
    type: "object"
    properties:
      count:
        type: "integer"
        format: "int32"
        description: "Preferred number of flow files to include in a transaction."
      size:
        type: "string"
        description: "Preferred number of bytes to include in a transaction."
      duration:
        type: "string"
        description: "Preferred amount of time that a transaction should span."
    example:
      duration: "duration"
      size: "size"
      count: 5
  Bucket:
    type: "object"
    required:
    - "name"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      identifier:
        type: "string"
        description: "An ID to uniquely identify this object."
        readOnly: true
      name:
        type: "string"
        description: "The name of the bucket."
      createdTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the bucket was first created. This is\
          \ set by the server at creation time."
        readOnly: true
        minimum: 1
      description:
        type: "string"
        description: "A description of the bucket."
      allowBundleRedeploy:
        type: "boolean"
        description: "Indicates if this bucket allows the same version of an extension\
          \ bundle to be redeployed and thus overwrite the existing artifact. By default\
          \ this is false."
      allowPublicRead:
        type: "boolean"
        description: "Indicates if this bucket allows read access to unauthenticated\
          \ anonymous users"
      permissions:
        description: "The access that the current user has to this bucket."
        readOnly: true
        $ref: "#/definitions/Permissions"
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
    example:
      identifier: "identifier"
      allowBundleRedeploy: true
      permissions:
        canRead: true
        canWrite: true
        canDelete: true
      createdTimestamp: 1
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      name: "name"
      description: "description"
      allowPublicRead: true
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  BucketItem:
    type: "object"
    required:
    - "bucketIdentifier"
    - "name"
    - "type"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      identifier:
        type: "string"
        description: "An ID to uniquely identify this object."
        readOnly: true
      name:
        type: "string"
        description: "The name of the item."
      description:
        type: "string"
        description: "A description of the item."
      bucketIdentifier:
        type: "string"
        description: "The identifier of the bucket this items belongs to. This cannot\
          \ be changed after the item is created."
      bucketName:
        type: "string"
        description: "The name of the bucket this items belongs to."
        readOnly: true
      createdTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was created, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      modifiedTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was last modified, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      type:
        type: "string"
        description: "The type of item."
        enum:
        - "Flow"
        - "Bundle"
      permissions:
        description: "The access that the current user has to the bucket containing\
          \ this item."
        readOnly: true
        $ref: "#/definitions/Permissions"
    example:
      identifier: "identifier"
      bucketName: "bucketName"
      permissions:
        canRead: true
        canWrite: true
        canDelete: true
      createdTimestamp: 1
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      name: "name"
      description: "description"
      modifiedTimestamp: 1
      bucketIdentifier: "bucketIdentifier"
      type: "Flow"
  BuildInfo:
    type: "object"
    properties:
      buildTool:
        type: "string"
        description: "The tool used to build the version of the bundle"
      buildFlags:
        type: "string"
        description: "The flags used to build the version of the bundle"
      buildBranch:
        type: "string"
        description: "The branch used to build the version of the bundle"
      buildTag:
        type: "string"
        description: "The tag used to build the version of the bundle"
      buildRevision:
        type: "string"
        description: "The revision used to build the version of the bundle"
      built:
        type: "integer"
        format: "int64"
        description: "The timestamp the version of the bundle was built"
      builtBy:
        type: "string"
        description: "The identity of the user that performed the build"
    example:
      buildBranch: "buildBranch"
      builtBy: "builtBy"
      buildTag: "buildTag"
      buildRevision: "buildRevision"
      built: 1
      buildTool: "buildTool"
      buildFlags: "buildFlags"
  Bundle:
    type: "object"
    properties:
      group:
        type: "string"
        description: "The group of the bundle"
      artifact:
        type: "string"
        description: "The artifact of the bundle"
      version:
        type: "string"
        description: "The version of the bundle"
    example:
      artifact: "artifact"
      version: "version"
      group: "group"
  BundleInfo:
    type: "object"
    properties:
      bucketId:
        type: "string"
        description: "The id of the bucket where the bundle is located"
      bucketName:
        type: "string"
        description: "The name of the bucket where the bundle is located"
      bundleId:
        type: "string"
        description: "The id of the bundle"
      bundleType:
        type: "string"
        description: "The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)"
        enum:
        - "NIFI_NAR"
        - "MINIFI_CPP"
      groupId:
        type: "string"
        description: "The group id of the bundle"
      artifactId:
        type: "string"
        description: "The artifact id of the bundle"
      version:
        type: "string"
        description: "The version of the bundle"
      systemApiVersion:
        type: "string"
        description: "The version of the system API the bundle was built against"
    example:
      bucketName: "bucketName"
      groupId: "groupId"
      bundleId: "bundleId"
      bucketId: "bucketId"
      artifactId: "artifactId"
      bundleType: "NIFI_NAR"
      version: "version"
      systemApiVersion: "systemApiVersion"
  BundleVersion:
    type: "object"
    required:
    - "versionMetadata"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      versionMetadata:
        description: "The metadata about this version of the extension bundle"
        $ref: "#/definitions/BundleVersionMetadata"
      dependencies:
        type: "array"
        description: "The set of other bundle versions that this version is dependent\
          \ on"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/BundleVersionDependency"
      bundle:
        description: "The bundle this version is for"
        readOnly: true
        $ref: "#/definitions/ExtensionBundle"
      bucket:
        description: "The bucket that the extension bundle belongs to"
        $ref: "#/definitions/Bucket"
      filename:
        type: "string"
    example:
      bucket:
        identifier: "identifier"
        allowBundleRedeploy: true
        permissions:
          canRead: true
          canWrite: true
          canDelete: true
        createdTimestamp: 1
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        name: "name"
        description: "description"
        allowPublicRead: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      filename: "filename"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      versionMetadata:
        sha256: "sha256"
        buildInfo:
          buildBranch: "buildBranch"
          builtBy: "builtBy"
          buildTag: "buildTag"
          buildRevision: "buildRevision"
          built: 1
          buildTool: "buildTool"
          buildFlags: "buildFlags"
        author: "author"
        groupId: "groupId"
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        bundleId: "bundleId"
        description: "description"
        bucketId: "bucketId"
        version: "version"
        sha256Supplied: true
        contentSize: 0
        artifactId: "artifactId"
        id: "id"
        timestamp: 1
        systemApiVersion: "systemApiVersion"
      bundle:
        versionCount: 0
        identifier: "identifier"
        bucketName: "bucketName"
        createdTimestamp: 1
        groupId: "groupId"
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        description: "description"
        bucketIdentifier: "bucketIdentifier"
        bundleType: "NIFI_NAR"
        type: "Flow"
        permissions:
          canRead: true
          canWrite: true
          canDelete: true
        name: "name"
        modifiedTimestamp: 1
        artifactId: "artifactId"
      dependencies:
      - groupId: "groupId"
        artifactId: "artifactId"
        version: "version"
      - groupId: "groupId"
        artifactId: "artifactId"
        version: "version"
  BundleVersionDependency:
    type: "object"
    properties:
      groupId:
        type: "string"
        description: "The group id of the bundle dependency"
      artifactId:
        type: "string"
        description: "The artifact id of the bundle dependency"
      version:
        type: "string"
        description: "The version of the bundle dependency"
    example:
      groupId: "groupId"
      artifactId: "artifactId"
      version: "version"
  BundleVersionMetadata:
    type: "object"
    required:
    - "bucketId"
    - "buildInfo"
    - "contentSize"
    - "sha256Supplied"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      id:
        type: "string"
        description: "The id of this version of the extension bundle"
      bundleId:
        type: "string"
        description: "The id of the extension bundle this version is for"
      bucketId:
        type: "string"
        description: "The id of the bucket the extension bundle belongs to"
      groupId:
        type: "string"
      artifactId:
        type: "string"
      version:
        type: "string"
        description: "The version of the extension bundle"
      timestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of the create date of this version"
        minimum: 1
      author:
        type: "string"
        description: "The identity that created this version"
      description:
        type: "string"
        description: "The description for this version"
      sha256:
        type: "string"
        description: "The hex representation of the SHA-256 digest of the binary content\
          \ for this version"
      sha256Supplied:
        type: "boolean"
        description: "Whether or not the client supplied a SHA-256 when uploading\
          \ the bundle"
      contentSize:
        type: "integer"
        format: "int64"
        description: "The size of the binary content for this version in bytes"
        minimum: 0
      systemApiVersion:
        type: "string"
        description: "The version of the system API that this bundle version was built\
          \ against"
      buildInfo:
        description: "The build information about this version"
        $ref: "#/definitions/BuildInfo"
    example:
      sha256: "sha256"
      buildInfo:
        buildBranch: "buildBranch"
        builtBy: "builtBy"
        buildTag: "buildTag"
        buildRevision: "buildRevision"
        built: 1
        buildTool: "buildTool"
        buildFlags: "buildFlags"
      author: "author"
      groupId: "groupId"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      bundleId: "bundleId"
      description: "description"
      bucketId: "bucketId"
      version: "version"
      sha256Supplied: true
      contentSize: 0
      artifactId: "artifactId"
      id: "id"
      timestamp: 1
      systemApiVersion: "systemApiVersion"
  ComponentDifference:
    type: "object"
    properties:
      valueA:
        type: "string"
        description: "The earlier value from the difference."
      valueB:
        type: "string"
        description: "The newer value from the difference."
      changeDescription:
        type: "string"
        description: "The description of the change."
      differenceType:
        type: "string"
        description: "The key to the difference."
      differenceTypeDescription:
        type: "string"
        description: "The description of the change type."
    example:
      differenceType: "differenceType"
      differenceTypeDescription: "differenceTypeDescription"
      changeDescription: "changeDescription"
      valueB: "valueB"
      valueA: "valueA"
  ComponentDifferenceGroup:
    type: "object"
    properties:
      componentId:
        type: "string"
        description: "The id of the component whose changes are grouped together."
      componentName:
        type: "string"
        description: "The name of the component whose changes are grouped together."
      componentType:
        type: "string"
        description: "The type of component these changes relate to."
      processGroupId:
        type: "string"
        description: "The process group id for this component."
      differences:
        type: "array"
        description: "The list of changes related to this component between the 2\
          \ versions."
        uniqueItems: true
        items:
          $ref: "#/definitions/ComponentDifference"
    example:
      componentType: "componentType"
      componentId: "componentId"
      processGroupId: "processGroupId"
      differences:
      - differenceType: "differenceType"
        differenceTypeDescription: "differenceTypeDescription"
        changeDescription: "changeDescription"
        valueB: "valueB"
        valueA: "valueA"
      - differenceType: "differenceType"
        differenceTypeDescription: "differenceTypeDescription"
        changeDescription: "changeDescription"
        valueB: "valueB"
        valueA: "valueA"
      componentName: "componentName"
  ConnectableComponent:
    type: "object"
    required:
    - "groupId"
    - "id"
    - "type"
    properties:
      id:
        type: "string"
        description: "The id of the connectable component."
      type:
        type: "string"
        description: "The type of component the connectable is."
        enum:
        - "PROCESSOR"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "FUNNEL"
      groupId:
        type: "string"
        description: "The id of the group that the connectable component resides in"
      name:
        type: "string"
        description: "The name of the connectable component"
      comments:
        type: "string"
        description: "The comments for the connectable component."
    example:
      comments: "comments"
      groupId: "groupId"
      name: "name"
      id: "id"
      type: "PROCESSOR"
  ControllerServiceAPI:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The fully qualified name of the service interface."
      bundle:
        description: "The details of the artifact that bundled this service interface."
        $ref: "#/definitions/Bundle"
    example:
      type: "type"
      bundle:
        artifact: "artifact"
        version: "version"
        group: "group"
  ControllerServiceDefinition:
    type: "object"
    properties:
      className:
        type: "string"
        description: "The class name of the service API"
      groupId:
        type: "string"
        description: "The group id of the service API"
      artifactId:
        type: "string"
        description: "The artifact id of the service API"
      version:
        type: "string"
        description: "The version of the service API"
    example:
      groupId: "groupId"
      className: "className"
      artifactId: "artifactId"
      version: "version"
  CurrentUser:
    type: "object"
    properties:
      identity:
        type: "string"
        description: "The identity of the current user"
        readOnly: true
      anonymous:
        type: "boolean"
        description: "Indicates if the current user is anonymous"
        readOnly: true
      loginSupported:
        type: "boolean"
        description: "Indicates if the NiFi Registry instance supports logging in"
      resourcePermissions:
        description: "The access that the current user has to top level resources"
        readOnly: true
        $ref: "#/definitions/ResourcePermissions"
      oidcloginSupported:
        type: "boolean"
        description: "Indicates if the NiFi Registry instance supports logging in\
          \ with an OIDC provider"
    example:
      oidcloginSupported: true
      resourcePermissions:
        tenants:
          canRead: true
          canWrite: true
          canDelete: true
        proxy:
          canRead: true
          canWrite: true
          canDelete: true
        buckets:
          canRead: true
          canWrite: true
          canDelete: true
        policies:
          canRead: true
          canWrite: true
          canDelete: true
        anyTopLevelResource:
          canRead: true
          canWrite: true
          canDelete: true
      identity: "identity"
      anonymous: true
      loginSupported: true
  DeprecationNotice:
    type: "object"
    properties:
      reason:
        type: "string"
        description: "The reason for the deprecation"
      alternatives:
        type: "array"
        xml:
          wrapped: true
        description: "The alternatives to use"
        items:
          type: "string"
          xml:
            name: "alternative"
    example:
      reason: "reason"
      alternatives:
      - "alternatives"
      - "alternatives"
  DynamicProperty:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The description of the dynamic property name"
      value:
        type: "string"
        description: "The description of the dynamic property value"
      description:
        type: "string"
        description: "The description of the dynamic property"
      expressionLanguageScope:
        type: "string"
        description: "The scope of the expression language support"
        enum:
        - "NONE"
        - "VARIABLE_REGISTRY"
        - "FLOWFILE_ATTRIBUTES"
      expressionLanguageSupported:
        type: "boolean"
        description: "Whether or not expression language is supported"
    example:
      name: "name"
      expressionLanguageScope: "NONE"
      description: "description"
      expressionLanguageSupported: true
      value: "value"
  DynamicRelationship:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The description of the dynamic relationship name"
      description:
        type: "string"
        description: "The description of the dynamic relationship"
    example:
      name: "name"
      description: "description"
  Extension:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the extension"
      type:
        type: "string"
        description: "The type of the extension"
        enum:
        - "PROCESSOR"
        - "CONTROLLER_SERVICE"
        - "REPORTING_TASK"
      deprecationNotice:
        description: "The deprecation notice of the extension"
        $ref: "#/definitions/DeprecationNotice"
      description:
        type: "string"
        description: "The description of the extension"
      tags:
        type: "array"
        xml:
          wrapped: true
        description: "The tags of the extension"
        items:
          type: "string"
          xml:
            name: "tag"
      properties:
        type: "array"
        xml:
          wrapped: true
        description: "The properties of the extension"
        items:
          xml:
            name: "property"
          $ref: "#/definitions/Property"
      dynamicProperties:
        type: "array"
        xml:
          wrapped: true
        description: "The dynamic properties of the extension"
        items:
          xml:
            name: "dynamicProperty"
          $ref: "#/definitions/DynamicProperty"
      relationships:
        type: "array"
        xml:
          wrapped: true
        description: "The relationships of the extension"
        items:
          xml:
            name: "relationship"
          $ref: "#/definitions/Relationship"
      dynamicRelationship:
        description: "The dynamic relationships of the extension"
        $ref: "#/definitions/DynamicRelationship"
      readsAttributes:
        type: "array"
        xml:
          wrapped: true
        description: "The attributes read from flow files by the extension"
        items:
          xml:
            name: "readsAttribute"
          $ref: "#/definitions/Attribute"
      writesAttributes:
        type: "array"
        xml:
          wrapped: true
        description: "The attributes written to flow files by the extension"
        items:
          xml:
            name: "writesAttribute"
          $ref: "#/definitions/Attribute"
      stateful:
        description: "The information about how the extension stores state"
        $ref: "#/definitions/Stateful"
      restricted:
        description: "The restrictions of the extension"
        $ref: "#/definitions/Restricted"
      inputRequirement:
        type: "string"
        description: "The input requirement of the extension"
        enum:
        - "INPUT_REQUIRED"
        - "INPUT_ALLOWED"
        - "INPUT_FORBIDDEN"
      systemResourceConsiderations:
        type: "array"
        xml:
          wrapped: true
        description: "The resource considerations of the extension"
        items:
          xml:
            name: "systemResourceConsideration"
          $ref: "#/definitions/SystemResourceConsideration"
      seeAlso:
        type: "array"
        xml:
          wrapped: true
        description: "The names of other extensions to see"
        items:
          type: "string"
          xml:
            name: "see"
      providedServiceAPIs:
        type: "array"
        xml:
          wrapped: true
        description: "The service APIs provided by this extension"
        items:
          xml:
            name: "providedServiceAPI"
          $ref: "#/definitions/ProvidedServiceAPI"
    example:
      deprecationNotice:
        reason: "reason"
        alternatives:
        - "alternatives"
        - "alternatives"
      dynamicProperties:
      - name: "name"
        expressionLanguageScope: "NONE"
        description: "description"
        expressionLanguageSupported: true
        value: "value"
      - name: "name"
        expressionLanguageScope: "NONE"
        description: "description"
        expressionLanguageSupported: true
        value: "value"
      writesAttributes:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      providedServiceAPIs:
      - groupId: "groupId"
        className: "className"
        artifactId: "artifactId"
        version: "version"
      - groupId: "groupId"
        className: "className"
        artifactId: "artifactId"
        version: "version"
      description: "description"
      type: "PROCESSOR"
      inputRequirement: "INPUT_REQUIRED"
      seeAlso:
      - "seeAlso"
      - "seeAlso"
      tags:
      - "tags"
      - "tags"
      readsAttributes:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      relationships:
      - autoTerminated: true
        name: "name"
        description: "description"
      - autoTerminated: true
        name: "name"
        description: "description"
      dynamicRelationship:
        name: "name"
        description: "description"
      restricted:
        restrictions:
        - requiredPermission: "requiredPermission"
          explanation: "explanation"
        - requiredPermission: "requiredPermission"
          explanation: "explanation"
        generalRestrictionExplanation: "generalRestrictionExplanation"
      systemResourceConsiderations:
      - resource: "resource"
        description: "description"
      - resource: "resource"
        description: "description"
      name: "name"
      properties:
      - controllerServiceDefinition:
          groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        allowableValues:
        - displayName: "displayName"
          description: "description"
          value: "value"
        - displayName: "displayName"
          description: "description"
          value: "value"
        displayName: "displayName"
        defaultValue: "defaultValue"
        dynamicallyModifiesClasspath: true
        name: "name"
        expressionLanguageScope: "NONE"
        description: "description"
        dynamic: true
        sensitive: true
        expressionLanguageSupported: true
        required: true
      - controllerServiceDefinition:
          groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        allowableValues:
        - displayName: "displayName"
          description: "description"
          value: "value"
        - displayName: "displayName"
          description: "description"
          value: "value"
        displayName: "displayName"
        defaultValue: "defaultValue"
        dynamicallyModifiesClasspath: true
        name: "name"
        expressionLanguageScope: "NONE"
        description: "description"
        dynamic: true
        sensitive: true
        expressionLanguageSupported: true
        required: true
      stateful:
        description: "description"
        scopes:
        - "CLUSTER"
        - "CLUSTER"
  ExtensionBundle:
    type: "object"
    required:
    - "bucketIdentifier"
    - "bundleType"
    - "name"
    - "type"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      identifier:
        type: "string"
        description: "An ID to uniquely identify this object."
        readOnly: true
      name:
        type: "string"
        description: "The name of the item."
      description:
        type: "string"
        description: "A description of the item."
      bucketIdentifier:
        type: "string"
        description: "The identifier of the bucket this items belongs to. This cannot\
          \ be changed after the item is created."
      bucketName:
        type: "string"
        description: "The name of the bucket this items belongs to."
        readOnly: true
      createdTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was created, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      modifiedTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was last modified, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      type:
        type: "string"
        description: "The type of item."
        enum:
        - "Flow"
        - "Bundle"
      permissions:
        description: "The access that the current user has to the bucket containing\
          \ this item."
        readOnly: true
        $ref: "#/definitions/Permissions"
      bundleType:
        type: "string"
        description: "The type of the extension bundle"
        enum:
        - "NIFI_NAR"
        - "MINIFI_CPP"
      groupId:
        type: "string"
        description: "The group id of the extension bundle"
      artifactId:
        type: "string"
        description: "The artifact id of the extension bundle"
      versionCount:
        type: "integer"
        format: "int64"
        description: "The number of versions of this extension bundle."
        readOnly: true
        minimum: 0
    example:
      versionCount: 0
      identifier: "identifier"
      bucketName: "bucketName"
      createdTimestamp: 1
      groupId: "groupId"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      description: "description"
      bucketIdentifier: "bucketIdentifier"
      bundleType: "NIFI_NAR"
      type: "Flow"
      permissions:
        canRead: true
        canWrite: true
        canDelete: true
      name: "name"
      modifiedTimestamp: 1
      artifactId: "artifactId"
  ExtensionFilterParams:
    type: "object"
    properties:
      bundleType:
        type: "string"
        description: "The type of bundle"
        enum:
        - "NIFI_NAR"
        - "MINIFI_CPP"
      extensionType:
        type: "string"
        description: "The type of extension"
        enum:
        - "PROCESSOR"
        - "CONTROLLER_SERVICE"
        - "REPORTING_TASK"
      tags:
        type: "array"
        description: "The tags"
        uniqueItems: true
        items:
          type: "string"
    example:
      extensionType: "PROCESSOR"
      bundleType: "NIFI_NAR"
      tags:
      - "tags"
      - "tags"
  ExtensionMetadata:
    type: "object"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      name:
        type: "string"
        description: "The name of the extension"
      displayName:
        type: "string"
        description: "The display name of the extension"
      type:
        type: "string"
        description: "The type of the extension"
        enum:
        - "PROCESSOR"
        - "CONTROLLER_SERVICE"
        - "REPORTING_TASK"
      description:
        type: "string"
        description: "The description of the extension"
      deprecationNotice:
        description: "The deprecation notice of the extension"
        $ref: "#/definitions/DeprecationNotice"
      tags:
        type: "array"
        description: "The tags of the extension"
        items:
          type: "string"
      restricted:
        description: "The restrictions of the extension"
        $ref: "#/definitions/Restricted"
      providedServiceAPIs:
        type: "array"
        description: "The service APIs provided by the extension"
        items:
          $ref: "#/definitions/ProvidedServiceAPI"
      bundleInfo:
        description: "The information for the bundle where this extension is located"
        $ref: "#/definitions/BundleInfo"
      hasAdditionalDetails:
        type: "boolean"
        description: "Whether or not the extension has additional detail documentation"
      linkDocs:
        description: "A WebLink to the documentation for this extension."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
    example:
      bundleInfo:
        bucketName: "bucketName"
        groupId: "groupId"
        bundleId: "bundleId"
        bucketId: "bucketId"
        artifactId: "artifactId"
        bundleType: "NIFI_NAR"
        version: "version"
        systemApiVersion: "systemApiVersion"
      hasAdditionalDetails: true
      linkDocs:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      displayName: "displayName"
      deprecationNotice:
        reason: "reason"
        alternatives:
        - "alternatives"
        - "alternatives"
      restricted:
        restrictions:
        - requiredPermission: "requiredPermission"
          explanation: "explanation"
        - requiredPermission: "requiredPermission"
          explanation: "explanation"
        generalRestrictionExplanation: "generalRestrictionExplanation"
      providedServiceAPIs:
      - groupId: "groupId"
        className: "className"
        artifactId: "artifactId"
        version: "version"
      - groupId: "groupId"
        className: "className"
        artifactId: "artifactId"
        version: "version"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      name: "name"
      description: "description"
      type: "PROCESSOR"
      tags:
      - "tags"
      - "tags"
  ExtensionMetadataContainer:
    type: "object"
    properties:
      numResults:
        type: "integer"
        format: "int32"
        description: "The number of extensions in the response"
      filterParams:
        description: "The filter parameters submitted for the request"
        $ref: "#/definitions/ExtensionFilterParams"
      extensions:
        type: "array"
        description: "The metadata for the extensions"
        uniqueItems: true
        items:
          $ref: "#/definitions/ExtensionMetadata"
    example:
      extensions:
      - bundleInfo:
          bucketName: "bucketName"
          groupId: "groupId"
          bundleId: "bundleId"
          bucketId: "bucketId"
          artifactId: "artifactId"
          bundleType: "NIFI_NAR"
          version: "version"
          systemApiVersion: "systemApiVersion"
        hasAdditionalDetails: true
        linkDocs:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        displayName: "displayName"
        deprecationNotice:
          reason: "reason"
          alternatives:
          - "alternatives"
          - "alternatives"
        restricted:
          restrictions:
          - requiredPermission: "requiredPermission"
            explanation: "explanation"
          - requiredPermission: "requiredPermission"
            explanation: "explanation"
          generalRestrictionExplanation: "generalRestrictionExplanation"
        providedServiceAPIs:
        - groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        - groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        name: "name"
        description: "description"
        type: "PROCESSOR"
        tags:
        - "tags"
        - "tags"
      - bundleInfo:
          bucketName: "bucketName"
          groupId: "groupId"
          bundleId: "bundleId"
          bucketId: "bucketId"
          artifactId: "artifactId"
          bundleType: "NIFI_NAR"
          version: "version"
          systemApiVersion: "systemApiVersion"
        hasAdditionalDetails: true
        linkDocs:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        displayName: "displayName"
        deprecationNotice:
          reason: "reason"
          alternatives:
          - "alternatives"
          - "alternatives"
        restricted:
          restrictions:
          - requiredPermission: "requiredPermission"
            explanation: "explanation"
          - requiredPermission: "requiredPermission"
            explanation: "explanation"
          generalRestrictionExplanation: "generalRestrictionExplanation"
        providedServiceAPIs:
        - groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        - groupId: "groupId"
          className: "className"
          artifactId: "artifactId"
          version: "version"
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        name: "name"
        description: "description"
        type: "PROCESSOR"
        tags:
        - "tags"
        - "tags"
      numResults: 0
      filterParams:
        extensionType: "PROCESSOR"
        bundleType: "NIFI_NAR"
        tags:
        - "tags"
        - "tags"
  ExtensionRepoArtifact:
    type: "object"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      bucketName:
        type: "string"
        description: "The bucket name"
      groupId:
        type: "string"
        description: "The group id"
      artifactId:
        type: "string"
        description: "The artifact id"
    example:
      bucketName: "bucketName"
      groupId: "groupId"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      artifactId: "artifactId"
  ExtensionRepoBucket:
    type: "object"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      bucketName:
        type: "string"
        description: "The name of the bucket"
    example:
      bucketName: "bucketName"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
  ExtensionRepoGroup:
    type: "object"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      bucketName:
        type: "string"
        description: "The bucket name"
      groupId:
        type: "string"
        description: "The group id"
    example:
      bucketName: "bucketName"
      groupId: "groupId"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
  ExtensionRepoVersion:
    type: "object"
    properties:
      extensionsLink:
        description: "The WebLink to view the metadata about the extensions contained\
          \ in the extension bundle."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      downloadLink:
        description: "The WebLink to download this version of the extension bundle."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      sha256Link:
        description: "The WebLink to retrieve the SHA-256 digest for this version\
          \ of the extension bundle."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      sha256Supplied:
        description: "Indicates if the client supplied a SHA-256 when uploading this\
          \ version of the extension bundle."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
    example:
      extensionsLink:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      sha256Link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      downloadLink:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      sha256Supplied:
        href: "http://example.com/aeiou"
        params:
          key: "params"
  ExtensionRepoVersionSummary:
    type: "object"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      bucketName:
        type: "string"
        description: "The bucket name"
      groupId:
        type: "string"
        description: "The group id"
      artifactId:
        type: "string"
        description: "The artifact id"
      version:
        type: "string"
        description: "The version"
      author:
        type: "string"
        description: "The identity of the user that created this version"
      timestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when this version was created"
    example:
      bucketName: "bucketName"
      author: "author"
      groupId: "groupId"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      artifactId: "artifactId"
      version: "version"
      timestamp: 0
  ExternalControllerServiceReference:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The identifier of the controller service"
      name:
        type: "string"
        description: "The name of the controller service"
    example:
      identifier: "identifier"
      name: "name"
  Fields:
    type: "object"
    properties:
      fields:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
    example:
      fields:
      - "fields"
      - "fields"
  JaxbLink:
    type: "object"
    properties:
      href:
        type: "string"
        format: "uri"
        xml:
          attribute: true
        description: "The href for the link"
      params:
        type: "object"
        description: "The params for the link"
        additionalProperties:
          type: "string"
    example:
      href: "http://example.com/aeiou"
      params:
        key: "params"
  Permissions:
    type: "object"
    properties:
      canRead:
        type: "boolean"
        description: "Indicates whether the user can read a given resource."
        readOnly: true
      canWrite:
        type: "boolean"
        description: "Indicates whether the user can write a given resource."
        readOnly: true
      canDelete:
        type: "boolean"
        description: "Indicates whether the user can delete a given resource."
        readOnly: true
    example:
      canRead: true
      canWrite: true
      canDelete: true
  Position:
    type: "object"
    properties:
      x:
        type: "number"
        format: "double"
        description: "The x coordinate."
      y:
        type: "number"
        format: "double"
        description: "The y coordinate."
    description: "The position of a component on the graph"
    example:
      x: 0.8008281904610115
      y: 6.027456183070403
  Property:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the property"
      displayName:
        type: "string"
        description: "The display name"
      description:
        type: "string"
        description: "The description"
      defaultValue:
        type: "string"
        description: "The default value"
      controllerServiceDefinition:
        description: "The controller service required by this property, or null if\
          \ none is required"
        $ref: "#/definitions/ControllerServiceDefinition"
      allowableValues:
        type: "array"
        xml:
          wrapped: true
        description: "The allowable values for this property"
        items:
          xml:
            name: "allowableValue"
          $ref: "#/definitions/AllowableValue"
      required:
        type: "boolean"
        description: "Whether or not the property is required"
      sensitive:
        type: "boolean"
        description: "Whether or not the property is sensitive"
      expressionLanguageSupported:
        type: "boolean"
        description: "Whether or not expression language is supported"
      expressionLanguageScope:
        type: "string"
        description: "The scope of expression language support"
        enum:
        - "NONE"
        - "VARIABLE_REGISTRY"
        - "FLOWFILE_ATTRIBUTES"
      dynamicallyModifiesClasspath:
        type: "boolean"
        description: "Whether or not the processor dynamically modifies the classpath"
      dynamic:
        type: "boolean"
        description: "Whether or not the processor is dynamic"
    example:
      controllerServiceDefinition:
        groupId: "groupId"
        className: "className"
        artifactId: "artifactId"
        version: "version"
      allowableValues:
      - displayName: "displayName"
        description: "description"
        value: "value"
      - displayName: "displayName"
        description: "description"
        value: "value"
      displayName: "displayName"
      defaultValue: "defaultValue"
      dynamicallyModifiesClasspath: true
      name: "name"
      expressionLanguageScope: "NONE"
      description: "description"
      dynamic: true
      sensitive: true
      expressionLanguageSupported: true
      required: true
  ProvidedServiceAPI:
    type: "object"
    properties:
      className:
        type: "string"
        description: "The class name of the service API being provided"
      groupId:
        type: "string"
        description: "The group id of the service API being provided"
      artifactId:
        type: "string"
        description: "The artifact id of the service API being provided"
      version:
        type: "string"
        description: "The version of the service API being provided"
    example:
      groupId: "groupId"
      className: "className"
      artifactId: "artifactId"
      version: "version"
  RegistryConfiguration:
    type: "object"
    properties:
      supportsManagedAuthorizer:
        type: "boolean"
        description: "Whether this NiFi Registry supports a managed authorizer. Managed\
          \ authorizers can visualize users, groups, and policies in the UI."
        readOnly: true
      supportsConfigurableAuthorizer:
        type: "boolean"
        description: "Whether this NiFi Registry supports a configurable authorizer."
        readOnly: true
      supportsConfigurableUsersAndGroups:
        type: "boolean"
        description: "Whether this NiFi Registry supports configurable users and groups."
        readOnly: true
    example:
      supportsConfigurableAuthorizer: true
      supportsConfigurableUsersAndGroups: true
      supportsManagedAuthorizer: true
  Relationship:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the relationship"
      description:
        type: "string"
        description: "The description of the relationship"
      autoTerminated:
        type: "boolean"
        description: "Whether or not the relationship is auto-terminated by default"
    example:
      autoTerminated: true
      name: "name"
      description: "description"
  Resource:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The identifier of the resource."
        readOnly: true
      name:
        type: "string"
        description: "The name of the resource."
        readOnly: true
    example:
      identifier: "identifier"
      name: "name"
  ResourcePermissions:
    type: "object"
    properties:
      buckets:
        description: "The access that the current user has to the top level /buckets\
          \ resource of this NiFi Registry (i.e., access to all buckets)"
        readOnly: true
        $ref: "#/definitions/Permissions"
      tenants:
        description: "The access that the current user has to the top level /tenants\
          \ resource of this NiFi Registry"
        readOnly: true
        $ref: "#/definitions/Permissions"
      policies:
        description: "The access that the current user has to the top level /policies\
          \ resource of this NiFi Registry"
        readOnly: true
        $ref: "#/definitions/Permissions"
      proxy:
        description: "The access that the current user has to the top level /proxy\
          \ resource of this NiFi Registry"
        readOnly: true
        $ref: "#/definitions/Permissions"
      anyTopLevelResource:
        description: "The access that the current user has to any top level resources\
          \ (a logical 'OR' of all other values)"
        readOnly: true
        $ref: "#/definitions/Permissions"
    example:
      tenants:
        canRead: true
        canWrite: true
        canDelete: true
      proxy:
        canRead: true
        canWrite: true
        canDelete: true
      buckets:
        canRead: true
        canWrite: true
        canDelete: true
      policies:
        canRead: true
        canWrite: true
        canDelete: true
      anyTopLevelResource:
        canRead: true
        canWrite: true
        canDelete: true
  Restricted:
    type: "object"
    properties:
      generalRestrictionExplanation:
        type: "string"
        description: "The general restriction for the extension, or null if only specific\
          \ restrictions exist"
      restrictions:
        type: "array"
        xml:
          wrapped: true
        description: "The specific restrictions"
        items:
          xml:
            name: "restriction"
          $ref: "#/definitions/Restriction"
    example:
      restrictions:
      - requiredPermission: "requiredPermission"
        explanation: "explanation"
      - requiredPermission: "requiredPermission"
        explanation: "explanation"
      generalRestrictionExplanation: "generalRestrictionExplanation"
  Restriction:
    type: "object"
    properties:
      requiredPermission:
        type: "string"
        description: "The permission required for this restriction"
      explanation:
        type: "string"
        description: "The explanation of this restriction"
    example:
      requiredPermission: "requiredPermission"
      explanation: "explanation"
  RevisionInfo:
    type: "object"
    properties:
      clientId:
        type: "string"
        description: "A client identifier used to make a request. By including a client\
          \ identifier, the API can allow multiple requests without needing the current\
          \ revision. Due to the asynchronous nature of requests/responses this was\
          \ implemented to allow the client to make numerous requests without having\
          \ to wait for the previous response to come back."
      version:
        type: "integer"
        format: "int64"
        description: "NiFi Registry employs an optimistic locking strategy where the\
          \ client must include a revision in their request when performing an update.\
          \ In a response to a mutable flow request, this field represents the updated\
          \ base version."
      lastModifier:
        type: "string"
        description: "The user that last modified the entity."
        readOnly: true
    description: "The revision information for an entity managed through the REST\
      \ API."
    example:
      clientId: "clientId"
      lastModifier: "lastModifier"
      version: 6
  Stateful:
    type: "object"
    properties:
      description:
        type: "string"
        description: "The description for how the extension stores state"
      scopes:
        type: "array"
        xml:
          wrapped: true
        description: "The scopes used to store state"
        items:
          type: "string"
          xml:
            name: "scope"
          enum:
          - "CLUSTER"
          - "LOCAL"
    example:
      description: "description"
      scopes:
      - "CLUSTER"
      - "CLUSTER"
  SystemResourceConsideration:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "The resource to consider"
      description:
        type: "string"
        description: "The description of how the resource is affected"
    example:
      resource: "resource"
      description: "description"
  TagCount:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "The tag label"
      count:
        type: "integer"
        format: "int32"
        description: "The number of occurrences of the given tag"
    example:
      count: 0
      tag: "tag"
  Tenant:
    type: "object"
    required:
    - "identity"
    properties:
      identifier:
        type: "string"
        description: "The computer-generated identifier of the tenant."
        readOnly: true
      identity:
        type: "string"
        description: "The human-facing identity of the tenant. This can only be changed\
          \ if the tenant is configurable."
      configurable:
        type: "boolean"
        description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
          \ has been configured to manage it."
        readOnly: true
      resourcePermissions:
        description: "A summary top-level resource access policies granted to this\
          \ tenant."
        readOnly: true
        $ref: "#/definitions/ResourcePermissions"
      accessPolicies:
        type: "array"
        description: "The access policies granted to this tenant."
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/AccessPolicySummary"
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
    example:
      identifier: "identifier"
      resourcePermissions:
        tenants:
          canRead: true
          canWrite: true
          canDelete: true
        proxy:
          canRead: true
          canWrite: true
          canDelete: true
        buckets:
          canRead: true
          canWrite: true
          canDelete: true
        policies:
          canRead: true
          canWrite: true
          canDelete: true
        anyTopLevelResource:
          canRead: true
          canWrite: true
          canDelete: true
      accessPolicies:
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      identity: "identity"
      configurable: true
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  User:
    type: "object"
    required:
    - "identity"
    properties:
      identifier:
        type: "string"
        description: "The computer-generated identifier of the tenant."
        readOnly: true
      identity:
        type: "string"
        description: "The human-facing identity of the tenant. This can only be changed\
          \ if the tenant is configurable."
      configurable:
        type: "boolean"
        description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
          \ has been configured to manage it."
        readOnly: true
      resourcePermissions:
        description: "A summary top-level resource access policies granted to this\
          \ tenant."
        readOnly: true
        $ref: "#/definitions/ResourcePermissions"
      accessPolicies:
        type: "array"
        description: "The access policies granted to this tenant."
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/AccessPolicySummary"
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
      userGroups:
        type: "array"
        description: "The groups to which the user belongs."
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/Tenant"
    example:
      identifier: "identifier"
      userGroups:
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      resourcePermissions:
        tenants:
          canRead: true
          canWrite: true
          canDelete: true
        proxy:
          canRead: true
          canWrite: true
          canDelete: true
        buckets:
          canRead: true
          canWrite: true
          canDelete: true
        policies:
          canRead: true
          canWrite: true
          canDelete: true
        anyTopLevelResource:
          canRead: true
          canWrite: true
          canDelete: true
      accessPolicies:
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      identity: "identity"
      configurable: true
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  UserGroup:
    type: "object"
    required:
    - "identity"
    properties:
      identifier:
        type: "string"
        description: "The computer-generated identifier of the tenant."
        readOnly: true
      identity:
        type: "string"
        description: "The human-facing identity of the tenant. This can only be changed\
          \ if the tenant is configurable."
      configurable:
        type: "boolean"
        description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
          \ has been configured to manage it."
        readOnly: true
      resourcePermissions:
        description: "A summary top-level resource access policies granted to this\
          \ tenant."
        readOnly: true
        $ref: "#/definitions/ResourcePermissions"
      accessPolicies:
        type: "array"
        description: "The access policies granted to this tenant."
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/AccessPolicySummary"
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
      users:
        type: "array"
        description: "The users that belong to this user group. This can only be changed\
          \ if this group is configurable."
        uniqueItems: true
        items:
          $ref: "#/definitions/Tenant"
    example:
      identifier: "identifier"
      resourcePermissions:
        tenants:
          canRead: true
          canWrite: true
          canDelete: true
        proxy:
          canRead: true
          canWrite: true
          canDelete: true
        buckets:
          canRead: true
          canWrite: true
          canDelete: true
        policies:
          canRead: true
          canWrite: true
          canDelete: true
        anyTopLevelResource:
          canRead: true
          canWrite: true
          canDelete: true
      accessPolicies:
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resource: "resource"
        action: "read"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      identity: "identity"
      configurable: true
      users:
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      - identifier: "identifier"
        resourcePermissions:
          tenants:
            canRead: true
            canWrite: true
            canDelete: true
          proxy:
            canRead: true
            canWrite: true
            canDelete: true
          buckets:
            canRead: true
            canWrite: true
            canDelete: true
          policies:
            canRead: true
            canWrite: true
            canDelete: true
          anyTopLevelResource:
            canRead: true
            canWrite: true
            canDelete: true
        accessPolicies:
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        - identifier: "identifier"
          resource: "resource"
          action: "read"
          configurable: true
          revision:
            clientId: "clientId"
            lastModifier: "lastModifier"
            version: 6
        identity: "identity"
        configurable: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  VersionedConnection:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      source:
        description: "The source of the connection."
        $ref: "#/definitions/ConnectableComponent"
      destination:
        description: "The destination of the connection."
        $ref: "#/definitions/ConnectableComponent"
      labelIndex:
        type: "integer"
        format: "int32"
        description: "The index of the bend point where to place the connection label."
      zIndex:
        type: "integer"
        format: "int64"
        description: "The z index of the connection."
      selectedRelationships:
        type: "array"
        description: "The selected relationship that comprise the connection."
        uniqueItems: true
        items:
          type: "string"
      backPressureObjectThreshold:
        type: "integer"
        format: "int64"
        description: "The object count threshold for determining when back pressure\
          \ is applied. Updating this value is a passive change in the sense that\
          \ it won't impact whether existing files over the limit are affected but\
          \ it does help feeder processors to stop pushing too much into this work\
          \ queue."
      backPressureDataSizeThreshold:
        type: "string"
        description: "The object data size threshold for determining when back pressure\
          \ is applied. Updating this value is a passive change in the sense that\
          \ it won't impact whether existing files over the limit are affected but\
          \ it does help feeder processors to stop pushing too much into this work\
          \ queue."
      flowFileExpiration:
        type: "string"
        description: "The amount of time a flow file may be in the flow before it\
          \ will be automatically aged out of the flow. Once a flow file reaches this\
          \ age it will be terminated from the flow the next time a processor attempts\
          \ to start work on it."
      prioritizers:
        type: "array"
        description: "The comparators used to prioritize the queue."
        items:
          type: "string"
      bends:
        type: "array"
        description: "The bend points on the connection."
        items:
          $ref: "#/definitions/Position"
      loadBalanceStrategy:
        type: "string"
        description: "The Strategy to use for load balancing data across the cluster,\
          \ or null, if no Load Balance Strategy has been specified."
        enum:
        - "DO_NOT_LOAD_BALANCE"
        - "PARTITION_BY_ATTRIBUTE"
        - "ROUND_ROBIN"
        - "SINGLE_NODE"
      partitioningAttribute:
        type: "string"
        description: "The attribute to use for partitioning data as it is load balanced\
          \ across the cluster. If the Load Balance Strategy is configured to use\
          \ PARTITION_BY_ATTRIBUTE, the value returned by this method is the name\
          \ of the FlowFile Attribute that will be used to determine which node in\
          \ the cluster should receive a given FlowFile. If the Load Balance Strategy\
          \ is unset or is set to any other value, the Partitioning Attribute has\
          \ no effect."
      loadBalanceCompression:
        type: "string"
        description: "Whether or not compression should be used when transferring\
          \ FlowFiles between nodes"
        enum:
        - "DO_NOT_COMPRESS"
        - "COMPRESS_ATTRIBUTES_ONLY"
        - "COMPRESS_ATTRIBUTES_AND_CONTENT"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      prioritizers:
      - "prioritizers"
      - "prioritizers"
      comments: "comments"
      flowFileExpiration: "flowFileExpiration"
      selectedRelationships:
      - "selectedRelationships"
      - "selectedRelationships"
      loadBalanceCompression: "DO_NOT_COMPRESS"
      destination:
        comments: "comments"
        groupId: "groupId"
        name: "name"
        id: "id"
        type: "PROCESSOR"
      backPressureDataSizeThreshold: "backPressureDataSizeThreshold"
      loadBalanceStrategy: "DO_NOT_LOAD_BALANCE"
      source:
        comments: "comments"
        groupId: "groupId"
        name: "name"
        id: "id"
        type: "PROCESSOR"
      labelIndex: 3
      bends:
      - x: 0.8008281904610115
        y: 6.027456183070403
      - x: 0.8008281904610115
        y: 6.027456183070403
      backPressureObjectThreshold: 4
      name: "name"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      groupIdentifier: "groupIdentifier"
      partitioningAttribute: "partitioningAttribute"
      zIndex: 2
  VersionedControllerService:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      type:
        type: "string"
        description: "The type of the controller service."
      bundle:
        description: "The details of the artifact that bundled this processor type."
        $ref: "#/definitions/Bundle"
      controllerServiceApis:
        type: "array"
        description: "Lists the APIs this Controller Service implements."
        items:
          $ref: "#/definitions/ControllerServiceAPI"
      properties:
        type: "object"
        description: "The properties of the controller service."
        additionalProperties:
          type: "string"
      propertyDescriptors:
        type: "object"
        description: "The property descriptors for the processor."
        additionalProperties:
          $ref: "#/definitions/VersionedPropertyDescriptor"
      annotationData:
        type: "string"
        description: "The annotation for the controller service. This is how the custom\
          \ UI relays configuration to the controller service."
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      annotationData: "annotationData"
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      controllerServiceApis:
      - type: "type"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
      - type: "type"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
      name: "name"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      type: "type"
      propertyDescriptors:
        key:
          displayName: "displayName"
          identifiesControllerService: true
          name: "name"
          sensitive: true
      groupIdentifier: "groupIdentifier"
      bundle:
        artifact: "artifact"
        version: "version"
        group: "group"
      properties:
        key: "properties"
  VersionedFlow:
    type: "object"
    required:
    - "bucketIdentifier"
    - "name"
    - "type"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      identifier:
        type: "string"
        description: "An ID to uniquely identify this object."
        readOnly: true
      name:
        type: "string"
        description: "The name of the item."
      description:
        type: "string"
        description: "A description of the item."
      bucketIdentifier:
        type: "string"
        description: "The identifier of the bucket this items belongs to. This cannot\
          \ be changed after the item is created."
      bucketName:
        type: "string"
        description: "The name of the bucket this items belongs to."
        readOnly: true
      createdTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was created, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      modifiedTimestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp of when the item was last modified, as milliseconds\
          \ since epoch."
        readOnly: true
        minimum: 1
      type:
        type: "string"
        description: "The type of item."
        enum:
        - "Flow"
        - "Bundle"
      permissions:
        description: "The access that the current user has to the bucket containing\
          \ this item."
        readOnly: true
        $ref: "#/definitions/Permissions"
      versionCount:
        type: "integer"
        format: "int64"
        description: "The number of versions of this flow."
        readOnly: true
        minimum: 0
      revision:
        description: "The revision of this entity used for optimistic-locking during\
          \ updates."
        readOnly: true
        $ref: "#/definitions/RevisionInfo"
    example:
      versionCount: 0
      identifier: "identifier"
      bucketName: "bucketName"
      permissions:
        canRead: true
        canWrite: true
        canDelete: true
      createdTimestamp: 1
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      name: "name"
      description: "description"
      modifiedTimestamp: 1
      bucketIdentifier: "bucketIdentifier"
      type: "Flow"
      revision:
        clientId: "clientId"
        lastModifier: "lastModifier"
        version: 6
  VersionedFlowCoordinates:
    type: "object"
    properties:
      registryUrl:
        type: "string"
        description: "The URL of the Flow Registry that contains the flow"
      bucketId:
        type: "string"
        description: "The UUID of the bucket that the flow resides in"
      flowId:
        type: "string"
        description: "The UUID of the flow"
      version:
        type: "integer"
        format: "int32"
        description: "The version of the flow"
      latest:
        type: "boolean"
        description: "Whether or not these coordinates point to the latest version\
          \ of the flow"
    example:
      registryUrl: "registryUrl"
      bucketId: "bucketId"
      flowId: "flowId"
      version: 1
      latest: true
  VersionedFlowDifference:
    type: "object"
    properties:
      bucketId:
        type: "string"
        description: "The id of the bucket that the flow is stored in."
      flowId:
        type: "string"
        description: "The id of the flow that is being examined."
      versionA:
        type: "integer"
        format: "int32"
        description: "The earlier version from the diff operation."
      versionB:
        type: "integer"
        format: "int32"
        description: "The latter version from the diff operation."
      componentDifferenceGroups:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/ComponentDifferenceGroup"
    example:
      versionB: 6
      versionA: 0
      bucketId: "bucketId"
      flowId: "flowId"
      componentDifferenceGroups:
      - componentType: "componentType"
        componentId: "componentId"
        processGroupId: "processGroupId"
        differences:
        - differenceType: "differenceType"
          differenceTypeDescription: "differenceTypeDescription"
          changeDescription: "changeDescription"
          valueB: "valueB"
          valueA: "valueA"
        - differenceType: "differenceType"
          differenceTypeDescription: "differenceTypeDescription"
          changeDescription: "changeDescription"
          valueB: "valueB"
          valueA: "valueA"
        componentName: "componentName"
      - componentType: "componentType"
        componentId: "componentId"
        processGroupId: "processGroupId"
        differences:
        - differenceType: "differenceType"
          differenceTypeDescription: "differenceTypeDescription"
          changeDescription: "changeDescription"
          valueB: "valueB"
          valueA: "valueA"
        - differenceType: "differenceType"
          differenceTypeDescription: "differenceTypeDescription"
          changeDescription: "changeDescription"
          valueB: "valueB"
          valueA: "valueA"
        componentName: "componentName"
  VersionedFlowSnapshot:
    type: "object"
    required:
    - "flowContents"
    - "snapshotMetadata"
    properties:
      snapshotMetadata:
        description: "The metadata for this snapshot"
        $ref: "#/definitions/VersionedFlowSnapshotMetadata"
      flowContents:
        description: "The contents of the versioned flow"
        $ref: "#/definitions/VersionedProcessGroup"
      externalControllerServices:
        type: "object"
        description: "The information about controller services that exist outside\
          \ this versioned flow, but are referenced by components within the versioned\
          \ flow."
        additionalProperties:
          $ref: "#/definitions/ExternalControllerServiceReference"
      parameterContexts:
        type: "object"
        description: "The parameter contexts referenced by process groups in the flow\
          \ contents. The mapping is from the name of the context to the context instance,\
          \ and it is expected that any context in this map is referenced by at least\
          \ one process group in this flow."
        additionalProperties:
          $ref: "#/definitions/VersionedParameterContext"
      flowEncodingVersion:
        type: "string"
        description: "The optional encoding version of the flow contents."
      flow:
        description: "The flow this snapshot is for"
        readOnly: true
        $ref: "#/definitions/VersionedFlow"
      bucket:
        description: "The bucket where the flow is located"
        readOnly: true
        $ref: "#/definitions/Bucket"
      latest:
        type: "boolean"
    example:
      bucket:
        identifier: "identifier"
        allowBundleRedeploy: true
        permissions:
          canRead: true
          canWrite: true
          canDelete: true
        createdTimestamp: 1
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        name: "name"
        description: "description"
        allowPublicRead: true
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      snapshotMetadata:
        flowIdentifier: "flowIdentifier"
        comments: "comments"
        author: "author"
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        bucketIdentifier: "bucketIdentifier"
        version: 0
        timestamp: 1
      externalControllerServices:
        key:
          identifier: "identifier"
          name: "name"
      flowContents:
        identifier: "identifier"
        componentType: "CONNECTION"
        variables:
          key: "variables"
        comments: "comments"
        processors:
        - annotationData: "annotationData"
          identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          concurrentlySchedulableTaskCount: 7
          autoTerminatedRelationships:
          - "autoTerminatedRelationships"
          - "autoTerminatedRelationships"
          bulletinLevel: "bulletinLevel"
          executionNode: "executionNode"
          penaltyDuration: "penaltyDuration"
          runDurationMillis: 2
          type: "type"
          propertyDescriptors:
            key:
              displayName: "displayName"
              identifiesControllerService: true
              name: "name"
              sensitive: true
          scheduledState: "ENABLED"
          schedulingStrategy: "schedulingStrategy"
          name: "name"
          style:
            key: "style"
          schedulingPeriod: "schedulingPeriod"
          yieldDuration: "yieldDuration"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
          properties:
            key: "properties"
        - annotationData: "annotationData"
          identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          concurrentlySchedulableTaskCount: 7
          autoTerminatedRelationships:
          - "autoTerminatedRelationships"
          - "autoTerminatedRelationships"
          bulletinLevel: "bulletinLevel"
          executionNode: "executionNode"
          penaltyDuration: "penaltyDuration"
          runDurationMillis: 2
          type: "type"
          propertyDescriptors:
            key:
              displayName: "displayName"
              identifiesControllerService: true
              name: "name"
              sensitive: true
          scheduledState: "ENABLED"
          schedulingStrategy: "schedulingStrategy"
          name: "name"
          style:
            key: "style"
          schedulingPeriod: "schedulingPeriod"
          yieldDuration: "yieldDuration"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
          properties:
            key: "properties"
        labels:
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          name: "name"
          width: 7.386281948385884
          style:
            key: "style"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          label: "label"
          groupIdentifier: "groupIdentifier"
          height: 1.2315135367772556
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          name: "name"
          width: 7.386281948385884
          style:
            key: "style"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          label: "label"
          groupIdentifier: "groupIdentifier"
          height: 1.2315135367772556
        controllerServices:
        - annotationData: "annotationData"
          identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          controllerServiceApis:
          - type: "type"
            bundle:
              artifact: "artifact"
              version: "version"
              group: "group"
          - type: "type"
            bundle:
              artifact: "artifact"
              version: "version"
              group: "group"
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "type"
          propertyDescriptors:
            key:
              displayName: "displayName"
              identifiesControllerService: true
              name: "name"
              sensitive: true
          groupIdentifier: "groupIdentifier"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
          properties:
            key: "properties"
        - annotationData: "annotationData"
          identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          controllerServiceApis:
          - type: "type"
            bundle:
              artifact: "artifact"
              version: "version"
              group: "group"
          - type: "type"
            bundle:
              artifact: "artifact"
              version: "version"
              group: "group"
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "type"
          propertyDescriptors:
            key:
              displayName: "displayName"
              identifiesControllerService: true
              name: "name"
              sensitive: true
          groupIdentifier: "groupIdentifier"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
          properties:
            key: "properties"
        flowFileConcurrency: "flowFileConcurrency"
        processGroups:
        - null
        - null
        flowFileOutboundPolicy: "flowFileOutboundPolicy"
        outputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 9
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "INPUT_PORT"
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 9
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "INPUT_PORT"
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        name: "name"
        inputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 9
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "INPUT_PORT"
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 9
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          type: "INPUT_PORT"
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        funnels:
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        versionedFlowCoordinates:
          registryUrl: "registryUrl"
          bucketId: "bucketId"
          flowId: "flowId"
          version: 1
          latest: true
        remoteProcessGroups:
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          communicationsTimeout: "communicationsTimeout"
          proxyHost: "proxyHost"
          proxyPort: 1
          transportProtocol: "RAW"
          outputPorts:
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          name: "name"
          targetUri: "targetUri"
          proxyUser: "proxyUser"
          targetUris: "targetUris"
          inputPorts:
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          yieldDuration: "yieldDuration"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          localNetworkInterface: "localNetworkInterface"
        - identifier: "identifier"
          componentType: "CONNECTION"
          comments: "comments"
          communicationsTimeout: "communicationsTimeout"
          proxyHost: "proxyHost"
          proxyPort: 1
          transportProtocol: "RAW"
          outputPorts:
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          name: "name"
          targetUri: "targetUri"
          proxyUser: "proxyUser"
          targetUris: "targetUris"
          inputPorts:
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          - identifier: "identifier"
            componentType: "CONNECTION"
            remoteGroupId: "remoteGroupId"
            comments: "comments"
            targetId: "targetId"
            concurrentlySchedulableTaskCount: 5
            name: "name"
            position:
              x: 0.8008281904610115
              y: 6.027456183070403
            useCompression: true
            batchSize:
              duration: "duration"
              size: "size"
              count: 5
            groupIdentifier: "groupIdentifier"
            scheduledState: "ENABLED"
          yieldDuration: "yieldDuration"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          localNetworkInterface: "localNetworkInterface"
        groupIdentifier: "groupIdentifier"
        connections:
        - identifier: "identifier"
          componentType: "CONNECTION"
          prioritizers:
          - "prioritizers"
          - "prioritizers"
          comments: "comments"
          flowFileExpiration: "flowFileExpiration"
          selectedRelationships:
          - "selectedRelationships"
          - "selectedRelationships"
          loadBalanceCompression: "DO_NOT_COMPRESS"
          destination:
            comments: "comments"
            groupId: "groupId"
            name: "name"
            id: "id"
            type: "PROCESSOR"
          backPressureDataSizeThreshold: "backPressureDataSizeThreshold"
          loadBalanceStrategy: "DO_NOT_LOAD_BALANCE"
          source:
            comments: "comments"
            groupId: "groupId"
            name: "name"
            id: "id"
            type: "PROCESSOR"
          labelIndex: 3
          bends:
          - x: 0.8008281904610115
            y: 6.027456183070403
          - x: 0.8008281904610115
            y: 6.027456183070403
          backPressureObjectThreshold: 4
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          partitioningAttribute: "partitioningAttribute"
          zIndex: 2
        - identifier: "identifier"
          componentType: "CONNECTION"
          prioritizers:
          - "prioritizers"
          - "prioritizers"
          comments: "comments"
          flowFileExpiration: "flowFileExpiration"
          selectedRelationships:
          - "selectedRelationships"
          - "selectedRelationships"
          loadBalanceCompression: "DO_NOT_COMPRESS"
          destination:
            comments: "comments"
            groupId: "groupId"
            name: "name"
            id: "id"
            type: "PROCESSOR"
          backPressureDataSizeThreshold: "backPressureDataSizeThreshold"
          loadBalanceStrategy: "DO_NOT_LOAD_BALANCE"
          source:
            comments: "comments"
            groupId: "groupId"
            name: "name"
            id: "id"
            type: "PROCESSOR"
          labelIndex: 3
          bends:
          - x: 0.8008281904610115
            y: 6.027456183070403
          - x: 0.8008281904610115
            y: 6.027456183070403
          backPressureObjectThreshold: 4
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          groupIdentifier: "groupIdentifier"
          partitioningAttribute: "partitioningAttribute"
          zIndex: 2
        parameterContextName: "parameterContextName"
      flowEncodingVersion: "flowEncodingVersion"
      flow:
        versionCount: 0
        identifier: "identifier"
        bucketName: "bucketName"
        permissions:
          canRead: true
          canWrite: true
          canDelete: true
        createdTimestamp: 1
        link:
          href: "http://example.com/aeiou"
          params:
            key: "params"
        name: "name"
        description: "description"
        modifiedTimestamp: 1
        bucketIdentifier: "bucketIdentifier"
        type: "Flow"
        revision:
          clientId: "clientId"
          lastModifier: "lastModifier"
          version: 6
      parameterContexts:
        key:
          name: "name"
          description: "description"
          parameters:
          - name: "name"
            description: "description"
            sensitive: true
            value: "value"
          - name: "name"
            description: "description"
            sensitive: true
            value: "value"
      latest: true
  VersionedFlowSnapshotMetadata:
    type: "object"
    required:
    - "bucketIdentifier"
    - "flowIdentifier"
    - "version"
    properties:
      link:
        description: "An WebLink to this entity."
        readOnly: true
        $ref: "#/definitions/JaxbLink"
      bucketIdentifier:
        type: "string"
        description: "The identifier of the bucket this snapshot belongs to."
      flowIdentifier:
        type: "string"
        description: "The identifier of the flow this snapshot belongs to."
      version:
        type: "integer"
        format: "int32"
        description: "The version of this snapshot of the flow."
        minimum: -1
      timestamp:
        type: "integer"
        format: "int64"
        description: "The timestamp when the flow was saved, as milliseconds since\
          \ epoch."
        readOnly: true
        minimum: 1
      author:
        type: "string"
        description: "The user that created this snapshot of the flow."
        readOnly: true
      comments:
        type: "string"
        description: "The comments provided by the user when creating the snapshot."
    example:
      flowIdentifier: "flowIdentifier"
      comments: "comments"
      author: "author"
      link:
        href: "http://example.com/aeiou"
        params:
          key: "params"
      bucketIdentifier: "bucketIdentifier"
      version: 0
      timestamp: 1
  VersionedFunnel:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      name: "name"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      groupIdentifier: "groupIdentifier"
  VersionedLabel:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      label:
        type: "string"
        description: "The text that appears in the label."
      width:
        type: "number"
        format: "double"
        description: "The width of the label in pixels when at a 1:1 scale."
      height:
        type: "number"
        format: "double"
        description: "The height of the label in pixels when at a 1:1 scale."
      style:
        type: "object"
        description: "The styles for this label (font-size : 12px, background-color\
          \ : #eee, etc)."
        additionalProperties:
          type: "string"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      name: "name"
      width: 7.386281948385884
      style:
        key: "style"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      label: "label"
      groupIdentifier: "groupIdentifier"
      height: 1.2315135367772556
  VersionedParameter:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the parameter"
      description:
        type: "string"
        description: "The description of the param"
      sensitive:
        type: "boolean"
        description: "Whether or not the parameter value is sensitive"
      value:
        type: "string"
        description: "The value of the parameter"
    example:
      name: "name"
      description: "description"
      sensitive: true
      value: "value"
  VersionedParameterContext:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the context"
      description:
        type: "string"
        description: "The description of the parameter context"
      parameters:
        type: "array"
        description: "The parameters in the context"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedParameter"
    example:
      name: "name"
      description: "description"
      parameters:
      - name: "name"
        description: "description"
        sensitive: true
        value: "value"
      - name: "name"
        description: "description"
        sensitive: true
        value: "value"
  VersionedPort:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      type:
        type: "string"
        description: "The type of port."
        enum:
        - "INPUT_PORT"
        - "OUTPUT_PORT"
      concurrentlySchedulableTaskCount:
        type: "integer"
        format: "int32"
        description: "The number of tasks that should be concurrently scheduled for\
          \ the port."
      scheduledState:
        type: "string"
        description: "The scheduled state of the component"
        enum:
        - "ENABLED"
        - "DISABLED"
      allowRemoteAccess:
        type: "boolean"
        description: "Whether or not this port allows remote access for site-to-site"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      allowRemoteAccess: true
      concurrentlySchedulableTaskCount: 9
      name: "name"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      type: "INPUT_PORT"
      groupIdentifier: "groupIdentifier"
      scheduledState: "ENABLED"
  VersionedProcessGroup:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      processGroups:
        type: "array"
        description: "The child Process Groups"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedProcessGroup"
      remoteProcessGroups:
        type: "array"
        description: "The Remote Process Groups"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedRemoteProcessGroup"
      processors:
        type: "array"
        description: "The Processors"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedProcessor"
      inputPorts:
        type: "array"
        description: "The Input Ports"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedPort"
      outputPorts:
        type: "array"
        description: "The Output Ports"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedPort"
      connections:
        type: "array"
        description: "The Connections"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedConnection"
      labels:
        type: "array"
        description: "The Labels"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedLabel"
      funnels:
        type: "array"
        description: "The Funnels"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedFunnel"
      controllerServices:
        type: "array"
        description: "The Controller Services"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedControllerService"
      versionedFlowCoordinates:
        description: "The coordinates where the remote flow is stored, or null if\
          \ the Process Group is not directly under Version Control"
        $ref: "#/definitions/VersionedFlowCoordinates"
      variables:
        type: "object"
        description: "The Variables in the Variable Registry for this Process Group\
          \ (not including any ancestor or descendant Process Groups)"
        additionalProperties:
          type: "string"
      parameterContextName:
        type: "string"
        description: "The name of the parameter context used by this process group"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      flowFileConcurrency:
        type: "string"
        description: "The configured FlowFile Concurrency for the Process Group"
      flowFileOutboundPolicy:
        type: "string"
        description: "The FlowFile Outbound Policy for the Process Group"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      variables:
        key: "variables"
      comments: "comments"
      processors:
      - annotationData: "annotationData"
        identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        concurrentlySchedulableTaskCount: 7
        autoTerminatedRelationships:
        - "autoTerminatedRelationships"
        - "autoTerminatedRelationships"
        bulletinLevel: "bulletinLevel"
        executionNode: "executionNode"
        penaltyDuration: "penaltyDuration"
        runDurationMillis: 2
        type: "type"
        propertyDescriptors:
          key:
            displayName: "displayName"
            identifiesControllerService: true
            name: "name"
            sensitive: true
        scheduledState: "ENABLED"
        schedulingStrategy: "schedulingStrategy"
        name: "name"
        style:
          key: "style"
        schedulingPeriod: "schedulingPeriod"
        yieldDuration: "yieldDuration"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
        properties:
          key: "properties"
      - annotationData: "annotationData"
        identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        concurrentlySchedulableTaskCount: 7
        autoTerminatedRelationships:
        - "autoTerminatedRelationships"
        - "autoTerminatedRelationships"
        bulletinLevel: "bulletinLevel"
        executionNode: "executionNode"
        penaltyDuration: "penaltyDuration"
        runDurationMillis: 2
        type: "type"
        propertyDescriptors:
          key:
            displayName: "displayName"
            identifiesControllerService: true
            name: "name"
            sensitive: true
        scheduledState: "ENABLED"
        schedulingStrategy: "schedulingStrategy"
        name: "name"
        style:
          key: "style"
        schedulingPeriod: "schedulingPeriod"
        yieldDuration: "yieldDuration"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
        properties:
          key: "properties"
      labels:
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        name: "name"
        width: 7.386281948385884
        style:
          key: "style"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        label: "label"
        groupIdentifier: "groupIdentifier"
        height: 1.2315135367772556
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        name: "name"
        width: 7.386281948385884
        style:
          key: "style"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        label: "label"
        groupIdentifier: "groupIdentifier"
        height: 1.2315135367772556
      controllerServices:
      - annotationData: "annotationData"
        identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        controllerServiceApis:
        - type: "type"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
        - type: "type"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "type"
        propertyDescriptors:
          key:
            displayName: "displayName"
            identifiesControllerService: true
            name: "name"
            sensitive: true
        groupIdentifier: "groupIdentifier"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
        properties:
          key: "properties"
      - annotationData: "annotationData"
        identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        controllerServiceApis:
        - type: "type"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
        - type: "type"
          bundle:
            artifact: "artifact"
            version: "version"
            group: "group"
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "type"
        propertyDescriptors:
          key:
            displayName: "displayName"
            identifiesControllerService: true
            name: "name"
            sensitive: true
        groupIdentifier: "groupIdentifier"
        bundle:
          artifact: "artifact"
          version: "version"
          group: "group"
        properties:
          key: "properties"
      flowFileConcurrency: "flowFileConcurrency"
      processGroups:
      - null
      - null
      flowFileOutboundPolicy: "flowFileOutboundPolicy"
      outputPorts:
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        allowRemoteAccess: true
        concurrentlySchedulableTaskCount: 9
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "INPUT_PORT"
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        allowRemoteAccess: true
        concurrentlySchedulableTaskCount: 9
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "INPUT_PORT"
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      name: "name"
      inputPorts:
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        allowRemoteAccess: true
        concurrentlySchedulableTaskCount: 9
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "INPUT_PORT"
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        allowRemoteAccess: true
        concurrentlySchedulableTaskCount: 9
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        type: "INPUT_PORT"
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      funnels:
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      versionedFlowCoordinates:
        registryUrl: "registryUrl"
        bucketId: "bucketId"
        flowId: "flowId"
        version: 1
        latest: true
      remoteProcessGroups:
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        communicationsTimeout: "communicationsTimeout"
        proxyHost: "proxyHost"
        proxyPort: 1
        transportProtocol: "RAW"
        outputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        name: "name"
        targetUri: "targetUri"
        proxyUser: "proxyUser"
        targetUris: "targetUris"
        inputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        yieldDuration: "yieldDuration"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        localNetworkInterface: "localNetworkInterface"
      - identifier: "identifier"
        componentType: "CONNECTION"
        comments: "comments"
        communicationsTimeout: "communicationsTimeout"
        proxyHost: "proxyHost"
        proxyPort: 1
        transportProtocol: "RAW"
        outputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        name: "name"
        targetUri: "targetUri"
        proxyUser: "proxyUser"
        targetUris: "targetUris"
        inputPorts:
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        - identifier: "identifier"
          componentType: "CONNECTION"
          remoteGroupId: "remoteGroupId"
          comments: "comments"
          targetId: "targetId"
          concurrentlySchedulableTaskCount: 5
          name: "name"
          position:
            x: 0.8008281904610115
            y: 6.027456183070403
          useCompression: true
          batchSize:
            duration: "duration"
            size: "size"
            count: 5
          groupIdentifier: "groupIdentifier"
          scheduledState: "ENABLED"
        yieldDuration: "yieldDuration"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        localNetworkInterface: "localNetworkInterface"
      groupIdentifier: "groupIdentifier"
      connections:
      - identifier: "identifier"
        componentType: "CONNECTION"
        prioritizers:
        - "prioritizers"
        - "prioritizers"
        comments: "comments"
        flowFileExpiration: "flowFileExpiration"
        selectedRelationships:
        - "selectedRelationships"
        - "selectedRelationships"
        loadBalanceCompression: "DO_NOT_COMPRESS"
        destination:
          comments: "comments"
          groupId: "groupId"
          name: "name"
          id: "id"
          type: "PROCESSOR"
        backPressureDataSizeThreshold: "backPressureDataSizeThreshold"
        loadBalanceStrategy: "DO_NOT_LOAD_BALANCE"
        source:
          comments: "comments"
          groupId: "groupId"
          name: "name"
          id: "id"
          type: "PROCESSOR"
        labelIndex: 3
        bends:
        - x: 0.8008281904610115
          y: 6.027456183070403
        - x: 0.8008281904610115
          y: 6.027456183070403
        backPressureObjectThreshold: 4
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        partitioningAttribute: "partitioningAttribute"
        zIndex: 2
      - identifier: "identifier"
        componentType: "CONNECTION"
        prioritizers:
        - "prioritizers"
        - "prioritizers"
        comments: "comments"
        flowFileExpiration: "flowFileExpiration"
        selectedRelationships:
        - "selectedRelationships"
        - "selectedRelationships"
        loadBalanceCompression: "DO_NOT_COMPRESS"
        destination:
          comments: "comments"
          groupId: "groupId"
          name: "name"
          id: "id"
          type: "PROCESSOR"
        backPressureDataSizeThreshold: "backPressureDataSizeThreshold"
        loadBalanceStrategy: "DO_NOT_LOAD_BALANCE"
        source:
          comments: "comments"
          groupId: "groupId"
          name: "name"
          id: "id"
          type: "PROCESSOR"
        labelIndex: 3
        bends:
        - x: 0.8008281904610115
          y: 6.027456183070403
        - x: 0.8008281904610115
          y: 6.027456183070403
        backPressureObjectThreshold: 4
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        groupIdentifier: "groupIdentifier"
        partitioningAttribute: "partitioningAttribute"
        zIndex: 2
      parameterContextName: "parameterContextName"
  VersionedProcessor:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      bundle:
        description: "Information about the bundle from which the component came"
        $ref: "#/definitions/Bundle"
      style:
        type: "object"
        description: "Stylistic data for rendering in a UI"
        additionalProperties:
          type: "string"
      type:
        type: "string"
        description: "The type of Processor"
      properties:
        type: "object"
        description: "The properties for the processor. Properties whose value is\
          \ not set will only contain the property name."
        additionalProperties:
          type: "string"
      propertyDescriptors:
        type: "object"
        description: "The property descriptors for the processor."
        additionalProperties:
          $ref: "#/definitions/VersionedPropertyDescriptor"
      annotationData:
        type: "string"
        description: "The annotation data for the processor used to relay configuration\
          \ between a custom UI and the procesosr."
      schedulingPeriod:
        type: "string"
        description: "The frequency with which to schedule the processor. The format\
          \ of the value will depend on th value of schedulingStrategy."
      schedulingStrategy:
        type: "string"
        description: "Indcates whether the prcessor should be scheduled to run in\
          \ event or timer driven mode."
      executionNode:
        type: "string"
        description: "Indicates the node where the process will execute."
      penaltyDuration:
        type: "string"
        description: "The amout of time that is used when the process penalizes a\
          \ flowfile."
      yieldDuration:
        type: "string"
        description: "The amount of time that must elapse before this processor is\
          \ scheduled again after yielding."
      bulletinLevel:
        type: "string"
        description: "The level at which the processor will report bulletins."
      runDurationMillis:
        type: "integer"
        format: "int64"
        description: "The run duration for the processor in milliseconds."
      concurrentlySchedulableTaskCount:
        type: "integer"
        format: "int32"
        description: "The number of tasks that should be concurrently schedule for\
          \ the processor. If the processor doesn't allow parallol processing then\
          \ any positive input will be ignored."
      autoTerminatedRelationships:
        type: "array"
        description: "The names of all relationships that cause a flow file to be\
          \ terminated if the relationship is not connected elsewhere. This property\
          \ differs from the 'isAutoTerminate' property of the RelationshipDTO in\
          \ that the RelationshipDTO is meant to depict the current configuration,\
          \ whereas this property can be set in a DTO when updating a Processor in\
          \ order to change which Relationships should be auto-terminated."
        uniqueItems: true
        items:
          type: "string"
      scheduledState:
        type: "string"
        description: "The scheduled state of the component"
        enum:
        - "ENABLED"
        - "DISABLED"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      annotationData: "annotationData"
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      concurrentlySchedulableTaskCount: 7
      autoTerminatedRelationships:
      - "autoTerminatedRelationships"
      - "autoTerminatedRelationships"
      bulletinLevel: "bulletinLevel"
      executionNode: "executionNode"
      penaltyDuration: "penaltyDuration"
      runDurationMillis: 2
      type: "type"
      propertyDescriptors:
        key:
          displayName: "displayName"
          identifiesControllerService: true
          name: "name"
          sensitive: true
      scheduledState: "ENABLED"
      schedulingStrategy: "schedulingStrategy"
      name: "name"
      style:
        key: "style"
      schedulingPeriod: "schedulingPeriod"
      yieldDuration: "yieldDuration"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      groupIdentifier: "groupIdentifier"
      bundle:
        artifact: "artifact"
        version: "version"
        group: "group"
      properties:
        key: "properties"
  VersionedPropertyDescriptor:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of the property"
      displayName:
        type: "string"
        description: "The display name of the property"
      identifiesControllerService:
        type: "boolean"
        description: "Whether or not the property provides the identifier of a Controller\
          \ Service"
      sensitive:
        type: "boolean"
        description: "Whether or not the property is considered sensitive"
    example:
      displayName: "displayName"
      identifiesControllerService: true
      name: "name"
      sensitive: true
  VersionedRemoteGroupPort:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      remoteGroupId:
        type: "string"
        description: "The id of the remote process group that the port resides in."
      concurrentlySchedulableTaskCount:
        type: "integer"
        format: "int32"
        description: "The number of task that may transmit flowfiles to the target\
          \ port concurrently."
      useCompression:
        type: "boolean"
        description: "Whether the flowfiles are compressed when sent to the target\
          \ port."
      batchSize:
        description: "The batch settings for data transmission."
        $ref: "#/definitions/BatchSize"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      targetId:
        type: "string"
        description: "The ID of the port on the target NiFi instance"
      scheduledState:
        type: "string"
        description: "The scheduled state of the component"
        enum:
        - "ENABLED"
        - "DISABLED"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      remoteGroupId: "remoteGroupId"
      comments: "comments"
      targetId: "targetId"
      concurrentlySchedulableTaskCount: 5
      name: "name"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      useCompression: true
      batchSize:
        duration: "duration"
        size: "size"
        count: 5
      groupIdentifier: "groupIdentifier"
      scheduledState: "ENABLED"
  VersionedRemoteProcessGroup:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The component's unique identifier"
      name:
        type: "string"
        description: "The component's name"
      comments:
        type: "string"
        description: "The user-supplied comments for the component"
      position:
        description: "The component's position on the graph"
        $ref: "#/definitions/Position"
      targetUri:
        type: "string"
        description: "[DEPRECATED] The target URI of the remote process group. If\
          \ target uri is not set, but uris are set, then returns the first uri in\
          \ the uris. If neither target uri nor uris are set, then returns null."
      targetUris:
        type: "string"
        description: "The target URIs of the remote process group. If target uris\
          \ is not set but target uri is set, then returns the single target uri.\
          \ If neither target uris nor target uri is set, then returns null."
      communicationsTimeout:
        type: "string"
        description: "The time period used for the timeout when communicating with\
          \ the target."
      yieldDuration:
        type: "string"
        description: "When yielding, this amount of time must elapse before the remote\
          \ process group is scheduled again."
      transportProtocol:
        type: "string"
        description: "The Transport Protocol that is used for Site-to-Site communications"
        enum:
        - "RAW"
        - "HTTP"
      localNetworkInterface:
        type: "string"
        description: "The local network interface to send/receive data. If not specified,\
          \ any local address is used. If clustered, all nodes must have an interface\
          \ with this identifier."
      proxyHost:
        type: "string"
      proxyPort:
        type: "integer"
        format: "int32"
      proxyUser:
        type: "string"
      inputPorts:
        type: "array"
        description: "A Set of Input Ports that can be connected to, in order to send\
          \ data to the remote NiFi instance"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedRemoteGroupPort"
      outputPorts:
        type: "array"
        description: "A Set of Output Ports that can be connected to, in order to\
          \ pull data from the remote NiFi instance"
        uniqueItems: true
        items:
          $ref: "#/definitions/VersionedRemoteGroupPort"
      componentType:
        type: "string"
        enum:
        - "CONNECTION"
        - "PROCESSOR"
        - "PROCESS_GROUP"
        - "REMOTE_PROCESS_GROUP"
        - "INPUT_PORT"
        - "OUTPUT_PORT"
        - "REMOTE_INPUT_PORT"
        - "REMOTE_OUTPUT_PORT"
        - "FUNNEL"
        - "LABEL"
        - "CONTROLLER_SERVICE"
      groupIdentifier:
        type: "string"
        description: "The ID of the Process Group that this component belongs to"
    example:
      identifier: "identifier"
      componentType: "CONNECTION"
      comments: "comments"
      communicationsTimeout: "communicationsTimeout"
      proxyHost: "proxyHost"
      proxyPort: 1
      transportProtocol: "RAW"
      outputPorts:
      - identifier: "identifier"
        componentType: "CONNECTION"
        remoteGroupId: "remoteGroupId"
        comments: "comments"
        targetId: "targetId"
        concurrentlySchedulableTaskCount: 5
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        useCompression: true
        batchSize:
          duration: "duration"
          size: "size"
          count: 5
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      - identifier: "identifier"
        componentType: "CONNECTION"
        remoteGroupId: "remoteGroupId"
        comments: "comments"
        targetId: "targetId"
        concurrentlySchedulableTaskCount: 5
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        useCompression: true
        batchSize:
          duration: "duration"
          size: "size"
          count: 5
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      name: "name"
      targetUri: "targetUri"
      proxyUser: "proxyUser"
      targetUris: "targetUris"
      inputPorts:
      - identifier: "identifier"
        componentType: "CONNECTION"
        remoteGroupId: "remoteGroupId"
        comments: "comments"
        targetId: "targetId"
        concurrentlySchedulableTaskCount: 5
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        useCompression: true
        batchSize:
          duration: "duration"
          size: "size"
          count: 5
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      - identifier: "identifier"
        componentType: "CONNECTION"
        remoteGroupId: "remoteGroupId"
        comments: "comments"
        targetId: "targetId"
        concurrentlySchedulableTaskCount: 5
        name: "name"
        position:
          x: 0.8008281904610115
          y: 6.027456183070403
        useCompression: true
        batchSize:
          duration: "duration"
          size: "size"
          count: 5
        groupIdentifier: "groupIdentifier"
        scheduledState: "ENABLED"
      yieldDuration: "yieldDuration"
      position:
        x: 0.8008281904610115
        y: 6.027456183070403
      groupIdentifier: "groupIdentifier"
      localNetworkInterface: "localNetworkInterface"
