openapi: 3.0.1
info:
  title: Apache NiFi Registry REST API
  description: REST API definition for Apache NiFi Registry web services
  contact:
    url: https://nifi.apache.org
    email: dev@nifi.apache.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.4.0
servers:
- url: /
paths:
  /about:
    get:
      tags:
      - About
      summary: Get version
      description: Gets the NiFi Registry version.
      operationId: getVersion
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryAbout'
  /access:
    get:
      tags:
      - Access
      summary: Get access status
      description: Returns the current client's authenticated identity and permissions
        to top-level resources
      operationId: getAccessStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry might be running
            unsecured.
  /access/logout:
    delete:
      tags:
      - Access
      summary: Performs a logout for other providers that have been issued a JWT.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: logout
      responses:
        "200":
          description: User was logged out successfully.
        "401":
          description: Authentication token provided was empty or not in the correct
            JWT format.
        "500":
          description: Client failed to log out.
  /access/logout/complete:
    get:
      tags:
      - Access
      summary: Completes the logout sequence.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: logoutComplete
      responses:
        "200":
          description: User was logged out successfully.
        "401":
          description: Authentication token provided was empty or not in the correct
            JWT format.
        "500":
          description: Client failed to log out.
  /access/oidc/callback:
    get:
      tags:
      - Access
      summary: Redirect/callback URI for processing the result of the OpenId Connect
        login sequence.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: oidcCallback
      responses:
        "200":
          description: default response
          content:
            '*/*': {}
  /access/oidc/exchange:
    post:
      tags:
      - Access
      summary: Retrieves a JWT following a successful login sequence using the configured
        OpenId Connect provider.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: oidcExchange
      responses:
        "200":
          description: default response
          content:
            text/plain: {}
  /access/oidc/logout:
    get:
      tags:
      - Access
      summary: Performs a logout in the OpenId Provider.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: oidcLogout
      responses:
        "200":
          description: default response
          content:
            '*/*': {}
  /access/oidc/logout/callback:
    get:
      tags:
      - Access
      summary: Redirect/callback URI for processing the result of the OpenId Connect
        logout sequence.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: oidcLogoutCallback
      responses:
        "200":
          description: default response
          content:
            '*/*': {}
  /access/oidc/request:
    get:
      tags:
      - Access
      summary: Initiates a request to authenticate through the configured OpenId Connect
        provider.
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: oidcRequest
      responses:
        "200":
          description: default response
          content:
            '*/*': {}
  /access/token:
    post:
      tags:
      - Access
      summary: Create token trying all providers
      description: "Creates a token for accessing the REST API via auto-detected method\
        \ of verifying client identity claim credentials. The token returned is formatted\
        \ as a JSON Web Token (JWT). The token is base64 encoded and comprised of\
        \ three parts. The header, the body, and the signature. The expiration of\
        \ the token is a contained within the body. The token can be used in the Authorization\
        \ header in the format 'Authorization: Bearer <token>'."
      operationId: createAccessTokenByTryingAllProviders
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login with username/password.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /access/token/identity-provider:
    post:
      tags:
      - Access
      summary: Create token using identity provider
      description: "Creates a token for accessing the REST API via a custom identity\
        \ provider. The user credentials must be passed in a format understood by\
        \ the custom identity provider, e.g., a third-party auth token in an HTTP\
        \ header. The exact format of the user credentials expected by the custom\
        \ identity provider can be discovered by 'GET /access/token/identity-provider/usage'.\
        \ The token returned is formatted as a JSON Web Token (JWT). The token is\
        \ base64 encoded and comprised of three parts. The header, the body, and the\
        \ signature. The expiration of the token is a contained within the body. The\
        \ token can be used in the Authorization header in the format 'Authorization:\
        \ Bearer <token>'."
      operationId: createAccessTokenUsingIdentityProviderCredentials
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login with customized credentials.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /access/token/identity-provider/test:
    post:
      tags:
      - Access
      summary: Test identity provider
      description: Tests the format of the credentials against this identity provider
        without preforming authentication on the credentials to validate them. The
        user credentials should be passed in a format understood by the custom identity
        provider as defined by 'GET /access/token/identity-provider/usage'.
      operationId: testIdentityProviderRecognizesCredentialsFormat
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: The format of the credentials were not recognized by the currently
            configured identity provider.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login with customized credentials.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /access/token/identity-provider/usage:
    get:
      tags:
      - Access
      summary: Get identity provider usage
      description: Provides a description of how the currently configured identity
        provider expects credentials to be passed to POST /access/token/identity-provider
      operationId: getIdentityProviderUsageInstructions
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login with customized credentials.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /access/token/kerberos:
    post:
      tags:
      - Access
      summary: Create token using kerberos
      description: "Creates a token for accessing the REST API via Kerberos Service\
        \ Tickets or SPNEGO Tokens (which includes Kerberos Service Tickets). The\
        \ token returned is formatted as a JSON Web Token (JWT). The token is base64\
        \ encoded and comprised of three parts. The header, the body, and the signature.\
        \ The expiration of the token is a contained within the body. The token can\
        \ be used in the Authorization header in the format 'Authorization: Bearer\
        \ <token>'."
      operationId: createAccessTokenUsingKerberosTicket
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login Kerberos credentials.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /access/token/login:
    post:
      tags:
      - Access
      summary: Create token using basic auth
      description: "Creates a token for accessing the REST API via username/password.\
        \ The user credentials must be passed in standard HTTP Basic Auth format.\
        \ That is: 'Authorization: Basic <credentials>', where <credentials> is the\
        \ base64 encoded value of '<username>:<password>'. The token returned is formatted\
        \ as a JSON Web Token (JWT). The token is base64 encoded and comprised of\
        \ three parts. The header, the body, and the signature. The expiration of\
        \ the token is a contained within the body. The token can be used in the Authorization\
        \ header in the format 'Authorization: Bearer <token>'."
      operationId: createAccessTokenUsingBasicAuthCredentials
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry may not be
            configured to support login with username/password.
        "500":
          description: NiFi Registry was unable to complete the request because an
            unexpected error occurred.
  /buckets:
    get:
      tags:
      - Buckets
      summary: Get all buckets
      description: "The returned list will include only buckets for which the user\
        \ is authorized.If the user is not authorized for any buckets, this returns\
        \ an empty list."
      operationId: getBuckets
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bucket'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
    post:
      tags:
      - Buckets
      summary: Create bucket
      operationId: createBucket
      parameters:
      - name: preserveSourceProperties
        in: query
        description: Whether source properties like identifier should be kept
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: The bucket to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bucket'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
      x-access-policy:
        action: write
        resource: /buckets
  /buckets/fields:
    get:
      tags:
      - Buckets
      summary: Get bucket fields
      description: Retrieves bucket field names for searching or sorting on buckets.
      operationId: getAvailableBucketFields
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
  /buckets/{bucketId}:
    get:
      tags:
      - Buckets
      summary: Get bucket
      description: Gets the bucket with the given id.
      operationId: getBucket
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    put:
      tags:
      - Buckets
      summary: Update bucket
      description: Updates the bucket with the given id.
      operationId: updateBucket
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The updated bucket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bucket'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
    delete:
      tags:
      - Buckets
      summary: Delete bucket
      description: "Deletes the bucket with the given id, along with all objects stored\
        \ in the bucket"
      operationId: deleteBucket
      parameters:
      - name: version
        in: query
        description: The version is used to verify the client is working with the
          latest version of the entity.
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LongParameter'
      - name: clientId
        in: query
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ClientIdParameter'
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bucket'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
      x-access-policy:
        action: delete
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/bundles:
    get:
      tags:
      - BucketBundles
      summary: Get extension bundles by bucket
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getExtensionBundles
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bundle'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/bundles/{bundleType}:
    post:
      tags:
      - BucketBundles
      summary: Create extension bundle version
      description: "Creates a version of an extension bundle by uploading a binary\
        \ artifact. If an extension bundle already exists in the given bucket with\
        \ the same group id and artifact id as that of the bundle being uploaded,\
        \ then it will be added as a new version to the existing bundle. If an extension\
        \ bundle does not already exist in the given bucket with the same group id\
        \ and artifact id, then a new extension bundle will be created and this version\
        \ will be added to the new bundle. Client's may optionally supply a SHA-256\
        \ in hex format through the multi-part form field 'sha256'. If supplied, then\
        \ this value will be compared against the SHA-256 computed by the server,\
        \ and the bundle will be rejected if the values do not match. If not supplied,\
        \ the bundle will be accepted, but will be marked to indicate that the client\
        \ did not supply a SHA-256 during creation. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: createExtensionBundleVersion
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bundleType
        in: path
        description: The type of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - NIFI_NAR
          - MINIFI_CPP
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/bundles_bundleType_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleVersion'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows:
    get:
      tags:
      - BucketFlows
      summary: Get bucket flows
      description: Retrieves all flows in the given bucket.
      operationId: getFlows
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionedFlow'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    post:
      tags:
      - BucketFlows
      summary: Create flow
      description: Creates a flow in the given bucket. The flow id is created by the
        server and populated in the returned entity.
      operationId: createFlow
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The details of the flow to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionedFlow'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlow'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}:
    get:
      tags:
      - BucketFlows
      summary: Get bucket flow
      description: Retrieves the flow with the given id in the given bucket.
      operationId: getFlow
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlow'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    put:
      tags:
      - BucketFlows
      summary: Update bucket flow
      description: Updates the flow with the given id in the given bucket.
      operationId: updateFlow
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The updated flow
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionedFlow'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlow'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
    delete:
      tags:
      - BucketFlows
      summary: Delete bucket flow
      description: "Deletes a flow, including all saved versions of that flow."
      operationId: deleteFlow
      parameters:
      - name: version
        in: query
        description: The version is used to verify the client is working with the
          latest version of the entity.
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LongParameter'
      - name: clientId
        in: query
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ClientIdParameter'
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlow'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: delete
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}:
    get:
      tags:
      - BucketFlows
      summary: Get bucket flow diff
      description: Computes the differences between two given versions of a flow.
      operationId: getFlowDiff
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: versionA
        in: path
        description: The first version number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: versionB
        in: path
        description: The second version number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowDifference'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions:
    get:
      tags:
      - BucketFlows
      summary: Get bucket flow versions
      description: Gets summary information for all versions of a flow. Versions are
        ordered newest->oldest.
      operationId: getFlowVersions
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionedFlowSnapshotMetadata'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    post:
      tags:
      - BucketFlows
      summary: Create flow version
      description: Creates the next version of a flow. The version number of the object
        being created must be the next available version integer. Flow versions are
        immutable after they are created.
      operationId: createFlowVersion
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: preserveSourceProperties
        in: query
        description: Whether source properties like author should be kept
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        description: The new versioned flow snapshot.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VersionedFlowSnapshot'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions/import:
    post:
      tags:
      - BucketFlows
      summary: Import flow version
      description: Import the next version of a flow. The version number of the object
        being created will be the next available version integer. Flow versions are
        immutable after they are created.
      operationId: importVersionedFlow
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Comments
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionedFlowSnapshot'
      responses:
        "201":
          description: The resource has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions/latest:
    get:
      tags:
      - BucketFlows
      summary: Get latest bucket flow version content
      description: "Gets the latest version of a flow, including the metadata and\
        \ content of the flow."
      operationId: getLatestFlowVersion
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions/latest/metadata:
    get:
      tags:
      - BucketFlows
      summary: Get latest bucket flow version metadata
      description: Gets the metadata for the latest version of a flow.
      operationId: getLatestFlowVersionMetadata
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshotMetadata'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}:
    get:
      tags:
      - BucketFlows
      summary: Get bucket flow version
      description: "Gets the given version of a flow, including the metadata and content\
        \ for the version."
      operationId: getFlowVersion
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: versionNumber
        in: path
        description: The version number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}/export:
    get:
      tags:
      - BucketFlows
      summary: Exports specified bucket flow version content
      description: "Exports the specified version of a flow, including the metadata\
        \ and content of the flow."
      operationId: exportVersionedFlow
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: versionNumber
        in: path
        description: The version number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles:
    get:
      tags:
      - Bundles
      summary: Get all bundles
      description: "Gets the metadata for all bundles across all authorized buckets\
        \ with optional filters applied. The returned results will include only items\
        \ from buckets for which the user is authorized. If the user is not authorized\
        \ to any buckets, an empty list will be returned. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: getBundles
      parameters:
      - name: bucketName
        in: query
        description: "Optional bucket name to filter results. The value may be an\
          \ exact match, or a wildcard, such as 'My Bucket%' to select all bundles\
          \ where the bucket name starts with 'My Bucket'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: groupId
        in: query
        description: "Optional groupId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'com.%' to select all bundles where the\
          \ groupId starts with 'com.'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: artifactId
        in: query
        description: "Optional artifactId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'nifi-%' to select all bundles where the\
          \ artifactId starts with 'nifi-'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bundle'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
  /bundles/versions:
    get:
      tags:
      - Bundles
      summary: Get all bundle versions
      description: "Gets the metadata about extension bundle versions across all authorized\
        \ buckets with optional filters applied. If the user is not authorized to\
        \ any buckets, an empty list will be returned. \n\nNOTE: This endpoint is\
        \ subject to change as NiFi Registry and its REST API evolve."
      operationId: getBundleVersions_1
      parameters:
      - name: groupId
        in: query
        description: "Optional groupId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'com.%' to select all bundle versions where\
          \ the groupId starts with 'com.'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: artifactId
        in: query
        description: "Optional artifactId to filter results. The value may be an exact\
          \ match, or a wildcard, such as 'nifi-%' to select all bundle versions where\
          \ the artifactId starts with 'nifi-'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: "Optional version to filter results. The value maye be an exact\
          \ match, or a wildcard, such as '1.0.%' to select all bundle versions where\
          \ the version starts with '1.0.'."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BundleVersionMetadata'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
  /bundles/{bundleId}:
    get:
      tags:
      - Bundles
      summary: Get bundle
      description: "Gets the metadata about an extension bundle. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: getBundle
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    delete:
      tags:
      - Bundles
      summary: Delete bundle
      description: "Deletes the given extension bundle and all of it's versions. \n\
        \nNOTE: This endpoint is subject to change as NiFi Registry and its REST API\
        \ evolve."
      operationId: deleteBundle
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions:
    get:
      tags:
      - Bundles
      summary: Get bundle versions
      description: "Gets the metadata for the versions of the given extension bundle.\
        \ \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST\
        \ API evolve."
      operationId: getBundleVersions
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BundleVersionMetadata'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}:
    get:
      tags:
      - Bundles
      summary: Get bundle version
      description: "Gets the descriptor for the given version of the given extension\
        \ bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and\
        \ its REST API evolve."
      operationId: getBundleVersion
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleVersion'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
    delete:
      tags:
      - Bundles
      summary: Delete bundle version
      description: "Deletes the given extension bundle version and it's associated\
        \ binary content. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: deleteBundleVersion
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleVersion'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}/content:
    get:
      tags:
      - Bundles
      summary: Get bundle version content
      description: "Gets the binary content for the given version of the given extension\
        \ bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and\
        \ its REST API evolve."
      operationId: getBundleVersionContent
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
                x-content-type: application/octet-stream
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}/extensions:
    get:
      tags:
      - Bundles
      summary: Get bundle version extensions
      description: "Gets the metadata about the extensions in the given extension\
        \ bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: getBundleVersionExtensions
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionMetadata'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}/extensions/{name}:
    get:
      tags:
      - Bundles
      summary: Get bundle version extension
      description: "Gets the metadata about the extension with the given name in the\
        \ given extension bundle version. \n\nNOTE: This endpoint is subject to change\
        \ as NiFi Registry and its REST API evolve."
      operationId: getBundleVersionExtension
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Extension'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}/extensions/{name}/docs:
    get:
      tags:
      - Bundles
      summary: Get bundle version extension docs
      description: "Gets the documentation for the given extension in the given extension\
        \ bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: getBundleVersionExtensionDocs
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details:
    get:
      tags:
      - Bundles
      summary: Get bundle version extension docs details
      description: "Gets the additional details documentation for the given extension\
        \ in the given extension bundle version. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: getBundleVersionExtensionAdditionalDetailsDocs
      parameters:
      - name: bundleId
        in: path
        description: The extension bundle identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version of the bundle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /config:
    get:
      tags:
      - Config
      summary: Get configration
      description: Gets the NiFi Registry configurations.
      operationId: getConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryConfiguration'
        "401":
          description: Client could not be authenticated.
      x-access-policy:
        action: read
        resource: "/policies,/tenants"
  /extension-repository:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo buckets
      description: "Gets the names of the buckets the current user is authorized for\
        \ in order to browse the repo by bucket. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: getExtensionRepoBuckets
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionRepoBucket'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
  /extension-repository/{bucketName}:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo groups
      description: "Gets the groups in the extension repository in the given bucket.\
        \ \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST\
        \ API evolve."
      operationId: getExtensionRepoGroups
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionRepoGroup'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo artifacts
      description: "Gets the artifacts in the extension repository in the given bucket\
        \ and group. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: getExtensionRepoArtifacts
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionRepoArtifact'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo versions
      description: "Gets the versions in the extension repository for the given bucket,\
        \ group, and artifact. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: getExtensionRepoVersions
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionRepoVersionSummary'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo version
      description: "Gets information about the version in the given bucket, group,\
        \ and artifact. \n\nNOTE: This endpoint is subject to change as NiFi Registry\
        \ and its REST API evolve."
      operationId: getExtensionRepoVersion
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionRepoVersion'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo version content
      description: "Gets the binary content of the bundle with the given bucket, group,\
        \ artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: getExtensionRepoVersionContent
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
                x-content-type: application/octet-stream
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo extensions
      description: "Gets information about the extensions in the given bucket, group,\
        \ artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi\
        \ Registry and its REST API evolve."
      operationId: getExtensionRepoVersionExtensions
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionMetadata'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo extension
      description: "Gets information about the extension with the given name in the\
        \ given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject\
        \ to change as NiFi Registry and its REST API evolve."
      operationId: getExtensionRepoVersionExtension
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo extension docs
      description: "Gets the documentation for the extension with the given name in\
        \ the given bucket, group, artifact, and version. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: getExtensionRepoVersionExtensionDocs
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs/additional-details:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo extension details
      description: "Gets the additional details documentation for the extension with\
        \ the given name in the given bucket, group, artifact, and version. \n\nNOTE:\
        \ This endpoint is subject to change as NiFi Registry and its REST API evolve."
      operationId: getExtensionRepoVersionExtensionAdditionalDetailsDocs
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        description: The fully qualified name of the extension
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/sha256:
    get:
      tags:
      - ExtensionRepository
      summary: Get extension repo version checksum
      description: |-
        Gets the hex representation of the SHA-256 digest for the binary content of the bundle with the given bucket, group, artifact, and version.

        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getExtensionRepoVersionSha256
      parameters:
      - name: bucketName
        in: path
        description: The bucket name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /extension-repository/{groupId}/{artifactId}/{version}/sha256:
    get:
      tags:
      - ExtensionRepository
      summary: Get global extension repo version checksum
      description: "Gets the hex representation of the SHA-256 digest for the binary\
        \ content with the given bucket, group, artifact, and version. Since the same\
        \ group-artifact-version can exist in multiple buckets, this will return the\
        \ checksum of the first one returned. This will be consistent since the checksum\
        \ must be the same when existing in multiple buckets. \n\nNOTE: This endpoint\
        \ is subject to change as NiFi Registry and its REST API evolve."
      operationId: getGlobalExtensionRepoVersionSha256
      parameters:
      - name: groupId
        in: path
        description: The group identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: artifactId
        in: path
        description: The artifact identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: version
        in: path
        description: The version
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
  /extensions:
    get:
      tags:
      - Extensions
      summary: Get all extensions
      description: |-
        Gets the metadata for all extensions that match the filter params and are part of bundles located in buckets the current user is authorized for. If the user is not authorized to any buckets, an empty result set will be returned.

        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getExtensions
      parameters:
      - name: bundleType
        in: query
        description: The type of bundles to return
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - NIFI_NAR
          - MINIFI_CPP
      - name: extensionType
        in: query
        description: The type of extensions to return
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_PROVIDER
      - name: tag
        in: query
        description: "The tags to filter on, will be used in an OR statement"
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionMetadataContainer'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
  /extensions/provided-service-api:
    get:
      tags:
      - Extensions
      summary: Get extensions providing service API
      description: |-
        Gets the metadata for extensions that provide the specified API and are part of bundles located in buckets the current user is authorized for. If the user is not authorized to any buckets, an empty result set will be returned.

        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getExtensionsProvidingServiceAPI
      parameters:
      - name: className
        in: query
        description: The name of the service API class
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: groupId
        in: query
        description: The groupId of the bundle containing the service API class
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: artifactId
        in: query
        description: The artifactId of the bundle containing the service API class
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        description: The version of the bundle containing the service API class
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionMetadataContainer'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
  /extensions/tags:
    get:
      tags:
      - Extensions
      summary: Get extension tags
      description: |-
        Gets all the extension tags known to this NiFi Registry instance, along with the number of extensions that have the given tag.

        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getTags
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagCount'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
  /flows/fields:
    get:
      tags:
      - Flows
      summary: Get flow fields
      description: Retrieves the flow field names that can be used for searching or
        sorting on flows.
      operationId: getAvailableFlowFields
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
  /flows/{flowId}:
    get:
      tags:
      - Flows
      summary: Get flow
      description: Gets a flow by id.
      operationId: getFlow_1
      parameters:
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlow'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /flows/{flowId}/versions:
    get:
      tags:
      - Flows
      summary: Get flow versions
      description: Gets summary information for all versions of a given flow. Versions
        are ordered newest->oldest.
      operationId: getFlowVersions_1
      parameters:
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionedFlowSnapshotMetadata'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /flows/{flowId}/versions/latest:
    get:
      tags:
      - Flows
      summary: Get latest flow version
      description: "Gets the latest version of a flow, including metadata and flow\
        \ content."
      operationId: getLatestFlowVersion_1
      parameters:
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /flows/{flowId}/versions/latest/metadata:
    get:
      tags:
      - Flows
      summary: Get latest flow version metadata
      description: Gets the metadata for the latest version of a flow.
      operationId: getLatestFlowVersionMetadata_1
      parameters:
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshotMetadata'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /flows/{flowId}/versions/{versionNumber}:
    get:
      tags:
      - Flows
      summary: Get flow version
      description: "Gets the given version of a flow, including metadata and flow\
        \ content."
      operationId: getFlowVersion_1
      parameters:
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: versionNumber
        in: path
        description: The version number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedFlowSnapshot'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /items:
    get:
      tags:
      - Items
      summary: Get all items
      description: "Get items across all buckets. The returned items will include\
        \ only items from buckets for which the user is authorized. If the user is\
        \ not authorized to any buckets, an empty list will be returned."
      operationId: getItems
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BucketItem'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
  /items/fields:
    get:
      tags:
      - Items
      summary: Get item fields
      description: Retrieves the item field names for searching or sorting on bucket
        items.
      operationId: getAvailableBucketItemFields
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
  /items/{bucketId}:
    get:
      tags:
      - Items
      summary: Get bucket items
      description: Gets the items located in the given bucket.
      operationId: getItems_1
      parameters:
      - name: bucketId
        in: path
        description: The bucket identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BucketItem'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
      x-access-policy:
        action: read
        resource: "/buckets/{bucketId}"
  /policies:
    get:
      tags:
      - Policies
      summary: Get all access policies
      operationId: getAccessPolicies
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessPolicy'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /policies
    post:
      tags:
      - Policies
      summary: Create access policy
      operationId: createAccessPolicy
      requestBody:
        description: The access policy configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessPolicy'
        required: true
      responses:
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry might not
            be configured to use a ConfigurableAccessPolicyProvider.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
      x-access-policy:
        action: write
        resource: /policies
  /policies/resources:
    get:
      tags:
      - Policies
      summary: Get available resources
      description: Gets the available resources that support access/authorization
        policies
      operationId: getResources
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
                x-content-type: application/json
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
      x-access-policy:
        action: read
        resource: /policies
  /policies/{action}/{resource}:
    get:
      tags:
      - Policies
      summary: Get access policy for resource
      description: Gets an access policy for the specified action and resource
      operationId: getAccessPolicyForResource
      parameters:
      - name: action
        in: path
        description: The request action.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: resource
        in: path
        description: The resource of the policy.
        required: true
        style: simple
        explode: false
        schema:
          pattern: .+
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /policies
  /policies/{id}:
    get:
      tags:
      - Policies
      summary: Get access policy
      operationId: getAccessPolicy
      parameters:
      - name: id
        in: path
        description: The access policy id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /policies
    put:
      tags:
      - Policies
      summary: Update access policy
      operationId: updateAccessPolicy
      parameters:
      - name: id
        in: path
        description: The access policy id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The access policy configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessPolicy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry might not
            be configured to use a ConfigurableAccessPolicyProvider.
      x-access-policy:
        action: write
        resource: /policies
    delete:
      tags:
      - Policies
      summary: Delete access policy
      operationId: removeAccessPolicy
      parameters:
      - name: version
        in: query
        description: The version is used to verify the client is working with the
          latest version of the entity.
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LongParameter'
      - name: clientId
        in: query
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ClientIdParameter'
      - name: id
        in: path
        description: The access policy id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPolicy'
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid. The NiFi Registry might not
            be configured to use a ConfigurableAccessPolicyProvider.
      x-access-policy:
        action: delete
        resource: /policies
  /tenants/user-groups:
    get:
      tags:
      - Tenants
      summary: Get user groups
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getUserGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /tenants
    post:
      tags:
      - Tenants
      summary: Create user group
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: createUserGroup
      requestBody:
        description: The user group configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: /tenants
  /tenants/user-groups/{id}:
    get:
      tags:
      - Tenants
      summary: Get user group
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getUserGroup
      parameters:
      - name: id
        in: path
        description: The user group id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /tenants
    put:
      tags:
      - Tenants
      summary: Update user group
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: updateUserGroup
      parameters:
      - name: id
        in: path
        description: The user group id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The user group configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroup'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: /tenants
    delete:
      tags:
      - Tenants
      summary: Delete user group
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: removeUserGroup
      parameters:
      - name: version
        in: query
        description: The version is used to verify the client is working with the
          latest version of the entity.
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LongParameter'
      - name: clientId
        in: query
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ClientIdParameter'
      - name: id
        in: path
        description: The user group id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: delete
        resource: /tenants
  /tenants/users:
    get:
      tags:
      - Tenants
      summary: Get all users
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /tenants
    post:
      tags:
      - Tenants
      summary: Create user
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: createUser
      requestBody:
        description: The user configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: /tenants
  /tenants/users/{id}:
    get:
      tags:
      - Tenants
      summary: Get user
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: The user id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: read
        resource: /tenants
    put:
      tags:
      - Tenants
      summary: Update user
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: The user id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The user configuration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: write
        resource: /tenants
    delete:
      tags:
      - Tenants
      summary: Delete user
      description: |2-


        NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
      operationId: removeUser
      parameters:
      - name: version
        in: query
        description: The version is used to verify the client is working with the
          latest version of the entity.
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/LongParameter'
      - name: clientId
        in: query
        description: "If the client id is not specified, new one will be generated.\
          \ This value (whether specified or generated) is included in the response."
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/ClientIdParameter'
      - name: id
        in: path
        description: The user id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: NiFi Registry was unable to complete the request because it
            was invalid. The request should not be retried without modification.
        "401":
          description: Client could not be authenticated.
        "403":
          description: Client is not authorized to make this request.
        "404":
          description: The specified resource could not be found.
        "409":
          description: NiFi Registry was unable to complete the request because it
            assumes a server state that is not valid.
      x-access-policy:
        action: delete
        resource: /tenants
components:
  schemas:
    AccessPolicy:
      type: object
      properties:
        action:
          type: string
          description: The action associated with this access policy.
          enum:
          - read
          - write
          - delete
        configurable:
          type: boolean
          description: "Indicates if this access policy is configurable, based on\
            \ which Authorizer has been configured to manage it."
          readOnly: true
        identifier:
          type: string
          description: The id of the policy. Set by server at creation time.
          readOnly: true
        resource:
          type: string
          description: The resource for this access policy.
        revision:
          $ref: '#/components/schemas/RevisionInfo'
        userGroups:
          uniqueItems: true
          type: array
          description: The set of user group IDs associated with this access policy.
          items:
            $ref: '#/components/schemas/Tenant'
        users:
          uniqueItems: true
          type: array
          description: The set of user IDs associated with this access policy.
          items:
            $ref: '#/components/schemas/Tenant'
      example:
        identifier: identifier
        userGroups:
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        resource: resource
        action: read
        configurable: true
        users:
        - null
        - null
        revision:
          clientId: clientId
          lastModifier: lastModifier
          version: 6
    AccessPolicySummary:
      type: object
      properties:
        action:
          type: string
          description: The action associated with this access policy.
          enum:
          - read
          - write
          - delete
        configurable:
          type: boolean
          description: "Indicates if this access policy is configurable, based on\
            \ which Authorizer has been configured to manage it."
          readOnly: true
        identifier:
          type: string
          description: The id of the policy. Set by server at creation time.
          readOnly: true
        resource:
          type: string
          description: The resource for this access policy.
        revision:
          $ref: '#/components/schemas/RevisionInfo'
      description: The access policies granted to this tenant.
      readOnly: true
      example:
        identifier: identifier
        resource: resource
        action: read
        configurable: true
        revision: null
    AllowableValue:
      type: object
      properties:
        description:
          type: string
          description: The description of the allowable value
        displayName:
          type: string
          description: The display name of the allowable value
        value:
          type: string
          description: The value of the allowable value
      description: The allowable values for this property
      example:
        displayName: displayName
        description: description
        value: value
    Attribute:
      type: object
      properties:
        description:
          type: string
          description: The description of the attribute
        name:
          type: string
          description: The name of the attribute
      description: The attributes written to flow files by the extension
      example:
        name: name
        description: description
    BatchSize:
      type: object
      properties:
        count:
          type: integer
          description: Preferred number of flow files to include in a transaction.
          format: int32
        duration:
          type: string
          description: Preferred amount of time that a transaction should span.
        size:
          type: string
          description: Preferred number of bytes to include in a transaction.
      description: The batch settings for data transmission.
      example:
        duration: duration
        size: size
        count: 1
    Bucket:
      required:
      - identifier
      - name
      type: object
      properties:
        allowBundleRedeploy:
          type: boolean
          description: Indicates if this bucket allows the same version of an extension
            bundle to be redeployed and thus overwrite the existing artifact. By default
            this is false.
        allowPublicRead:
          type: boolean
          description: Indicates if this bucket allows read access to unauthenticated
            anonymous users
        createdTimestamp:
          minimum: 1
          type: integer
          description: The timestamp of when the bucket was first created. This is
            set by the server at creation time.
          format: int64
          readOnly: true
        description:
          type: string
          description: A description of the bucket.
        identifier:
          minLength: 1
          type: string
          description: An ID to uniquely identify this object.
          readOnly: true
        link:
          $ref: '#/components/schemas/Link'
        name:
          minLength: 1
          type: string
          description: The name of the bucket.
        permissions:
          $ref: '#/components/schemas/Permissions'
        revision:
          $ref: '#/components/schemas/RevisionInfo'
      description: The bucket where the flow is located
      readOnly: true
      example:
        identifier: identifier
        allowBundleRedeploy: true
        permissions:
          canRead: true
          canDelete: true
          canWrite: true
        createdTimestamp: 1
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        name: name
        description: description
        allowPublicRead: true
        revision:
          clientId: clientId
          lastModifier: lastModifier
          version: 6
    BucketItem:
      required:
      - bucketIdentifier
      - identifier
      - name
      - type
      type: object
      properties:
        bucketIdentifier:
          minLength: 1
          type: string
          description: The identifier of the bucket this items belongs to. This cannot
            be changed after the item is created.
        bucketName:
          type: string
          description: The name of the bucket this items belongs to.
          readOnly: true
        createdTimestamp:
          minimum: 1
          type: integer
          description: "The timestamp of when the item was created, as milliseconds\
            \ since epoch."
          format: int64
          readOnly: true
        description:
          type: string
          description: A description of the item.
        identifier:
          minLength: 1
          type: string
          description: An ID to uniquely identify this object.
          readOnly: true
        link:
          $ref: '#/components/schemas/Link'
        modifiedTimestamp:
          minimum: 1
          type: integer
          description: "The timestamp of when the item was last modified, as milliseconds\
            \ since epoch."
          format: int64
          readOnly: true
        name:
          minLength: 1
          type: string
          description: The name of the item.
        permissions:
          $ref: '#/components/schemas/Permissions'
        type:
          type: string
          description: The type of item.
          enum:
          - Flow
          - Bundle
      example:
        bucketName: bucketName
        identifier: identifier
        permissions:
          canRead: true
          canDelete: true
          canWrite: true
        createdTimestamp: 1
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        name: name
        description: description
        modifiedTimestamp: 1
        bucketIdentifier: bucketIdentifier
        type: Flow
    BuildInfo:
      type: object
      properties:
        buildBranch:
          type: string
          description: The branch used to build the version of the bundle
        buildFlags:
          type: string
          description: The flags used to build the version of the bundle
        buildRevision:
          type: string
          description: The revision used to build the version of the bundle
        buildTag:
          type: string
          description: The tag used to build the version of the bundle
        buildTool:
          type: string
          description: The tool used to build the version of the bundle
        built:
          type: integer
          description: The timestamp the version of the bundle was built
          format: int64
        builtBy:
          type: string
          description: The identity of the user that performed the build
      description: The build information about this version
      example:
        buildBranch: buildBranch
        builtBy: builtBy
        buildRevision: buildRevision
        buildTag: buildTag
        built: 0
        buildTool: buildTool
        buildFlags: buildFlags
    Bundle:
      type: object
      properties:
        artifact:
          type: string
          description: The artifact of the bundle
        group:
          type: string
          description: The group of the bundle
        version:
          type: string
          description: The version of the bundle
      description: The details of the artifact that bundled this parameter provider.
      example:
        artifact: artifact
        version: version
        group: group
    BundleInfo:
      type: object
      properties:
        artifactId:
          type: string
          description: The artifact id of the bundle
        bucketId:
          type: string
          description: The id of the bucket where the bundle is located
        bucketName:
          type: string
          description: The name of the bucket where the bundle is located
        bundleId:
          type: string
          description: The id of the bundle
        bundleType:
          type: string
          description: The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)
          enum:
          - NIFI_NAR
          - MINIFI_CPP
        groupId:
          type: string
          description: The group id of the bundle
        systemApiVersion:
          type: string
          description: The version of the system API the bundle was built against
        version:
          type: string
          description: The version of the bundle
      description: The information for the bundle where this extension is located
      example:
        bucketName: bucketName
        groupId: groupId
        bundleId: bundleId
        artifactId: artifactId
        bucketId: bucketId
        bundleType: NIFI_NAR
        version: version
        systemApiVersion: systemApiVersion
    BundleVersion:
      required:
      - versionMetadata
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/Bucket'
        bundle:
          $ref: '#/components/schemas/Bundle'
        dependencies:
          uniqueItems: true
          type: array
          description: The set of other bundle versions that this version is dependent
            on
          readOnly: true
          items:
            $ref: '#/components/schemas/BundleVersionDependency'
        filename:
          type: string
        link:
          $ref: '#/components/schemas/Link'
        versionMetadata:
          $ref: '#/components/schemas/BundleVersionMetadata'
      example:
        bucket:
          identifier: identifier
          allowBundleRedeploy: true
          permissions:
            canRead: true
            canDelete: true
            canWrite: true
          createdTimestamp: 1
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          name: name
          description: description
          allowPublicRead: true
          revision:
            clientId: clientId
            lastModifier: lastModifier
            version: 6
        filename: filename
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        versionMetadata:
          sha256: sha256
          buildInfo:
            buildBranch: buildBranch
            builtBy: builtBy
            buildRevision: buildRevision
            buildTag: buildTag
            built: 0
            buildTool: buildTool
            buildFlags: buildFlags
          author: author
          groupId: groupId
          bundleId: bundleId
          link: null
          description: description
          bucketId: bucketId
          version: version
          sha256Supplied: true
          contentSize: 0
          artifactId: artifactId
          id: id
          systemApiVersion: systemApiVersion
          timestamp: 1
        bundle:
          artifact: artifact
          version: version
          group: group
        dependencies:
        - groupId: groupId
          artifactId: artifactId
          version: version
        - groupId: groupId
          artifactId: artifactId
          version: version
    BundleVersionDependency:
      required:
      - artifactId
      - groupId
      - version
      type: object
      properties:
        artifactId:
          minLength: 1
          type: string
          description: The artifact id of the bundle dependency
        groupId:
          minLength: 1
          type: string
          description: The group id of the bundle dependency
        version:
          minLength: 1
          type: string
          description: The version of the bundle dependency
      description: The set of other bundle versions that this version is dependent
        on
      readOnly: true
      example:
        groupId: groupId
        artifactId: artifactId
        version: version
    BundleVersionMetadata:
      required:
      - author
      - bucketId
      - buildInfo
      - bundleId
      - contentSize
      - id
      - sha256
      - sha256Supplied
      - systemApiVersion
      - version
      type: object
      properties:
        artifactId:
          type: string
        author:
          minLength: 1
          type: string
          description: The identity that created this version
        bucketId:
          minLength: 1
          type: string
          description: The id of the bucket the extension bundle belongs to
        buildInfo:
          $ref: '#/components/schemas/BuildInfo'
        bundleId:
          minLength: 1
          type: string
          description: The id of the extension bundle this version is for
        contentSize:
          minimum: 0
          type: integer
          description: The size of the binary content for this version in bytes
          format: int64
        description:
          type: string
          description: The description for this version
        groupId:
          type: string
        id:
          minLength: 1
          type: string
          description: The id of this version of the extension bundle
        link:
          $ref: '#/components/schemas/Link'
        sha256:
          minLength: 1
          type: string
          description: The hex representation of the SHA-256 digest of the binary
            content for this version
        sha256Supplied:
          type: boolean
          description: Whether or not the client supplied a SHA-256 when uploading
            the bundle
        systemApiVersion:
          minLength: 1
          type: string
          description: The version of the system API that this bundle version was
            built against
        timestamp:
          minimum: 1
          type: integer
          description: The timestamp of the create date of this version
          format: int64
        version:
          minLength: 1
          type: string
          description: The version of the extension bundle
      example:
        sha256: sha256
        buildInfo:
          buildBranch: buildBranch
          builtBy: builtBy
          buildRevision: buildRevision
          buildTag: buildTag
          built: 0
          buildTool: buildTool
          buildFlags: buildFlags
        author: author
        groupId: groupId
        bundleId: bundleId
        link: null
        description: description
        bucketId: bucketId
        version: version
        sha256Supplied: true
        contentSize: 0
        artifactId: artifactId
        id: id
        systemApiVersion: systemApiVersion
        timestamp: 1
    ClientIdParameter:
      type: object
      properties:
        clientId:
          type: string
    ComponentDifference:
      type: object
      properties:
        changeDescription:
          type: string
          description: The description of the change.
        differenceType:
          type: string
          description: The key to the difference.
        differenceTypeDescription:
          type: string
          description: The description of the change type.
        valueA:
          type: string
          description: The earlier value from the difference.
        valueB:
          type: string
          description: The newer value from the difference.
      description: The list of changes related to this component between the 2 versions.
      example:
        differenceType: differenceType
        differenceTypeDescription: differenceTypeDescription
        changeDescription: changeDescription
        valueB: valueB
        valueA: valueA
    ComponentDifferenceGroup:
      type: object
      properties:
        componentId:
          type: string
          description: The id of the component whose changes are grouped together.
        componentName:
          type: string
          description: The name of the component whose changes are grouped together.
        componentType:
          type: string
          description: The type of component these changes relate to.
        differences:
          uniqueItems: true
          type: array
          description: The list of changes related to this component between the 2
            versions.
          items:
            $ref: '#/components/schemas/ComponentDifference'
        processGroupId:
          type: string
          description: The process group id for this component.
      example:
        componentType: componentType
        componentId: componentId
        processGroupId: processGroupId
        differences:
        - differenceType: differenceType
          differenceTypeDescription: differenceTypeDescription
          changeDescription: changeDescription
          valueB: valueB
          valueA: valueA
        - differenceType: differenceType
          differenceTypeDescription: differenceTypeDescription
          changeDescription: changeDescription
          valueB: valueB
          valueA: valueA
        componentName: componentName
    ConnectableComponent:
      type: object
      properties:
        comments:
          type: string
          description: The comments for the connectable component.
        groupId:
          type: string
          description: The id of the group that the connectable component resides
            in
        id:
          type: string
          description: The id of the connectable component.
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The name of the connectable component
        type:
          type: string
          description: The type of component the connectable is.
          enum:
          - PROCESSOR
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - INPUT_PORT
          - OUTPUT_PORT
          - FUNNEL
      description: The destination of the connection.
      example:
        comments: comments
        groupId: groupId
        name: name
        instanceIdentifier: instanceIdentifier
        id: id
        type: PROCESSOR
    ControllerServiceAPI:
      type: object
      properties:
        bundle:
          $ref: '#/components/schemas/Bundle'
        type:
          type: string
          description: The fully qualified name of the service interface.
      description: Lists the APIs this Controller Service implements.
      example:
        type: type
        bundle: null
    ControllerServiceDefinition:
      type: object
      properties:
        artifactId:
          type: string
          description: The artifact id of the service API
        className:
          type: string
          description: The class name of the service API
        groupId:
          type: string
          description: The group id of the service API
        version:
          type: string
          description: The version of the service API
      description: "The controller service required by this property, or null if none\
        \ is required"
      example:
        groupId: groupId
        artifactId: artifactId
        className: className
        version: version
    CurrentUser:
      type: object
      properties:
        anonymous:
          type: boolean
          description: Indicates if the current user is anonymous
          readOnly: true
        identity:
          type: string
          description: The identity of the current user
          readOnly: true
        loginSupported:
          type: boolean
          description: Indicates if the NiFi Registry instance supports logging in
        oidcloginSupported:
          type: boolean
          description: Indicates if the NiFi Registry instance supports logging in
            with an OIDC provider
        resourcePermissions:
          $ref: '#/components/schemas/ResourcePermissions'
      example:
        oidcloginSupported: true
        resourcePermissions:
          proxy: null
          tenants: null
          buckets: null
          policies: null
          anyTopLevelResource:
            canRead: true
            canDelete: true
            canWrite: true
        identity: identity
        anonymous: true
        loginSupported: true
    DefaultSchedule:
      type: object
      properties:
        concurrentTasks:
          type: string
          description: The default concurrent tasks
        period:
          type: string
          description: The default scheduling period
        strategy:
          type: string
          description: The default scheduling strategy
      description: The default schedule for a processor reporting task
      example:
        period: period
        concurrentTasks: concurrentTasks
        strategy: strategy
    DefaultSettings:
      type: object
      properties:
        bulletinLevel:
          type: string
          description: The default bulletin level
        penaltyDuration:
          type: string
          description: The default penalty duration
        yieldDuration:
          type: string
          description: The default yield duration
      description: The default settings for a processor
      example:
        bulletinLevel: bulletinLevel
        penaltyDuration: penaltyDuration
        yieldDuration: yieldDuration
    Dependency:
      type: object
      properties:
        dependentValues:
          $ref: '#/components/schemas/DependentValues'
        propertyDisplayName:
          type: string
          description: The display name of the dependent property
        propertyName:
          type: string
          description: The name of the dependent property
      description: The properties that this property depends on
      example:
        propertyDisplayName: propertyDisplayName
        dependentValues:
          values:
          - values
          - values
        propertyName: propertyName
    DependentValues:
      type: object
      properties:
        values:
          type: array
          description: The dependent values
          xml:
            name: dependentValue
          items:
            type: string
            description: The dependent values
            xml:
              name: dependentValue
      description: The values of the dependent property that enable the depending
        property
      example:
        values:
        - values
        - values
    DeprecationNotice:
      type: object
      properties:
        alternatives:
          type: array
          description: The alternatives to use
          xml:
            wrapped: true
          items:
            type: string
            description: The alternatives to use
            xml:
              name: alternative
        reason:
          type: string
          description: The reason for the deprecation
      description: The deprecation notice of the extension
      example:
        reason: reason
        alternatives:
        - alternatives
        - alternatives
    DynamicProperty:
      type: object
      properties:
        description:
          type: string
          description: The description of the dynamic property
        expressionLanguageScope:
          type: string
          description: The scope of the expression language support
          enum:
          - NONE
          - ENVIRONMENT
          - FLOWFILE_ATTRIBUTES
        expressionLanguageSupported:
          type: boolean
          description: Whether or not expression language is supported
        name:
          type: string
          description: The description of the dynamic property name
        value:
          type: string
          description: The description of the dynamic property value
      description: The dynamic properties of the extension
      example:
        expressionLanguageScope: NONE
        name: name
        description: description
        expressionLanguageSupported: true
        value: value
    DynamicRelationship:
      type: object
      properties:
        description:
          type: string
          description: The description of the dynamic relationship
        name:
          type: string
          description: The description of the dynamic relationship name
      description: The dynamic relationships of the extension
      example:
        name: name
        description: description
    Extension:
      required:
      - name
      - type
      type: object
      properties:
        defaultSchedule:
          $ref: '#/components/schemas/DefaultSchedule'
        defaultSettings:
          $ref: '#/components/schemas/DefaultSettings'
        deprecationNotice:
          $ref: '#/components/schemas/DeprecationNotice'
        description:
          type: string
          description: The description of the extension
        dynamicProperties:
          type: array
          description: The dynamic properties of the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/DynamicProperty'
        dynamicRelationship:
          $ref: '#/components/schemas/DynamicRelationship'
        inputRequirement:
          type: string
          description: The input requirement of the extension
          enum:
          - INPUT_REQUIRED
          - INPUT_ALLOWED
          - INPUT_FORBIDDEN
        multiProcessorUseCases:
          type: array
          description: Zero or more documented use cases for how the processor may
            be used in conjunction with other processors
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/MultiProcessorUseCase'
        name:
          type: string
          description: The name of the extension
        primaryNodeOnly:
          type: boolean
          description: Indicates that a processor should be scheduled only on the
            primary node
        properties:
          type: array
          description: The properties of the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Property'
        providedServiceAPIs:
          type: array
          description: The service APIs provided by this extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProvidedServiceAPI'
        readsAttributes:
          type: array
          description: The attributes read from flow files by the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Attribute'
        relationships:
          type: array
          description: The relationships of the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Relationship'
        restricted:
          $ref: '#/components/schemas/Restricted'
        seeAlso:
          type: array
          description: The names of other extensions to see
          xml:
            wrapped: true
          items:
            type: string
            description: The names of other extensions to see
            xml:
              name: see
        sideEffectFree:
          type: boolean
          description: Indicates that a processor is side effect free
        stateful:
          $ref: '#/components/schemas/Stateful'
        supportsBatching:
          type: boolean
          description: Indicates that a processor supports batching
        supportsSensitiveDynamicProperties:
          type: boolean
        systemResourceConsiderations:
          type: array
          description: The resource considerations of the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SystemResourceConsideration'
        tags:
          type: array
          description: The tags of the extension
          xml:
            wrapped: true
          items:
            type: string
            description: The tags of the extension
            xml:
              name: tag
        triggerSerially:
          type: boolean
          description: Indicates that a processor should be triggered serially
        triggerWhenAnyDestinationAvailable:
          type: boolean
          description: Indicates that a processor should be triggered when any destinations
            have space for flow files
        triggerWhenEmpty:
          type: boolean
          description: Indicates that a processor should be triggered when the incoming
            queues are empty
        type:
          type: string
          description: The type of the extension
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_PROVIDER
        useCases:
          type: array
          description: Zero or more documented use cases for how the extension may
            be used
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UseCase'
        writesAttributes:
          type: array
          description: The attributes written to flow files by the extension
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Attribute'
      example:
        defaultSchedule:
          period: period
          concurrentTasks: concurrentTasks
          strategy: strategy
        dynamicProperties:
        - expressionLanguageScope: NONE
          name: name
          description: description
          expressionLanguageSupported: true
          value: value
        - expressionLanguageScope: NONE
          name: name
          description: description
          expressionLanguageSupported: true
          value: value
        providedServiceAPIs:
        - groupId: groupId
          artifactId: artifactId
          className: className
          version: version
        - groupId: groupId
          artifactId: artifactId
          className: className
          version: version
        writesAttributes:
        - null
        - null
        description: description
        type: PROCESSOR
        inputRequirement: INPUT_REQUIRED
        seeAlso:
        - seeAlso
        - seeAlso
        primaryNodeOnly: true
        relationships:
        - autoTerminated: true
          name: name
          description: description
        - autoTerminated: true
          name: name
          description: description
        dynamicRelationship:
          name: name
          description: description
        systemResourceConsiderations:
        - resource: resource
          description: description
        - resource: resource
          description: description
        supportsSensitiveDynamicProperties: true
        sideEffectFree: true
        stateful:
          description: description
          scopes:
          - CLUSTER
          - CLUSTER
        defaultSettings:
          bulletinLevel: bulletinLevel
          penaltyDuration: penaltyDuration
          yieldDuration: yieldDuration
        triggerWhenAnyDestinationAvailable: true
        supportsBatching: true
        deprecationNotice:
          reason: reason
          alternatives:
          - alternatives
          - alternatives
        triggerSerially: true
        readsAttributes:
        - name: name
          description: description
        - name: name
          description: description
        tags:
        - tags
        - tags
        triggerWhenEmpty: true
        useCases:
        - notes: notes
          keywords:
          - keywords
          - keywords
          configuration: configuration
          description: description
          inputRequirement: INPUT_REQUIRED
        - notes: notes
          keywords:
          - keywords
          - keywords
          configuration: configuration
          description: description
          inputRequirement: INPUT_REQUIRED
        restricted:
          restrictions:
          - requiredPermission: requiredPermission
            explanation: explanation
          - requiredPermission: requiredPermission
            explanation: explanation
          generalRestrictionExplanation: generalRestrictionExplanation
        name: name
        multiProcessorUseCases:
        - processorConfigurations:
          - processorClassName: processorClassName
            configuration: configuration
          - processorClassName: processorClassName
            configuration: configuration
          notes: notes
          keywords:
          - keywords
          - keywords
          description: description
        - processorConfigurations:
          - processorClassName: processorClassName
            configuration: configuration
          - processorClassName: processorClassName
            configuration: configuration
          notes: notes
          keywords:
          - keywords
          - keywords
          description: description
        properties:
        - resourceDefinition:
            resourceTypes:
            - FILE
            - FILE
            cardinality: SINGLE
          controllerServiceDefinition:
            groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          defaultValue: defaultValue
          displayName: displayName
          dynamicallyModifiesClasspath: true
          expressionLanguageScope: NONE
          description: description
          sensitive: true
          required: true
          dependencies:
          - propertyDisplayName: propertyDisplayName
            dependentValues:
              values:
              - values
              - values
            propertyName: propertyName
          - propertyDisplayName: propertyDisplayName
            dependentValues:
              values:
              - values
              - values
            propertyName: propertyName
          allowableValues:
          - displayName: displayName
            description: description
            value: value
          - displayName: displayName
            description: description
            value: value
          name: name
          dynamic: true
          expressionLanguageSupported: true
        - resourceDefinition:
            resourceTypes:
            - FILE
            - FILE
            cardinality: SINGLE
          controllerServiceDefinition:
            groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          defaultValue: defaultValue
          displayName: displayName
          dynamicallyModifiesClasspath: true
          expressionLanguageScope: NONE
          description: description
          sensitive: true
          required: true
          dependencies:
          - propertyDisplayName: propertyDisplayName
            dependentValues:
              values:
              - values
              - values
            propertyName: propertyName
          - propertyDisplayName: propertyDisplayName
            dependentValues:
              values:
              - values
              - values
            propertyName: propertyName
          allowableValues:
          - displayName: displayName
            description: description
            value: value
          - displayName: displayName
            description: description
            value: value
          name: name
          dynamic: true
          expressionLanguageSupported: true
    ExtensionFilterParams:
      type: object
      properties:
        bundleType:
          type: string
          description: The type of bundle
          enum:
          - NIFI_NAR
          - MINIFI_CPP
        extensionType:
          type: string
          description: The type of extension
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_PROVIDER
        tags:
          uniqueItems: true
          type: array
          description: The tags
          items:
            type: string
            description: The tags
      description: The filter parameters submitted for the request
      example:
        extensionType: PROCESSOR
        bundleType: NIFI_NAR
        tags:
        - tags
        - tags
    ExtensionMetadata:
      type: object
      properties:
        bundleInfo:
          $ref: '#/components/schemas/BundleInfo'
        deprecationNotice:
          $ref: '#/components/schemas/DeprecationNotice'
        description:
          type: string
          description: The description of the extension
        displayName:
          type: string
          description: The display name of the extension
        hasAdditionalDetails:
          type: boolean
          description: Whether or not the extension has additional detail documentation
        link:
          $ref: '#/components/schemas/Link'
        linkDocs:
          $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the extension
        providedServiceAPIs:
          type: array
          description: The service APIs provided by the extension
          items:
            $ref: '#/components/schemas/ProvidedServiceAPI'
        restricted:
          $ref: '#/components/schemas/Restricted'
        tags:
          type: array
          description: The tags of the extension
          items:
            type: string
            description: The tags of the extension
        type:
          type: string
          description: The type of the extension
          enum:
          - PROCESSOR
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_PROVIDER
      description: The metadata for the extensions
      example:
        bundleInfo:
          bucketName: bucketName
          groupId: groupId
          bundleId: bundleId
          artifactId: artifactId
          bucketId: bucketId
          bundleType: NIFI_NAR
          version: version
          systemApiVersion: systemApiVersion
        hasAdditionalDetails: true
        linkDocs: null
        deprecationNotice:
          reason: reason
          alternatives:
          - alternatives
          - alternatives
        displayName: displayName
        restricted:
          restrictions:
          - requiredPermission: requiredPermission
            explanation: explanation
          - requiredPermission: requiredPermission
            explanation: explanation
          generalRestrictionExplanation: generalRestrictionExplanation
        providedServiceAPIs:
        - groupId: groupId
          artifactId: artifactId
          className: className
          version: version
        - groupId: groupId
          artifactId: artifactId
          className: className
          version: version
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        name: name
        description: description
        type: PROCESSOR
        tags:
        - tags
        - tags
    ExtensionMetadataContainer:
      type: object
      properties:
        extensions:
          uniqueItems: true
          type: array
          description: The metadata for the extensions
          items:
            $ref: '#/components/schemas/ExtensionMetadata'
        filterParams:
          $ref: '#/components/schemas/ExtensionFilterParams'
        numResults:
          type: integer
          description: The number of extensions in the response
          format: int32
      example:
        extensions:
        - bundleInfo:
            bucketName: bucketName
            groupId: groupId
            bundleId: bundleId
            artifactId: artifactId
            bucketId: bucketId
            bundleType: NIFI_NAR
            version: version
            systemApiVersion: systemApiVersion
          hasAdditionalDetails: true
          linkDocs: null
          deprecationNotice:
            reason: reason
            alternatives:
            - alternatives
            - alternatives
          displayName: displayName
          restricted:
            restrictions:
            - requiredPermission: requiredPermission
              explanation: explanation
            - requiredPermission: requiredPermission
              explanation: explanation
            generalRestrictionExplanation: generalRestrictionExplanation
          providedServiceAPIs:
          - groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          - groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          name: name
          description: description
          type: PROCESSOR
          tags:
          - tags
          - tags
        - bundleInfo:
            bucketName: bucketName
            groupId: groupId
            bundleId: bundleId
            artifactId: artifactId
            bucketId: bucketId
            bundleType: NIFI_NAR
            version: version
            systemApiVersion: systemApiVersion
          hasAdditionalDetails: true
          linkDocs: null
          deprecationNotice:
            reason: reason
            alternatives:
            - alternatives
            - alternatives
          displayName: displayName
          restricted:
            restrictions:
            - requiredPermission: requiredPermission
              explanation: explanation
            - requiredPermission: requiredPermission
              explanation: explanation
            generalRestrictionExplanation: generalRestrictionExplanation
          providedServiceAPIs:
          - groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          - groupId: groupId
            artifactId: artifactId
            className: className
            version: version
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          name: name
          description: description
          type: PROCESSOR
          tags:
          - tags
          - tags
        numResults: 0
        filterParams:
          extensionType: PROCESSOR
          bundleType: NIFI_NAR
          tags:
          - tags
          - tags
    ExtensionRepoArtifact:
      type: object
      properties:
        artifactId:
          type: string
          description: The artifact id
        bucketName:
          type: string
          description: The bucket name
        groupId:
          type: string
          description: The group id
        link:
          $ref: '#/components/schemas/Link'
      example:
        bucketName: bucketName
        groupId: groupId
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        artifactId: artifactId
    ExtensionRepoBucket:
      type: object
      properties:
        bucketName:
          type: string
          description: The name of the bucket
        link:
          $ref: '#/components/schemas/Link'
      example:
        bucketName: bucketName
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
    ExtensionRepoGroup:
      type: object
      properties:
        bucketName:
          type: string
          description: The bucket name
        groupId:
          type: string
          description: The group id
        link:
          $ref: '#/components/schemas/Link'
      example:
        bucketName: bucketName
        groupId: groupId
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
    ExtensionRepoVersion:
      type: object
      properties:
        downloadLink:
          $ref: '#/components/schemas/Link'
        extensionsLink:
          $ref: '#/components/schemas/Link'
        sha256Link:
          $ref: '#/components/schemas/Link'
        sha256Supplied:
          type: boolean
          description: Indicates if the client supplied a SHA-256 when uploading this
            version of the extension bundle.
          readOnly: true
      example:
        extensionsLink: null
        sha256Link: null
        downloadLink:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        sha256Supplied: true
    ExtensionRepoVersionSummary:
      type: object
      properties:
        artifactId:
          type: string
          description: The artifact id
        author:
          type: string
          description: The identity of the user that created this version
        bucketName:
          type: string
          description: The bucket name
        groupId:
          type: string
          description: The group id
        link:
          $ref: '#/components/schemas/Link'
        timestamp:
          type: integer
          description: The timestamp of when this version was created
          format: int64
        version:
          type: string
          description: The version
      example:
        bucketName: bucketName
        author: author
        groupId: groupId
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        artifactId: artifactId
        version: version
        timestamp: 0
    ExternalControllerServiceReference:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the controller service
        name:
          type: string
          description: The name of the controller service
      description: "The information about controller services that exist outside this\
        \ versioned flow, but are referenced by components within the versioned flow."
      example:
        identifier: identifier
        name: name
    Fields:
      type: object
      properties:
        fields:
          uniqueItems: true
          type: array
          items:
            type: string
      example:
        fields:
        - fields
        - fields
    FormDataContentDisposition:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        fileName:
          type: string
        modificationDate:
          type: string
          format: date-time
        name:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        type:
          type: string
    Link:
      type: object
      properties:
        params:
          type: object
          additionalProperties:
            type: string
        rel:
          type: string
        rels:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
        uri:
          type: string
          format: uri
        uriBuilder:
          $ref: '#/components/schemas/UriBuilder'
      description: An WebLink to this entity.
      readOnly: true
      example:
        rel: rel
        params:
          key: params
        title: title
        type: type
        uri: http://example.com/aeiou
        uriBuilder: {}
        rels:
        - rels
        - rels
    LongParameter:
      type: object
      properties:
        long:
          type: integer
          format: int64
    MultiProcessorUseCase:
      type: object
      properties:
        description:
          type: string
        keywords:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: keyword
        notes:
          type: string
        processorConfigurations:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ProcessorConfiguration'
      description: Zero or more documented use cases for how the processor may be
        used in conjunction with other processors
      example:
        processorConfigurations:
        - processorClassName: processorClassName
          configuration: configuration
        - processorClassName: processorClassName
          configuration: configuration
        notes: notes
        keywords:
        - keywords
        - keywords
        description: description
    ParameterProviderReference:
      type: object
      properties:
        bundle:
          $ref: '#/components/schemas/Bundle'
        identifier:
          type: string
          description: The identifier of the parameter provider
        name:
          type: string
          description: The name of the parameter provider
        type:
          type: string
          description: The fully qualified name of the parameter provider class.
      description: Contains basic information about parameter providers referenced
        in the versioned flow.
      example:
        identifier: identifier
        name: name
        type: type
        bundle: null
    Permissions:
      type: object
      properties:
        canDelete:
          type: boolean
          description: Indicates whether the user can delete a given resource.
          readOnly: true
        canRead:
          type: boolean
          description: Indicates whether the user can read a given resource.
          readOnly: true
        canWrite:
          type: boolean
          description: Indicates whether the user can write a given resource.
          readOnly: true
      description: The access that the current user has to any top level resources
        (a logical 'OR' of all other values)
      readOnly: true
      example:
        canRead: true
        canDelete: true
        canWrite: true
    Position:
      type: object
      properties:
        x:
          type: number
          description: The x coordinate.
          format: double
        "y":
          type: number
          description: The y coordinate.
          format: double
      description: The position of a component on the graph
      example:
        x: 6.027456183070403
        "y": 1.4658129805029452
    ProcessorConfiguration:
      type: object
      properties:
        configuration:
          type: string
        processorClassName:
          type: string
      example:
        processorClassName: processorClassName
        configuration: configuration
    Property:
      type: object
      properties:
        allowableValues:
          type: array
          description: The allowable values for this property
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AllowableValue'
        controllerServiceDefinition:
          $ref: '#/components/schemas/ControllerServiceDefinition'
        defaultValue:
          type: string
          description: The default value
        dependencies:
          type: array
          description: The properties that this property depends on
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Dependency'
        description:
          type: string
          description: The description
        displayName:
          type: string
          description: The display name
        dynamic:
          type: boolean
          description: Whether or not the processor is dynamic
        dynamicallyModifiesClasspath:
          type: boolean
          description: Whether or not the processor dynamically modifies the classpath
        expressionLanguageScope:
          type: string
          description: The scope of expression language support
          enum:
          - NONE
          - ENVIRONMENT
          - FLOWFILE_ATTRIBUTES
        expressionLanguageSupported:
          type: boolean
          description: Whether or not expression language is supported
        name:
          type: string
          description: The name of the property
        required:
          type: boolean
          description: Whether or not the property is required
        resourceDefinition:
          $ref: '#/components/schemas/ResourceDefinition'
        sensitive:
          type: boolean
          description: Whether or not the property is sensitive
      description: The properties of the extension
      example:
        resourceDefinition:
          resourceTypes:
          - FILE
          - FILE
          cardinality: SINGLE
        controllerServiceDefinition:
          groupId: groupId
          artifactId: artifactId
          className: className
          version: version
        defaultValue: defaultValue
        displayName: displayName
        dynamicallyModifiesClasspath: true
        expressionLanguageScope: NONE
        description: description
        sensitive: true
        required: true
        dependencies:
        - propertyDisplayName: propertyDisplayName
          dependentValues:
            values:
            - values
            - values
          propertyName: propertyName
        - propertyDisplayName: propertyDisplayName
          dependentValues:
            values:
            - values
            - values
          propertyName: propertyName
        allowableValues:
        - displayName: displayName
          description: description
          value: value
        - displayName: displayName
          description: description
          value: value
        name: name
        dynamic: true
        expressionLanguageSupported: true
    ProvidedServiceAPI:
      type: object
      properties:
        artifactId:
          type: string
          description: The artifact id of the service API being provided
        className:
          type: string
          description: The class name of the service API being provided
        groupId:
          type: string
          description: The group id of the service API being provided
        version:
          type: string
          description: The version of the service API being provided
      description: The service APIs provided by the extension
      example:
        groupId: groupId
        artifactId: artifactId
        className: className
        version: version
    RegistryAbout:
      type: object
      properties:
        registryAboutVersion:
          type: string
          description: The version string for this Nifi Registry
          readOnly: true
      example:
        registryAboutVersion: registryAboutVersion
    RegistryConfiguration:
      type: object
      properties:
        supportsConfigurableAuthorizer:
          type: boolean
          description: Whether this NiFi Registry supports a configurable authorizer.
          readOnly: true
        supportsConfigurableUsersAndGroups:
          type: boolean
          description: Whether this NiFi Registry supports configurable users and
            groups.
          readOnly: true
        supportsManagedAuthorizer:
          type: boolean
          description: "Whether this NiFi Registry supports a managed authorizer.\
            \ Managed authorizers can visualize users, groups, and policies in the\
            \ UI."
          readOnly: true
      example:
        supportsConfigurableAuthorizer: true
        supportsConfigurableUsersAndGroups: true
        supportsManagedAuthorizer: true
    Relationship:
      type: object
      properties:
        autoTerminated:
          type: boolean
          description: Whether or not the relationship is auto-terminated by default
        description:
          type: string
          description: The description of the relationship
        name:
          type: string
          description: The name of the relationship
      description: The relationships of the extension
      example:
        autoTerminated: true
        name: name
        description: description
    Resource:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the resource.
          readOnly: true
        name:
          type: string
          description: The name of the resource.
          readOnly: true
      example:
        identifier: identifier
        name: name
    ResourceDefinition:
      type: object
      properties:
        cardinality:
          type: string
          description: The cardinality of the resource definition
          enum:
          - SINGLE
          - MULTIPLE
        resourceTypes:
          type: array
          description: The types of resources
          xml:
            wrapped: true
          items:
            type: string
            description: The types of resources
            xml:
              name: resourceType
            enum:
            - FILE
            - DIRECTORY
            - TEXT
            - URL
      description: The optional resource definition
      example:
        resourceTypes:
        - FILE
        - FILE
        cardinality: SINGLE
    ResourcePermissions:
      type: object
      properties:
        anyTopLevelResource:
          $ref: '#/components/schemas/Permissions'
        buckets:
          $ref: '#/components/schemas/Permissions'
        policies:
          $ref: '#/components/schemas/Permissions'
        proxy:
          $ref: '#/components/schemas/Permissions'
        tenants:
          $ref: '#/components/schemas/Permissions'
      description: A summary top-level resource access policies granted to this tenant.
      readOnly: true
      example:
        proxy: null
        tenants: null
        buckets: null
        policies: null
        anyTopLevelResource:
          canRead: true
          canDelete: true
          canWrite: true
    Restricted:
      type: object
      properties:
        generalRestrictionExplanation:
          type: string
          description: "The general restriction for the extension, or null if only\
            \ specific restrictions exist"
        restrictions:
          type: array
          description: The specific restrictions
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Restriction'
      description: The restrictions of the extension
      example:
        restrictions:
        - requiredPermission: requiredPermission
          explanation: explanation
        - requiredPermission: requiredPermission
          explanation: explanation
        generalRestrictionExplanation: generalRestrictionExplanation
    Restriction:
      type: object
      properties:
        explanation:
          type: string
          description: The explanation of this restriction
        requiredPermission:
          type: string
          description: The permission required for this restriction
      description: The specific restrictions
      example:
        requiredPermission: requiredPermission
        explanation: explanation
    RevisionInfo:
      type: object
      properties:
        clientId:
          type: string
          description: "A client identifier used to make a request. By including a\
            \ client identifier, the API can allow multiple requests without needing\
            \ the current revision. Due to the asynchronous nature of requests/responses\
            \ this was implemented to allow the client to make numerous requests without\
            \ having to wait for the previous response to come back."
        lastModifier:
          type: string
          description: The user that last modified the entity.
          readOnly: true
        version:
          type: integer
          description: "NiFi Registry employs an optimistic locking strategy where\
            \ the client must include a revision in their request when performing\
            \ an update. In a response to a mutable flow request, this field represents\
            \ the updated base version."
          format: int64
      description: The revision information for an entity managed through the REST
        API.
      readOnly: true
      example:
        clientId: clientId
        lastModifier: lastModifier
        version: 6
    Stateful:
      type: object
      properties:
        description:
          type: string
          description: The description for how the extension stores state
        scopes:
          type: array
          description: The scopes used to store state
          xml:
            wrapped: true
          items:
            type: string
            description: The scopes used to store state
            xml:
              name: scope
            enum:
            - CLUSTER
            - LOCAL
      description: The information about how the extension stores state
      example:
        description: description
        scopes:
        - CLUSTER
        - CLUSTER
    SystemResourceConsideration:
      type: object
      properties:
        description:
          type: string
          description: The description of how the resource is affected
        resource:
          type: string
          description: The resource to consider
      description: The resource considerations of the extension
      example:
        resource: resource
        description: description
    TagCount:
      type: object
      properties:
        count:
          type: integer
          description: The number of occurrences of the given tag
          format: int32
        tag:
          type: string
          description: The tag label
      example:
        count: 0
        tag: tag
    Tenant:
      type: object
      properties:
        accessPolicies:
          uniqueItems: true
          type: array
          description: The access policies granted to this tenant.
          readOnly: true
          items:
            $ref: '#/components/schemas/AccessPolicySummary'
        configurable:
          type: boolean
          description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
            \ has been configured to manage it."
          readOnly: true
        identifier:
          type: string
          description: The computer-generated identifier of the tenant.
          readOnly: true
        identity:
          type: string
          description: The human-facing identity of the tenant. This can only be changed
            if the tenant is configurable.
        resourcePermissions:
          $ref: '#/components/schemas/ResourcePermissions'
        revision:
          $ref: '#/components/schemas/RevisionInfo'
      description: The users that belong to this user group. This can only be changed
        if this group is configurable.
      example:
        identifier: identifier
        resourcePermissions:
          proxy: null
          tenants: null
          buckets: null
          policies: null
          anyTopLevelResource:
            canRead: true
            canDelete: true
            canWrite: true
        accessPolicies:
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        identity: identity
        configurable: true
        revision: null
    UriBuilder:
      type: object
    UseCase:
      type: object
      properties:
        configuration:
          type: string
        description:
          type: string
        inputRequirement:
          type: string
          enum:
          - INPUT_REQUIRED
          - INPUT_ALLOWED
          - INPUT_FORBIDDEN
        keywords:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: keyword
        notes:
          type: string
      description: Zero or more documented use cases for how the extension may be
        used
      example:
        notes: notes
        keywords:
        - keywords
        - keywords
        configuration: configuration
        description: description
        inputRequirement: INPUT_REQUIRED
    User:
      type: object
      properties:
        accessPolicies:
          uniqueItems: true
          type: array
          description: The access policies granted to this tenant.
          readOnly: true
          items:
            $ref: '#/components/schemas/AccessPolicySummary'
        configurable:
          type: boolean
          description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
            \ has been configured to manage it."
          readOnly: true
        identifier:
          type: string
          description: The computer-generated identifier of the tenant.
          readOnly: true
        identity:
          type: string
          description: The human-facing identity of the tenant. This can only be changed
            if the tenant is configurable.
        resourcePermissions:
          $ref: '#/components/schemas/ResourcePermissions'
        revision:
          $ref: '#/components/schemas/RevisionInfo'
        userGroups:
          uniqueItems: true
          type: array
          description: The groups to which the user belongs.
          readOnly: true
          items:
            $ref: '#/components/schemas/Tenant'
      example:
        identifier: identifier
        userGroups:
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        resourcePermissions:
          proxy: null
          tenants: null
          buckets: null
          policies: null
          anyTopLevelResource:
            canRead: true
            canDelete: true
            canWrite: true
        accessPolicies:
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        identity: identity
        configurable: true
        revision:
          clientId: clientId
          lastModifier: lastModifier
          version: 6
    UserGroup:
      type: object
      properties:
        accessPolicies:
          uniqueItems: true
          type: array
          description: The access policies granted to this tenant.
          readOnly: true
          items:
            $ref: '#/components/schemas/AccessPolicySummary'
        configurable:
          type: boolean
          description: "Indicates if this tenant is configurable, based on which UserGroupProvider\
            \ has been configured to manage it."
          readOnly: true
        identifier:
          type: string
          description: The computer-generated identifier of the tenant.
          readOnly: true
        identity:
          type: string
          description: The human-facing identity of the tenant. This can only be changed
            if the tenant is configurable.
        resourcePermissions:
          $ref: '#/components/schemas/ResourcePermissions'
        revision:
          $ref: '#/components/schemas/RevisionInfo'
        users:
          uniqueItems: true
          type: array
          description: The users that belong to this user group. This can only be
            changed if this group is configurable.
          items:
            $ref: '#/components/schemas/Tenant'
      example:
        identifier: identifier
        resourcePermissions:
          proxy: null
          tenants: null
          buckets: null
          policies: null
          anyTopLevelResource:
            canRead: true
            canDelete: true
            canWrite: true
        accessPolicies:
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        - identifier: identifier
          resource: resource
          action: read
          configurable: true
          revision: null
        identity: identity
        configurable: true
        users:
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        - identifier: identifier
          resourcePermissions:
            proxy: null
            tenants: null
            buckets: null
            policies: null
            anyTopLevelResource:
              canRead: true
              canDelete: true
              canWrite: true
          accessPolicies:
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          - identifier: identifier
            resource: resource
            action: read
            configurable: true
            revision: null
          identity: identity
          configurable: true
          revision: null
        revision:
          clientId: clientId
          lastModifier: lastModifier
          version: 6
    VersionedAsset:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of the asset
        name:
          type: string
          description: The name of the asset
      description: The assets that are referenced by this parameter
      example:
        identifier: identifier
        name: name
    VersionedConnection:
      type: object
      properties:
        backPressureDataSizeThreshold:
          type: string
          description: The object data size threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
        backPressureObjectThreshold:
          type: integer
          description: The object count threshold for determining when back pressure
            is applied. Updating this value is a passive change in the sense that
            it won't impact whether existing files over the limit are affected but
            it does help feeder processors to stop pushing too much into this work
            queue.
          format: int64
        bends:
          type: array
          description: The bend points on the connection.
          items:
            $ref: '#/components/schemas/Position'
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        destination:
          $ref: '#/components/schemas/ConnectableComponent'
        flowFileExpiration:
          type: string
          description: The amount of time a flow file may be in the flow before it
            will be automatically aged out of the flow. Once a flow file reaches this
            age it will be terminated from the flow the next time a processor attempts
            to start work on it.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        labelIndex:
          type: integer
          description: The index of the bend point where to place the connection label.
          format: int32
        loadBalanceCompression:
          type: string
          description: Whether or not compression should be used when transferring
            FlowFiles between nodes
          enum:
          - "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
        loadBalanceStrategy:
          type: string
          description: "The Strategy to use for load balancing data across the cluster,\
            \ or null, if no Load Balance Strategy has been specified."
          enum:
          - "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN, SINGLE_NODE"
        name:
          type: string
          description: The component's name
        partitioningAttribute:
          type: string
          description: "The attribute to use for partitioning data as it is load balanced\
            \ across the cluster. If the Load Balance Strategy is configured to use\
            \ PARTITION_BY_ATTRIBUTE, the value returned by this method is the name\
            \ of the FlowFile Attribute that will be used to determine which node\
            \ in the cluster should receive a given FlowFile. If the Load Balance\
            \ Strategy is unset or is set to any other value, the Partitioning Attribute\
            \ has no effect."
        position:
          $ref: '#/components/schemas/Position'
        prioritizers:
          type: array
          description: The comparators used to prioritize the queue.
          items:
            type: string
            description: The comparators used to prioritize the queue.
        selectedRelationships:
          uniqueItems: true
          type: array
          description: The selected relationship that comprise the connection.
          items:
            type: string
            description: The selected relationship that comprise the connection.
        source:
          $ref: '#/components/schemas/ConnectableComponent'
        zIndex:
          type: integer
          description: The z index of the connection.
          format: int64
      description: The Connections
      example:
        componentType: CONNECTION
        identifier: identifier
        prioritizers:
        - prioritizers
        - prioritizers
        comments: comments
        flowFileExpiration: flowFileExpiration
        selectedRelationships:
        - selectedRelationships
        - selectedRelationships
        loadBalanceCompression: "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
        destination:
          comments: comments
          groupId: groupId
          name: name
          instanceIdentifier: instanceIdentifier
          id: id
          type: PROCESSOR
        backPressureDataSizeThreshold: backPressureDataSizeThreshold
        loadBalanceStrategy: "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN,\
          \ SINGLE_NODE"
        labelIndex: 5
        source: null
        bends:
        - x: 6.027456183070403
          "y": 1.4658129805029452
        - x: 6.027456183070403
          "y": 1.4658129805029452
        backPressureObjectThreshold: 0
        name: name
        instanceIdentifier: instanceIdentifier
        position: null
        groupIdentifier: groupIdentifier
        partitioningAttribute: partitioningAttribute
        zIndex: 5
    VersionedControllerService:
      type: object
      properties:
        annotationData:
          type: string
          description: The annotation for the controller service. This is how the
            custom UI relays configuration to the controller service.
        bulletinLevel:
          type: string
          description: The level at which the controller service will report bulletins.
        bundle:
          $ref: '#/components/schemas/Bundle'
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        controllerServiceApis:
          type: array
          description: Lists the APIs this Controller Service implements.
          items:
            $ref: '#/components/schemas/ControllerServiceAPI'
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: '#/components/schemas/Position'
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component. Properties whose value
              is not set will only contain the property name.
          description: The properties for the component. Properties whose value is
            not set will only contain the property name.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VersionedPropertyDescriptor'
          description: The property descriptors for the component.
        scheduledState:
          type: string
          description: The ScheduledState denoting whether the Controller Service
            is ENABLED or DISABLED
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        type:
          type: string
          description: The type of the extension component
      description: The Controller Services
      example:
        annotationData: annotationData
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        bulletinLevel: bulletinLevel
        propertyDescriptors:
          key:
            resourceDefinition:
              resourceTypes:
              - FILE
              - FILE
              cardinality: SINGLE
            displayName: displayName
            identifiesControllerService: true
            name: name
            dynamic: true
            sensitive: true
        type: type
        scheduledState: ENABLED
        controllerServiceApis:
        - type: type
          bundle: null
        - type: type
          bundle: null
        name: name
        instanceIdentifier: instanceIdentifier
        position: null
        groupIdentifier: groupIdentifier
        bundle:
          artifact: artifact
          version: version
          group: group
        properties:
          key: properties
    VersionedFlow:
      required:
      - bucketIdentifier
      - identifier
      - name
      - type
      type: object
      properties:
        bucketIdentifier:
          minLength: 1
          type: string
          description: The identifier of the bucket this items belongs to. This cannot
            be changed after the item is created.
        bucketName:
          type: string
          description: The name of the bucket this items belongs to.
          readOnly: true
        createdTimestamp:
          minimum: 1
          type: integer
          description: "The timestamp of when the item was created, as milliseconds\
            \ since epoch."
          format: int64
          readOnly: true
        description:
          type: string
          description: A description of the item.
        identifier:
          minLength: 1
          type: string
          description: An ID to uniquely identify this object.
          readOnly: true
        link:
          $ref: '#/components/schemas/Link'
        modifiedTimestamp:
          minimum: 1
          type: integer
          description: "The timestamp of when the item was last modified, as milliseconds\
            \ since epoch."
          format: int64
          readOnly: true
        name:
          minLength: 1
          type: string
          description: The name of the item.
        permissions:
          $ref: '#/components/schemas/Permissions'
        revision:
          $ref: '#/components/schemas/RevisionInfo'
        type:
          type: string
          description: The type of item.
          enum:
          - Flow
          - Bundle
        versionCount:
          minimum: 0
          type: integer
          description: The number of versions of this flow.
          format: int64
          readOnly: true
      description: The flow this snapshot is for
      readOnly: true
      example:
        versionCount: 0
        bucketName: bucketName
        identifier: identifier
        permissions:
          canRead: true
          canDelete: true
          canWrite: true
        createdTimestamp: 1
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        name: name
        description: description
        modifiedTimestamp: 1
        bucketIdentifier: bucketIdentifier
        type: Flow
        revision:
          clientId: clientId
          lastModifier: lastModifier
          version: 6
    VersionedFlowCoordinates:
      type: object
      properties:
        branch:
          type: string
          description: The name of the branch that the flow resides in
        bucketId:
          type: string
          description: The UUID of the bucket that the flow resides in
        flowId:
          type: string
          description: The UUID of the flow
        latest:
          type: boolean
          description: Whether or not these coordinates point to the latest version
            of the flow
        registryId:
          type: string
          description: The identifier of the Flow Registry that contains the flow
        storageLocation:
          type: string
          description: The location of the Flow Registry that stores the flow
        version:
          type: string
          description: The version of the flow
      description: "The coordinates where the remote flow is stored, or null if the\
        \ Process Group is not directly under Version Control"
      example:
        registryId: registryId
        storageLocation: storageLocation
        bucketId: bucketId
        branch: branch
        flowId: flowId
        version: version
        latest: true
    VersionedFlowDifference:
      type: object
      properties:
        bucketId:
          type: string
          description: The id of the bucket that the flow is stored in.
        componentDifferenceGroups:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ComponentDifferenceGroup'
        flowId:
          type: string
          description: The id of the flow that is being examined.
        versionA:
          type: integer
          description: The earlier version from the diff operation.
          format: int32
        versionB:
          type: integer
          description: The latter version from the diff operation.
          format: int32
      example:
        versionB: 6
        versionA: 0
        bucketId: bucketId
        componentDifferenceGroups:
        - componentType: componentType
          componentId: componentId
          processGroupId: processGroupId
          differences:
          - differenceType: differenceType
            differenceTypeDescription: differenceTypeDescription
            changeDescription: changeDescription
            valueB: valueB
            valueA: valueA
          - differenceType: differenceType
            differenceTypeDescription: differenceTypeDescription
            changeDescription: changeDescription
            valueB: valueB
            valueA: valueA
          componentName: componentName
        - componentType: componentType
          componentId: componentId
          processGroupId: processGroupId
          differences:
          - differenceType: differenceType
            differenceTypeDescription: differenceTypeDescription
            changeDescription: changeDescription
            valueB: valueB
            valueA: valueA
          - differenceType: differenceType
            differenceTypeDescription: differenceTypeDescription
            changeDescription: changeDescription
            valueB: valueB
            valueA: valueA
          componentName: componentName
        flowId: flowId
    VersionedFlowSnapshot:
      required:
      - flowContents
      - snapshotMetadata
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/Bucket'
        externalControllerServices:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ExternalControllerServiceReference'
          description: "The information about controller services that exist outside\
            \ this versioned flow, but are referenced by components within the versioned\
            \ flow."
        flow:
          $ref: '#/components/schemas/VersionedFlow'
        flowContents:
          $ref: '#/components/schemas/VersionedProcessGroup'
        flowEncodingVersion:
          type: string
          description: The optional encoding version of the flow contents.
        latest:
          type: boolean
        parameterContexts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VersionedParameterContext'
          description: "The parameter contexts referenced by process groups in the\
            \ flow contents. The mapping is from the name of the context to the context\
            \ instance, and it is expected that any context in this map is referenced\
            \ by at least one process group in this flow."
        parameterProviders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ParameterProviderReference'
          description: Contains basic information about parameter providers referenced
            in the versioned flow.
        snapshotMetadata:
          $ref: '#/components/schemas/VersionedFlowSnapshotMetadata'
      example:
        bucket:
          identifier: identifier
          allowBundleRedeploy: true
          permissions:
            canRead: true
            canDelete: true
            canWrite: true
          createdTimestamp: 1
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          name: name
          description: description
          allowPublicRead: true
          revision:
            clientId: clientId
            lastModifier: lastModifier
            version: 6
        externalControllerServices:
          key:
            identifier: identifier
            name: name
        snapshotMetadata:
          flowIdentifier: flowIdentifier
          comments: comments
          author: author
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          bucketIdentifier: bucketIdentifier
          version: 0
          timestamp: 1
        flowContents:
          processors:
          - autoTerminatedRelationships:
            - autoTerminatedRelationships
            - autoTerminatedRelationships
            bulletinLevel: bulletinLevel
            executionNode: executionNode
            runDurationMillis: 1
            propertyDescriptors:
              key: null
            type: type
            scheduledState: ENABLED
            maxBackoffPeriod: maxBackoffPeriod
            yieldDuration: yieldDuration
            bundle: null
            retriedRelationships:
            - retriedRelationships
            - retriedRelationships
            annotationData: annotationData
            componentType: CONNECTION
            identifier: identifier
            comments: comments
            concurrentlySchedulableTaskCount: 7
            retryCount: 1
            penaltyDuration: penaltyDuration
            backoffMechanism: "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
            schedulingStrategy: schedulingStrategy
            name: name
            instanceIdentifier: instanceIdentifier
            schedulingPeriod: schedulingPeriod
            style:
              key: style
            position: null
            groupIdentifier: groupIdentifier
            properties:
              key: properties
          - autoTerminatedRelationships:
            - autoTerminatedRelationships
            - autoTerminatedRelationships
            bulletinLevel: bulletinLevel
            executionNode: executionNode
            runDurationMillis: 1
            propertyDescriptors:
              key: null
            type: type
            scheduledState: ENABLED
            maxBackoffPeriod: maxBackoffPeriod
            yieldDuration: yieldDuration
            bundle: null
            retriedRelationships:
            - retriedRelationships
            - retriedRelationships
            annotationData: annotationData
            componentType: CONNECTION
            identifier: identifier
            comments: comments
            concurrentlySchedulableTaskCount: 7
            retryCount: 1
            penaltyDuration: penaltyDuration
            backoffMechanism: "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
            schedulingStrategy: schedulingStrategy
            name: name
            instanceIdentifier: instanceIdentifier
            schedulingPeriod: schedulingPeriod
            style:
              key: style
            position: null
            groupIdentifier: groupIdentifier
            properties:
              key: properties
          scheduledState: ENABLED
          processGroups:
          - null
          - null
          outputPorts:
          - null
          - null
          funnels:
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
          versionedFlowCoordinates:
            registryId: registryId
            storageLocation: storageLocation
            bucketId: bucketId
            branch: branch
            flowId: flowId
            version: version
            latest: true
          connections:
          - componentType: CONNECTION
            identifier: identifier
            prioritizers:
            - prioritizers
            - prioritizers
            comments: comments
            flowFileExpiration: flowFileExpiration
            selectedRelationships:
            - selectedRelationships
            - selectedRelationships
            loadBalanceCompression: "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
            destination:
              comments: comments
              groupId: groupId
              name: name
              instanceIdentifier: instanceIdentifier
              id: id
              type: PROCESSOR
            backPressureDataSizeThreshold: backPressureDataSizeThreshold
            loadBalanceStrategy: "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN,\
              \ SINGLE_NODE"
            labelIndex: 5
            source: null
            bends:
            - x: 6.027456183070403
              "y": 1.4658129805029452
            - x: 6.027456183070403
              "y": 1.4658129805029452
            backPressureObjectThreshold: 0
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
            partitioningAttribute: partitioningAttribute
            zIndex: 5
          - componentType: CONNECTION
            identifier: identifier
            prioritizers:
            - prioritizers
            - prioritizers
            comments: comments
            flowFileExpiration: flowFileExpiration
            selectedRelationships:
            - selectedRelationships
            - selectedRelationships
            loadBalanceCompression: "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
            destination:
              comments: comments
              groupId: groupId
              name: name
              instanceIdentifier: instanceIdentifier
              id: id
              type: PROCESSOR
            backPressureDataSizeThreshold: backPressureDataSizeThreshold
            loadBalanceStrategy: "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN,\
              \ SINGLE_NODE"
            labelIndex: 5
            source: null
            bends:
            - x: 6.027456183070403
              "y": 1.4658129805029452
            - x: 6.027456183070403
              "y": 1.4658129805029452
            backPressureObjectThreshold: 0
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
            partitioningAttribute: partitioningAttribute
            zIndex: 5
          logFileSuffix: logFileSuffix
          parameterContextName: parameterContextName
          componentType: CONNECTION
          identifier: identifier
          defaultBackPressureObjectThreshold: 2
          comments: comments
          executionEngine: STANDARD
          defaultBackPressureDataSizeThreshold: defaultBackPressureDataSizeThreshold
          labels:
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            name: name
            width: 3.616076749251911
            instanceIdentifier: instanceIdentifier
            style:
              key: style
            label: label
            position: null
            groupIdentifier: groupIdentifier
            height: 9.301444243932576
            zIndex: 2
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            name: name
            width: 3.616076749251911
            instanceIdentifier: instanceIdentifier
            style:
              key: style
            label: label
            position: null
            groupIdentifier: groupIdentifier
            height: 9.301444243932576
            zIndex: 2
          controllerServices:
          - annotationData: annotationData
            componentType: CONNECTION
            identifier: identifier
            comments: comments
            bulletinLevel: bulletinLevel
            propertyDescriptors:
              key:
                resourceDefinition:
                  resourceTypes:
                  - FILE
                  - FILE
                  cardinality: SINGLE
                displayName: displayName
                identifiesControllerService: true
                name: name
                dynamic: true
                sensitive: true
            type: type
            scheduledState: ENABLED
            controllerServiceApis:
            - type: type
              bundle: null
            - type: type
              bundle: null
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
            bundle:
              artifact: artifact
              version: version
              group: group
            properties:
              key: properties
          - annotationData: annotationData
            componentType: CONNECTION
            identifier: identifier
            comments: comments
            bulletinLevel: bulletinLevel
            propertyDescriptors:
              key:
                resourceDefinition:
                  resourceTypes:
                  - FILE
                  - FILE
                  cardinality: SINGLE
                displayName: displayName
                identifiesControllerService: true
                name: name
                dynamic: true
                sensitive: true
            type: type
            scheduledState: ENABLED
            controllerServiceApis:
            - type: type
              bundle: null
            - type: type
              bundle: null
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
            bundle:
              artifact: artifact
              version: version
              group: group
            properties:
              key: properties
          defaultFlowFileExpiration: defaultFlowFileExpiration
          flowFileConcurrency: flowFileConcurrency
          flowFileOutboundPolicy: flowFileOutboundPolicy
          name: name
          inputPorts:
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            allowRemoteAccess: true
            concurrentlySchedulableTaskCount: 7
            name: name
            instanceIdentifier: instanceIdentifier
            portFunction: STANDARD
            position: null
            groupIdentifier: groupIdentifier
            type: INPUT_PORT
            scheduledState: ENABLED
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            allowRemoteAccess: true
            concurrentlySchedulableTaskCount: 7
            name: name
            instanceIdentifier: instanceIdentifier
            portFunction: STANDARD
            position: null
            groupIdentifier: groupIdentifier
            type: INPUT_PORT
            scheduledState: ENABLED
          instanceIdentifier: instanceIdentifier
          maxConcurrentTasks: 4
          position: null
          statelessFlowTimeout: statelessFlowTimeout
          groupIdentifier: groupIdentifier
          remoteProcessGroups:
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            proxyPassword: proxyPassword
            communicationsTimeout: communicationsTimeout
            proxyHost: proxyHost
            proxyPort: 7
            outputPorts:
            - null
            - null
            transportProtocol: "RAW, HTTP"
            name: name
            proxyUser: proxyUser
            inputPorts:
            - componentType: CONNECTION
              identifier: identifier
              remoteGroupId: remoteGroupId
              comments: comments
              targetId: targetId
              concurrentlySchedulableTaskCount: 6
              useCompression: true
              scheduledState: ENABLED
              name: name
              instanceIdentifier: instanceIdentifier
              position: null
              batchSize:
                duration: duration
                size: size
                count: 1
              groupIdentifier: groupIdentifier
            - componentType: CONNECTION
              identifier: identifier
              remoteGroupId: remoteGroupId
              comments: comments
              targetId: targetId
              concurrentlySchedulableTaskCount: 6
              useCompression: true
              scheduledState: ENABLED
              name: name
              instanceIdentifier: instanceIdentifier
              position: null
              batchSize:
                duration: duration
                size: size
                count: 1
              groupIdentifier: groupIdentifier
            targetUris: targetUris
            instanceIdentifier: instanceIdentifier
            yieldDuration: yieldDuration
            position: null
            groupIdentifier: groupIdentifier
            localNetworkInterface: localNetworkInterface
          - componentType: CONNECTION
            identifier: identifier
            comments: comments
            proxyPassword: proxyPassword
            communicationsTimeout: communicationsTimeout
            proxyHost: proxyHost
            proxyPort: 7
            outputPorts:
            - null
            - null
            transportProtocol: "RAW, HTTP"
            name: name
            proxyUser: proxyUser
            inputPorts:
            - componentType: CONNECTION
              identifier: identifier
              remoteGroupId: remoteGroupId
              comments: comments
              targetId: targetId
              concurrentlySchedulableTaskCount: 6
              useCompression: true
              scheduledState: ENABLED
              name: name
              instanceIdentifier: instanceIdentifier
              position: null
              batchSize:
                duration: duration
                size: size
                count: 1
              groupIdentifier: groupIdentifier
            - componentType: CONNECTION
              identifier: identifier
              remoteGroupId: remoteGroupId
              comments: comments
              targetId: targetId
              concurrentlySchedulableTaskCount: 6
              useCompression: true
              scheduledState: ENABLED
              name: name
              instanceIdentifier: instanceIdentifier
              position: null
              batchSize:
                duration: duration
                size: size
                count: 1
              groupIdentifier: groupIdentifier
            targetUris: targetUris
            instanceIdentifier: instanceIdentifier
            yieldDuration: yieldDuration
            position: null
            groupIdentifier: groupIdentifier
            localNetworkInterface: localNetworkInterface
        parameterProviders:
          key:
            identifier: identifier
            name: name
            type: type
            bundle: null
        flow:
          versionCount: 0
          bucketName: bucketName
          identifier: identifier
          permissions:
            canRead: true
            canDelete: true
            canWrite: true
          createdTimestamp: 1
          link:
            rel: rel
            params:
              key: params
            title: title
            type: type
            uri: http://example.com/aeiou
            uriBuilder: {}
            rels:
            - rels
            - rels
          name: name
          description: description
          modifiedTimestamp: 1
          bucketIdentifier: bucketIdentifier
          type: Flow
          revision:
            clientId: clientId
            lastModifier: lastModifier
            version: 6
        flowEncodingVersion: flowEncodingVersion
        latest: true
        parameterContexts:
          key:
            parameterGroupName: parameterGroupName
            componentType: CONNECTION
            identifier: identifier
            synchronized: true
            comments: comments
            description: description
            inheritedParameterContexts:
            - inheritedParameterContexts
            - inheritedParameterContexts
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            groupIdentifier: groupIdentifier
            parameterProvider: parameterProvider
            parameters:
            - referencedAssets:
              - identifier: identifier
                name: name
              - identifier: identifier
                name: name
              provided: true
              name: name
              description: description
              sensitive: true
              value: value
            - referencedAssets:
              - identifier: identifier
                name: name
              - identifier: identifier
                name: name
              provided: true
              name: name
              description: description
              sensitive: true
              value: value
    VersionedFlowSnapshotMetadata:
      required:
      - author
      - bucketIdentifier
      - flowIdentifier
      type: object
      properties:
        author:
          minLength: 1
          type: string
          description: The user that created this snapshot of the flow.
          readOnly: true
        bucketIdentifier:
          minLength: 1
          type: string
          description: The identifier of the bucket this snapshot belongs to.
        comments:
          type: string
          description: The comments provided by the user when creating the snapshot.
        flowIdentifier:
          minLength: 1
          type: string
          description: The identifier of the flow this snapshot belongs to.
        link:
          $ref: '#/components/schemas/Link'
        timestamp:
          minimum: 1
          type: integer
          description: "The timestamp when the flow was saved, as milliseconds since\
            \ epoch."
          format: int64
          readOnly: true
        version:
          minimum: -1
          type: integer
          description: The version of this snapshot of the flow.
          format: int32
      example:
        flowIdentifier: flowIdentifier
        comments: comments
        author: author
        link:
          rel: rel
          params:
            key: params
          title: title
          type: type
          uri: http://example.com/aeiou
          uriBuilder: {}
          rels:
          - rels
          - rels
        bucketIdentifier: bucketIdentifier
        version: 0
        timestamp: 1
    VersionedFunnel:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: '#/components/schemas/Position'
      description: The Funnels
      example:
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        name: name
        instanceIdentifier: instanceIdentifier
        position: null
        groupIdentifier: groupIdentifier
    VersionedLabel:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        height:
          type: number
          description: The height of the label in pixels when at a 1:1 scale.
          format: double
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        label:
          type: string
          description: The text that appears in the label.
        name:
          type: string
          description: The component's name
        position:
          $ref: '#/components/schemas/Position'
        style:
          type: object
          additionalProperties:
            type: string
            description: "The styles for this label (font-size : 12px, background-color\
              \ : #eee, etc)."
          description: "The styles for this label (font-size : 12px, background-color\
            \ : #eee, etc)."
        width:
          type: number
          description: The width of the label in pixels when at a 1:1 scale.
          format: double
        zIndex:
          type: integer
          description: The z index of the connection.
          format: int64
      description: The Labels
      example:
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        name: name
        width: 3.616076749251911
        instanceIdentifier: instanceIdentifier
        style:
          key: style
        label: label
        position: null
        groupIdentifier: groupIdentifier
        height: 9.301444243932576
        zIndex: 2
    VersionedParameter:
      type: object
      properties:
        description:
          type: string
          description: The description of the param
        name:
          type: string
          description: The name of the parameter
        provided:
          type: boolean
          description: Whether or not the parameter value is provided by a ParameterProvider
        referencedAssets:
          type: array
          description: The assets that are referenced by this parameter
          items:
            $ref: '#/components/schemas/VersionedAsset'
        sensitive:
          type: boolean
          description: Whether or not the parameter value is sensitive
        value:
          type: string
          description: The value of the parameter
      description: The parameters in the context
      example:
        referencedAssets:
        - identifier: identifier
          name: name
        - identifier: identifier
          name: name
        provided: true
        name: name
        description: description
        sensitive: true
        value: value
    VersionedParameterContext:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        description:
          type: string
          description: The description of the parameter context
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inheritedParameterContexts:
          type: array
          description: The names of additional parameter contexts from which to inherit
            parameters
          items:
            type: string
            description: The names of additional parameter contexts from which to
              inherit parameters
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        parameterGroupName:
          type: string
          description: "The corresponding parameter group name fetched from the parameter\
            \ provider, if applicable"
        parameterProvider:
          type: string
          description: The identifier of an optional parameter provider
        parameters:
          uniqueItems: true
          type: array
          description: The parameters in the context
          items:
            $ref: '#/components/schemas/VersionedParameter'
        position:
          $ref: '#/components/schemas/Position'
        synchronized:
          type: boolean
          description: True if the parameter provider is set and the context should
            receive updates when its parameters are next fetched
      description: "The parameter contexts referenced by process groups in the flow\
        \ contents. The mapping is from the name of the context to the context instance,\
        \ and it is expected that any context in this map is referenced by at least\
        \ one process group in this flow."
      example:
        parameterGroupName: parameterGroupName
        componentType: CONNECTION
        identifier: identifier
        synchronized: true
        comments: comments
        description: description
        inheritedParameterContexts:
        - inheritedParameterContexts
        - inheritedParameterContexts
        name: name
        instanceIdentifier: instanceIdentifier
        position: null
        groupIdentifier: groupIdentifier
        parameterProvider: parameterProvider
        parameters:
        - referencedAssets:
          - identifier: identifier
            name: name
          - identifier: identifier
            name: name
          provided: true
          name: name
          description: description
          sensitive: true
          value: value
        - referencedAssets:
          - identifier: identifier
            name: name
          - identifier: identifier
            name: name
          provided: true
          name: name
          description: description
          sensitive: true
          value: value
    VersionedPort:
      type: object
      properties:
        allowRemoteAccess:
          type: boolean
          description: Whether or not this port allows remote access for site-to-site
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          description: The number of tasks that should be concurrently scheduled for
            the port.
          format: int32
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        portFunction:
          type: string
          description: Specifies how the Port should function
          enum:
          - STANDARD
          - FAILURE
        position:
          $ref: '#/components/schemas/Position'
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        type:
          type: string
          description: The type of port.
          enum:
          - INPUT_PORT
          - OUTPUT_PORT
      description: The Output Ports
      example:
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        allowRemoteAccess: true
        concurrentlySchedulableTaskCount: 7
        name: name
        instanceIdentifier: instanceIdentifier
        portFunction: STANDARD
        position: null
        groupIdentifier: groupIdentifier
        type: INPUT_PORT
        scheduledState: ENABLED
    VersionedProcessGroup:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        connections:
          uniqueItems: true
          type: array
          description: The Connections
          items:
            $ref: '#/components/schemas/VersionedConnection'
        controllerServices:
          uniqueItems: true
          type: array
          description: The Controller Services
          items:
            $ref: '#/components/schemas/VersionedControllerService'
        defaultBackPressureDataSizeThreshold:
          type: string
          description: Default value used in this Process Group for the maximum data
            size of objects that can be queued before back pressure is applied.
        defaultBackPressureObjectThreshold:
          type: integer
          description: Default value used in this Process Group for the maximum number
            of objects that can be queued before back pressure is applied.
          format: int64
        defaultFlowFileExpiration:
          type: string
          description: The default FlowFile Expiration for this Process Group.
        executionEngine:
          type: string
          description: The Execution Engine that should be used to run the components
            within the group.
          enum:
          - STANDARD
          - STATELESS
          - INHERITED
        flowFileConcurrency:
          type: string
          description: The configured FlowFile Concurrency for the Process Group
        flowFileOutboundPolicy:
          type: string
          description: The FlowFile Outbound Policy for the Process Group
        funnels:
          uniqueItems: true
          type: array
          description: The Funnels
          items:
            $ref: '#/components/schemas/VersionedFunnel'
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inputPorts:
          uniqueItems: true
          type: array
          description: The Input Ports
          items:
            $ref: '#/components/schemas/VersionedPort'
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        labels:
          uniqueItems: true
          type: array
          description: The Labels
          items:
            $ref: '#/components/schemas/VersionedLabel'
        logFileSuffix:
          type: string
          description: The log file suffix for this Process Group for dedicated logging.
        maxConcurrentTasks:
          type: integer
          description: The maximum number of concurrent tasks that should be scheduled
            for this Process Group when using the Stateless Engine
          format: int32
        name:
          type: string
          description: The component's name
        outputPorts:
          uniqueItems: true
          type: array
          description: The Output Ports
          items:
            $ref: '#/components/schemas/VersionedPort'
        parameterContextName:
          type: string
          description: The name of the parameter context used by this process group
        position:
          $ref: '#/components/schemas/Position'
        processGroups:
          uniqueItems: true
          type: array
          description: The child Process Groups
          items:
            $ref: '#/components/schemas/VersionedProcessGroup'
        processors:
          uniqueItems: true
          type: array
          description: The Processors
          items:
            $ref: '#/components/schemas/VersionedProcessor'
        remoteProcessGroups:
          uniqueItems: true
          type: array
          description: The Remote Process Groups
          items:
            $ref: '#/components/schemas/VersionedRemoteProcessGroup'
        scheduledState:
          type: string
          description: "The Scheduled State of the Process Group, if the group is\
            \ configured to use the Stateless Execution Engine. Otherwise, this value\
            \ has no relevance."
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        statelessFlowTimeout:
          type: string
          description: The maximum amount of time that the flow is allows to run using
            the Stateless engine before it times out and is considered a failure
        versionedFlowCoordinates:
          $ref: '#/components/schemas/VersionedFlowCoordinates'
      description: The contents of the versioned flow
      example:
        processors:
        - autoTerminatedRelationships:
          - autoTerminatedRelationships
          - autoTerminatedRelationships
          bulletinLevel: bulletinLevel
          executionNode: executionNode
          runDurationMillis: 1
          propertyDescriptors:
            key: null
          type: type
          scheduledState: ENABLED
          maxBackoffPeriod: maxBackoffPeriod
          yieldDuration: yieldDuration
          bundle: null
          retriedRelationships:
          - retriedRelationships
          - retriedRelationships
          annotationData: annotationData
          componentType: CONNECTION
          identifier: identifier
          comments: comments
          concurrentlySchedulableTaskCount: 7
          retryCount: 1
          penaltyDuration: penaltyDuration
          backoffMechanism: "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
          schedulingStrategy: schedulingStrategy
          name: name
          instanceIdentifier: instanceIdentifier
          schedulingPeriod: schedulingPeriod
          style:
            key: style
          position: null
          groupIdentifier: groupIdentifier
          properties:
            key: properties
        - autoTerminatedRelationships:
          - autoTerminatedRelationships
          - autoTerminatedRelationships
          bulletinLevel: bulletinLevel
          executionNode: executionNode
          runDurationMillis: 1
          propertyDescriptors:
            key: null
          type: type
          scheduledState: ENABLED
          maxBackoffPeriod: maxBackoffPeriod
          yieldDuration: yieldDuration
          bundle: null
          retriedRelationships:
          - retriedRelationships
          - retriedRelationships
          annotationData: annotationData
          componentType: CONNECTION
          identifier: identifier
          comments: comments
          concurrentlySchedulableTaskCount: 7
          retryCount: 1
          penaltyDuration: penaltyDuration
          backoffMechanism: "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
          schedulingStrategy: schedulingStrategy
          name: name
          instanceIdentifier: instanceIdentifier
          schedulingPeriod: schedulingPeriod
          style:
            key: style
          position: null
          groupIdentifier: groupIdentifier
          properties:
            key: properties
        scheduledState: ENABLED
        processGroups:
        - null
        - null
        outputPorts:
        - null
        - null
        funnels:
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
        versionedFlowCoordinates:
          registryId: registryId
          storageLocation: storageLocation
          bucketId: bucketId
          branch: branch
          flowId: flowId
          version: version
          latest: true
        connections:
        - componentType: CONNECTION
          identifier: identifier
          prioritizers:
          - prioritizers
          - prioritizers
          comments: comments
          flowFileExpiration: flowFileExpiration
          selectedRelationships:
          - selectedRelationships
          - selectedRelationships
          loadBalanceCompression: "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
          destination:
            comments: comments
            groupId: groupId
            name: name
            instanceIdentifier: instanceIdentifier
            id: id
            type: PROCESSOR
          backPressureDataSizeThreshold: backPressureDataSizeThreshold
          loadBalanceStrategy: "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN,\
            \ SINGLE_NODE"
          labelIndex: 5
          source: null
          bends:
          - x: 6.027456183070403
            "y": 1.4658129805029452
          - x: 6.027456183070403
            "y": 1.4658129805029452
          backPressureObjectThreshold: 0
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
          partitioningAttribute: partitioningAttribute
          zIndex: 5
        - componentType: CONNECTION
          identifier: identifier
          prioritizers:
          - prioritizers
          - prioritizers
          comments: comments
          flowFileExpiration: flowFileExpiration
          selectedRelationships:
          - selectedRelationships
          - selectedRelationships
          loadBalanceCompression: "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT"
          destination:
            comments: comments
            groupId: groupId
            name: name
            instanceIdentifier: instanceIdentifier
            id: id
            type: PROCESSOR
          backPressureDataSizeThreshold: backPressureDataSizeThreshold
          loadBalanceStrategy: "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN,\
            \ SINGLE_NODE"
          labelIndex: 5
          source: null
          bends:
          - x: 6.027456183070403
            "y": 1.4658129805029452
          - x: 6.027456183070403
            "y": 1.4658129805029452
          backPressureObjectThreshold: 0
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
          partitioningAttribute: partitioningAttribute
          zIndex: 5
        logFileSuffix: logFileSuffix
        parameterContextName: parameterContextName
        componentType: CONNECTION
        identifier: identifier
        defaultBackPressureObjectThreshold: 2
        comments: comments
        executionEngine: STANDARD
        defaultBackPressureDataSizeThreshold: defaultBackPressureDataSizeThreshold
        labels:
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          name: name
          width: 3.616076749251911
          instanceIdentifier: instanceIdentifier
          style:
            key: style
          label: label
          position: null
          groupIdentifier: groupIdentifier
          height: 9.301444243932576
          zIndex: 2
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          name: name
          width: 3.616076749251911
          instanceIdentifier: instanceIdentifier
          style:
            key: style
          label: label
          position: null
          groupIdentifier: groupIdentifier
          height: 9.301444243932576
          zIndex: 2
        controllerServices:
        - annotationData: annotationData
          componentType: CONNECTION
          identifier: identifier
          comments: comments
          bulletinLevel: bulletinLevel
          propertyDescriptors:
            key:
              resourceDefinition:
                resourceTypes:
                - FILE
                - FILE
                cardinality: SINGLE
              displayName: displayName
              identifiesControllerService: true
              name: name
              dynamic: true
              sensitive: true
          type: type
          scheduledState: ENABLED
          controllerServiceApis:
          - type: type
            bundle: null
          - type: type
            bundle: null
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
          bundle:
            artifact: artifact
            version: version
            group: group
          properties:
            key: properties
        - annotationData: annotationData
          componentType: CONNECTION
          identifier: identifier
          comments: comments
          bulletinLevel: bulletinLevel
          propertyDescriptors:
            key:
              resourceDefinition:
                resourceTypes:
                - FILE
                - FILE
                cardinality: SINGLE
              displayName: displayName
              identifiesControllerService: true
              name: name
              dynamic: true
              sensitive: true
          type: type
          scheduledState: ENABLED
          controllerServiceApis:
          - type: type
            bundle: null
          - type: type
            bundle: null
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          groupIdentifier: groupIdentifier
          bundle:
            artifact: artifact
            version: version
            group: group
          properties:
            key: properties
        defaultFlowFileExpiration: defaultFlowFileExpiration
        flowFileConcurrency: flowFileConcurrency
        flowFileOutboundPolicy: flowFileOutboundPolicy
        name: name
        inputPorts:
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 7
          name: name
          instanceIdentifier: instanceIdentifier
          portFunction: STANDARD
          position: null
          groupIdentifier: groupIdentifier
          type: INPUT_PORT
          scheduledState: ENABLED
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          allowRemoteAccess: true
          concurrentlySchedulableTaskCount: 7
          name: name
          instanceIdentifier: instanceIdentifier
          portFunction: STANDARD
          position: null
          groupIdentifier: groupIdentifier
          type: INPUT_PORT
          scheduledState: ENABLED
        instanceIdentifier: instanceIdentifier
        maxConcurrentTasks: 4
        position: null
        statelessFlowTimeout: statelessFlowTimeout
        groupIdentifier: groupIdentifier
        remoteProcessGroups:
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          proxyPassword: proxyPassword
          communicationsTimeout: communicationsTimeout
          proxyHost: proxyHost
          proxyPort: 7
          outputPorts:
          - null
          - null
          transportProtocol: "RAW, HTTP"
          name: name
          proxyUser: proxyUser
          inputPorts:
          - componentType: CONNECTION
            identifier: identifier
            remoteGroupId: remoteGroupId
            comments: comments
            targetId: targetId
            concurrentlySchedulableTaskCount: 6
            useCompression: true
            scheduledState: ENABLED
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            batchSize:
              duration: duration
              size: size
              count: 1
            groupIdentifier: groupIdentifier
          - componentType: CONNECTION
            identifier: identifier
            remoteGroupId: remoteGroupId
            comments: comments
            targetId: targetId
            concurrentlySchedulableTaskCount: 6
            useCompression: true
            scheduledState: ENABLED
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            batchSize:
              duration: duration
              size: size
              count: 1
            groupIdentifier: groupIdentifier
          targetUris: targetUris
          instanceIdentifier: instanceIdentifier
          yieldDuration: yieldDuration
          position: null
          groupIdentifier: groupIdentifier
          localNetworkInterface: localNetworkInterface
        - componentType: CONNECTION
          identifier: identifier
          comments: comments
          proxyPassword: proxyPassword
          communicationsTimeout: communicationsTimeout
          proxyHost: proxyHost
          proxyPort: 7
          outputPorts:
          - null
          - null
          transportProtocol: "RAW, HTTP"
          name: name
          proxyUser: proxyUser
          inputPorts:
          - componentType: CONNECTION
            identifier: identifier
            remoteGroupId: remoteGroupId
            comments: comments
            targetId: targetId
            concurrentlySchedulableTaskCount: 6
            useCompression: true
            scheduledState: ENABLED
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            batchSize:
              duration: duration
              size: size
              count: 1
            groupIdentifier: groupIdentifier
          - componentType: CONNECTION
            identifier: identifier
            remoteGroupId: remoteGroupId
            comments: comments
            targetId: targetId
            concurrentlySchedulableTaskCount: 6
            useCompression: true
            scheduledState: ENABLED
            name: name
            instanceIdentifier: instanceIdentifier
            position: null
            batchSize:
              duration: duration
              size: size
              count: 1
            groupIdentifier: groupIdentifier
          targetUris: targetUris
          instanceIdentifier: instanceIdentifier
          yieldDuration: yieldDuration
          position: null
          groupIdentifier: groupIdentifier
          localNetworkInterface: localNetworkInterface
    VersionedProcessor:
      type: object
      properties:
        annotationData:
          type: string
          description: The annotation data for the processor used to relay configuration
            between a custom UI and the procesosr.
        autoTerminatedRelationships:
          uniqueItems: true
          type: array
          description: "The names of all relationships that cause a flow file to be\
            \ terminated if the relationship is not connected elsewhere. This property\
            \ differs from the 'isAutoTerminate' property of the RelationshipDTO in\
            \ that the RelationshipDTO is meant to depict the current configuration,\
            \ whereas this property can be set in a DTO when updating a Processor\
            \ in order to change which Relationships should be auto-terminated."
          items:
            type: string
            description: "The names of all relationships that cause a flow file to\
              \ be terminated if the relationship is not connected elsewhere. This\
              \ property differs from the 'isAutoTerminate' property of the RelationshipDTO\
              \ in that the RelationshipDTO is meant to depict the current configuration,\
              \ whereas this property can be set in a DTO when updating a Processor\
              \ in order to change which Relationships should be auto-terminated."
        backoffMechanism:
          type: string
          description: Determines whether the FlowFile should be penalized or the
            processor should be yielded between retries.
          enum:
          - "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
        bulletinLevel:
          type: string
          description: The level at which the processor will report bulletins.
        bundle:
          $ref: '#/components/schemas/Bundle'
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          description: The number of tasks that should be concurrently schedule for
            the processor. If the processor doesn't allow parallol processing then
            any positive input will be ignored.
          format: int32
        executionNode:
          type: string
          description: Indicates the node where the process will execute.
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        maxBackoffPeriod:
          type: string
          description: Maximum amount of time to be waited during a retry period.
        name:
          type: string
          description: The component's name
        penaltyDuration:
          type: string
          description: The amout of time that is used when the process penalizes a
            flowfile.
        position:
          $ref: '#/components/schemas/Position'
        properties:
          type: object
          additionalProperties:
            type: string
            description: The properties for the component. Properties whose value
              is not set will only contain the property name.
          description: The properties for the component. Properties whose value is
            not set will only contain the property name.
        propertyDescriptors:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VersionedPropertyDescriptor'
          description: The property descriptors for the component.
        retriedRelationships:
          uniqueItems: true
          type: array
          description: All the relationships should be retried.
          items:
            type: string
            description: All the relationships should be retried.
        retryCount:
          type: integer
          description: Overall number of retries.
          format: int32
        runDurationMillis:
          type: integer
          description: The run duration for the processor in milliseconds.
          format: int64
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        schedulingPeriod:
          type: string
          description: The frequency with which to schedule the processor. The format
            of the value will depend on th value of schedulingStrategy.
        schedulingStrategy:
          type: string
          description: Indicates how the processor should be scheduled to run.
        style:
          type: object
          additionalProperties:
            type: string
            description: Stylistic data for rendering in a UI
          description: Stylistic data for rendering in a UI
        type:
          type: string
          description: The type of the extension component
        yieldDuration:
          type: string
          description: The amount of time that must elapse before this processor is
            scheduled again after yielding.
      description: The Processors
      example:
        autoTerminatedRelationships:
        - autoTerminatedRelationships
        - autoTerminatedRelationships
        bulletinLevel: bulletinLevel
        executionNode: executionNode
        runDurationMillis: 1
        propertyDescriptors:
          key: null
        type: type
        scheduledState: ENABLED
        maxBackoffPeriod: maxBackoffPeriod
        yieldDuration: yieldDuration
        bundle: null
        retriedRelationships:
        - retriedRelationships
        - retriedRelationships
        annotationData: annotationData
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        concurrentlySchedulableTaskCount: 7
        retryCount: 1
        penaltyDuration: penaltyDuration
        backoffMechanism: "PENALIZE_FLOWFILE, YIELD_PROCESSOR"
        schedulingStrategy: schedulingStrategy
        name: name
        instanceIdentifier: instanceIdentifier
        schedulingPeriod: schedulingPeriod
        style:
          key: style
        position: null
        groupIdentifier: groupIdentifier
        properties:
          key: properties
    VersionedPropertyDescriptor:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the property
        dynamic:
          type: boolean
          description: Whether or not the property is user-defined
        identifiesControllerService:
          type: boolean
          description: Whether or not the property provides the identifier of a Controller
            Service
        name:
          type: string
          description: The name of the property
        resourceDefinition:
          $ref: '#/components/schemas/VersionedResourceDefinition'
        sensitive:
          type: boolean
          description: Whether or not the property is considered sensitive
      description: The property descriptors for the component.
      example:
        resourceDefinition:
          resourceTypes:
          - FILE
          - FILE
          cardinality: SINGLE
        displayName: displayName
        identifiesControllerService: true
        name: name
        dynamic: true
        sensitive: true
    VersionedRemoteGroupPort:
      type: object
      properties:
        batchSize:
          $ref: '#/components/schemas/BatchSize'
        comments:
          type: string
          description: The user-supplied comments for the component
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        concurrentlySchedulableTaskCount:
          type: integer
          description: The number of task that may transmit flowfiles to the target
            port concurrently.
          format: int32
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        name:
          type: string
          description: The component's name
        position:
          $ref: '#/components/schemas/Position'
        remoteGroupId:
          type: string
          description: The id of the remote process group that the port resides in.
        scheduledState:
          type: string
          description: The scheduled state of the component
          enum:
          - ENABLED
          - DISABLED
          - RUNNING
        targetId:
          type: string
          description: The ID of the port on the target NiFi instance
        useCompression:
          type: boolean
          description: Whether the flowfiles are compressed when sent to the target
            port.
      description: "A Set of Output Ports that can be connected to, in order to pull\
        \ data from the remote NiFi instance"
      example:
        componentType: CONNECTION
        identifier: identifier
        remoteGroupId: remoteGroupId
        comments: comments
        targetId: targetId
        concurrentlySchedulableTaskCount: 6
        useCompression: true
        scheduledState: ENABLED
        name: name
        instanceIdentifier: instanceIdentifier
        position: null
        batchSize:
          duration: duration
          size: size
          count: 1
        groupIdentifier: groupIdentifier
    VersionedRemoteProcessGroup:
      type: object
      properties:
        comments:
          type: string
          description: The user-supplied comments for the component
        communicationsTimeout:
          type: string
          description: The time period used for the timeout when communicating with
            the target.
        componentType:
          type: string
          enum:
          - CONNECTION
          - PROCESSOR
          - PROCESS_GROUP
          - REMOTE_PROCESS_GROUP
          - INPUT_PORT
          - OUTPUT_PORT
          - REMOTE_INPUT_PORT
          - REMOTE_OUTPUT_PORT
          - FUNNEL
          - LABEL
          - CONTROLLER_SERVICE
          - REPORTING_TASK
          - FLOW_ANALYSIS_RULE
          - PARAMETER_CONTEXT
          - PARAMETER_PROVIDER
          - FLOW_REGISTRY_CLIENT
        groupIdentifier:
          type: string
          description: The ID of the Process Group that this component belongs to
        identifier:
          type: string
          description: The component's unique identifier
        inputPorts:
          uniqueItems: true
          type: array
          description: "A Set of Input Ports that can be connected to, in order to\
            \ send data to the remote NiFi instance"
          items:
            $ref: '#/components/schemas/VersionedRemoteGroupPort'
        instanceIdentifier:
          type: string
          description: "The instance ID of an existing component that is described\
            \ by this VersionedComponent, or null if this is not mapped to an instantiated\
            \ component"
        localNetworkInterface:
          type: string
          description: "The local network interface to send/receive data. If not specified,\
            \ any local address is used. If clustered, all nodes must have an interface\
            \ with this identifier."
        name:
          type: string
          description: The component's name
        outputPorts:
          uniqueItems: true
          type: array
          description: "A Set of Output Ports that can be connected to, in order to\
            \ pull data from the remote NiFi instance"
          items:
            $ref: '#/components/schemas/VersionedRemoteGroupPort'
        position:
          $ref: '#/components/schemas/Position'
        proxyHost:
          type: string
        proxyPassword:
          type: string
        proxyPort:
          type: integer
          format: int32
        proxyUser:
          type: string
        targetUris:
          type: string
          description: "The target URIs of the remote process group. If target uris\
            \ is not set but target uri is set, then returns the single target uri.\
            \ If neither target uris nor target uri is set, then returns null."
        transportProtocol:
          type: string
          description: The Transport Protocol that is used for Site-to-Site communications
          enum:
          - "RAW, HTTP"
        yieldDuration:
          type: string
          description: "When yielding, this amount of time must elapse before the\
            \ remote process group is scheduled again."
      description: The Remote Process Groups
      example:
        componentType: CONNECTION
        identifier: identifier
        comments: comments
        proxyPassword: proxyPassword
        communicationsTimeout: communicationsTimeout
        proxyHost: proxyHost
        proxyPort: 7
        outputPorts:
        - null
        - null
        transportProtocol: "RAW, HTTP"
        name: name
        proxyUser: proxyUser
        inputPorts:
        - componentType: CONNECTION
          identifier: identifier
          remoteGroupId: remoteGroupId
          comments: comments
          targetId: targetId
          concurrentlySchedulableTaskCount: 6
          useCompression: true
          scheduledState: ENABLED
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          batchSize:
            duration: duration
            size: size
            count: 1
          groupIdentifier: groupIdentifier
        - componentType: CONNECTION
          identifier: identifier
          remoteGroupId: remoteGroupId
          comments: comments
          targetId: targetId
          concurrentlySchedulableTaskCount: 6
          useCompression: true
          scheduledState: ENABLED
          name: name
          instanceIdentifier: instanceIdentifier
          position: null
          batchSize:
            duration: duration
            size: size
            count: 1
          groupIdentifier: groupIdentifier
        targetUris: targetUris
        instanceIdentifier: instanceIdentifier
        yieldDuration: yieldDuration
        position: null
        groupIdentifier: groupIdentifier
        localNetworkInterface: localNetworkInterface
    VersionedResourceDefinition:
      type: object
      properties:
        cardinality:
          type: string
          description: The cardinality of the resource
          enum:
          - SINGLE
          - MULTIPLE
        resourceTypes:
          uniqueItems: true
          type: array
          description: The types of resource that the Property Descriptor is allowed
            to reference
          items:
            type: string
            description: The types of resource that the Property Descriptor is allowed
              to reference
            enum:
            - FILE
            - DIRECTORY
            - TEXT
            - URL
      description: "Returns the Resource Definition that defines which type(s) of\
        \ resource(s) this property references, if any"
      example:
        resourceTypes:
        - FILE
        - FILE
        cardinality: SINGLE
    bundles_bundleType_body:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/FormDataContentDisposition'
        sha256:
          type: string
