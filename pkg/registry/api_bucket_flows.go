
/*
 * Apache NiFi Registry REST API
 *
 * REST API definition for Apache NiFi Registry web services
 *
 * API version: 2.0.0-M2
 * Contact: dev@nifi.apache.org
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package registry

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type BucketFlowsApiService service
/*
BucketFlowsApiService Create flow
Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The details of the flow to create.
 * @param bucketId The bucket identifier
@return VersionedFlow
*/
func (a *BucketFlowsApiService) CreateFlow(ctx context.Context, body VersionedFlow, bucketId string) (VersionedFlow, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlow
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlow
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Create flow version
Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The new versioned flow snapshot.
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param optional nil or *BucketFlowsApiCreateFlowVersionOpts - Optional Parameters:
     * @param "PreserveSourceProperties" (optional.Bool) -  Whether source properties like author should be kept
@return VersionedFlowSnapshot
*/

type BucketFlowsApiCreateFlowVersionOpts struct {
    PreserveSourceProperties optional.Bool
}

func (a *BucketFlowsApiService) CreateFlowVersion(ctx context.Context, body VersionedFlowSnapshot, bucketId string, flowId string, localVarOptionals *BucketFlowsApiCreateFlowVersionOpts) (VersionedFlowSnapshot, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowSnapshot
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PreserveSourceProperties.IsSet() {
		localVarQueryParams.Add("preserveSourceProperties", parameterToString(localVarOptionals.PreserveSourceProperties.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"*/*"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshot
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Delete bucket flow
Deletes a flow, including all saved versions of that flow.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version The version is used to verify the client is working with the latest version of the entity.
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param optional nil or *BucketFlowsApiDeleteFlowOpts - Optional Parameters:
     * @param "ClientId" (optional.Interface of ClientIdParameter) -  If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
@return VersionedFlow
*/

type BucketFlowsApiDeleteFlowOpts struct {
    ClientId optional.Interface
}

func (a *BucketFlowsApiService) DeleteFlow(ctx context.Context, version LongParameter, bucketId string, flowId string, localVarOptionals *BucketFlowsApiDeleteFlowOpts) (VersionedFlow, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlow
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("version", parameterToString(version, ""))
	if localVarOptionals != nil && localVarOptionals.ClientId.IsSet() {
		localVarQueryParams.Add("clientId", parameterToString(localVarOptionals.ClientId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlow
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Exports specified bucket flow version content
Exports the specified version of a flow, including the metadata and content of the flow.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param versionNumber The version number
@return VersionedFlowSnapshot
*/
func (a *BucketFlowsApiService) ExportVersionedFlow(ctx context.Context, bucketId string, flowId string, versionNumber int32) (VersionedFlowSnapshot, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowSnapshot
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionNumber"+"}", fmt.Sprintf("%v", versionNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshot
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get bucket flow
Retrieves the flow with the given id in the given bucket.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
@return VersionedFlow
*/
func (a *BucketFlowsApiService) GetFlow(ctx context.Context, bucketId string, flowId string) (VersionedFlow, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlow
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlow
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get bucket flow diff
Computes the differences between two given versions of a flow.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param versionA The first version number
 * @param versionB The second version number
@return VersionedFlowDifference
*/
func (a *BucketFlowsApiService) GetFlowDiff(ctx context.Context, bucketId string, flowId string, versionA int32, versionB int32) (VersionedFlowDifference, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowDifference
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionA"+"}", fmt.Sprintf("%v", versionA), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionB"+"}", fmt.Sprintf("%v", versionB), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowDifference
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get bucket flow version
Gets the given version of a flow, including the metadata and content for the version.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param versionNumber The version number
@return VersionedFlowSnapshot
*/
func (a *BucketFlowsApiService) GetFlowVersion(ctx context.Context, bucketId string, flowId string, versionNumber int32) (VersionedFlowSnapshot, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowSnapshot
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionNumber"+"}", fmt.Sprintf("%v", versionNumber), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshot
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get bucket flow versions
Gets summary information for all versions of a flow. Versions are ordered newest-&gt;oldest.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
@return []VersionedFlowSnapshotMetadata
*/
func (a *BucketFlowsApiService) GetFlowVersions(ctx context.Context, bucketId string, flowId string) ([]VersionedFlowSnapshotMetadata, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []VersionedFlowSnapshotMetadata
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v []VersionedFlowSnapshotMetadata
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get bucket flows
Retrieves all flows in the given bucket.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
@return []VersionedFlow
*/
func (a *BucketFlowsApiService) GetFlows(ctx context.Context, bucketId string) ([]VersionedFlow, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []VersionedFlow
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v []VersionedFlow
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get latest bucket flow version content
Gets the latest version of a flow, including the metadata and content of the flow.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
@return VersionedFlowSnapshot
*/
func (a *BucketFlowsApiService) GetLatestFlowVersion(ctx context.Context, bucketId string, flowId string) (VersionedFlowSnapshot, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowSnapshot
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshot
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Get latest bucket flow version metadata
Gets the metadata for the latest version of a flow.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
@return VersionedFlowSnapshotMetadata
*/
func (a *BucketFlowsApiService) GetLatestFlowVersionMetadata(ctx context.Context, bucketId string, flowId string) (VersionedFlowSnapshotMetadata, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlowSnapshotMetadata
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions/latest/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshotMetadata
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Import flow version
Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
 * @param optional nil or *BucketFlowsApiImportVersionedFlowOpts - Optional Parameters:
     * @param "Body" (optional.Interface of VersionedFlowSnapshot) -  file
     * @param "Comments" (optional.String) - 

*/

type BucketFlowsApiImportVersionedFlowOpts struct {
    Body optional.Interface
    Comments optional.String
}

func (a *BucketFlowsApiService) ImportVersionedFlow(ctx context.Context, bucketId string, flowId string, localVarOptionals *BucketFlowsApiImportVersionedFlowOpts) (*http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}/versions/import"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Comments.IsSet() {
		localVarHeaderParams["Comments"] = parameterToString(localVarOptionals.Comments.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlowSnapshot
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarHttpResponse, &localStringBody, newErr
		}
		return localVarHttpResponse, &localStringBody, newErr
	}

	return localVarHttpResponse, &localStringBody, nil
}
/*
BucketFlowsApiService Update bucket flow
Updates the flow with the given id in the given bucket.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body The updated flow
 * @param bucketId The bucket identifier
 * @param flowId The flow identifier
@return VersionedFlow
*/
func (a *BucketFlowsApiService) UpdateFlow(ctx context.Context, body VersionedFlow, bucketId string, flowId string) (VersionedFlow, *http.Response, *string, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue VersionedFlow
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/buckets/{bucketId}/flows/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bucketId"+"}", fmt.Sprintf("%v", bucketId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", fmt.Sprintf("%v", flowId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, nil, err
	}

	localStringBody := string(localVarBody)

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, &localStringBody, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v VersionedFlow
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
		}
		return localVarReturnValue, localVarHttpResponse, &localStringBody, newErr
	}

	return localVarReturnValue, localVarHttpResponse, &localStringBody, nil
}
