/*
 * Apache NiFi REST API
 *
 * REST API definition for Apache NiFi web services
 *
 * API version: 2.0.0
 * Contact: dev@nifi.apache.org
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package nifi

// Processors provided in this bundle
type ProcessorDefinition struct {
	// The group name of the bundle that provides the referenced type.
	Group string `json:"group,omitempty"`
	// The artifact name of the bundle that provides the referenced type.
	Artifact string `json:"artifact,omitempty"`
	// The version of the bundle that provides the referenced type.
	Version string `json:"version,omitempty"`
	// The fully-qualified class type
	Type_ string `json:"type,omitempty"`
	// The description of the type.
	TypeDescription string `json:"typeDescription,omitempty"`
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`
	// If this type represents a provider for an interface, this lists the APIs it implements
	ProvidedApiImplementations []DefinedType `json:"providedApiImplementations,omitempty"`
	// The tags associated with this type
	Tags []string `json:"tags,omitempty"`
	// The names of other component types that may be related
	SeeAlso []string `json:"seeAlso,omitempty"`
	// Whether or not the component has been deprecated
	Deprecated bool `json:"deprecated,omitempty"`
	// If this component has been deprecated, this optional field can be used to provide an explanation
	DeprecationReason string `json:"deprecationReason,omitempty"`
	// If this component has been deprecated, this optional field provides alternatives to use
	DeprecationAlternatives []string `json:"deprecationAlternatives,omitempty"`
	// Whether or not the component has a general restriction
	Restricted bool `json:"restricted,omitempty"`
	// An optional description of the general restriction
	RestrictedExplanation string `json:"restrictedExplanation,omitempty"`
	// Explicit restrictions that indicate a require permission to use the component
	ExplicitRestrictions []Restriction `json:"explicitRestrictions,omitempty"`
	Stateful *Stateful `json:"stateful,omitempty"`
	// The system resource considerations for the given component
	SystemResourceConsiderations []SystemResourceConsideration `json:"systemResourceConsiderations,omitempty"`
	// Indicates if the component has additional details documentation
	AdditionalDetails bool `json:"additionalDetails,omitempty"`
	// Descriptions of configuration properties applicable to this component.
	PropertyDescriptors map[string]PropertyDescriptor `json:"propertyDescriptors,omitempty"`
	// Whether or not this component makes use of dynamic (user-set) properties.
	SupportsDynamicProperties bool `json:"supportsDynamicProperties,omitempty"`
	// Whether or not this component makes use of sensitive dynamic (user-set) properties.
	SupportsSensitiveDynamicProperties bool `json:"supportsSensitiveDynamicProperties,omitempty"`
	// Describes the dynamic properties supported by this component
	DynamicProperties []DynamicProperty `json:"dynamicProperties,omitempty"`
	// Any input requirements this processor has.
	InputRequirement string `json:"inputRequirement,omitempty"`
	// The supported relationships for this processor.
	SupportedRelationships []Relationship `json:"supportedRelationships,omitempty"`
	// Whether or not this processor supports dynamic relationships.
	SupportsDynamicRelationships bool `json:"supportsDynamicRelationships,omitempty"`
	DynamicRelationship *DynamicRelationship `json:"dynamicRelationship,omitempty"`
	// Whether or not this processor should be triggered serially (i.e. no concurrent execution).
	TriggerSerially bool `json:"triggerSerially,omitempty"`
	// Whether or not this processor should be triggered when incoming queues are empty.
	TriggerWhenEmpty bool `json:"triggerWhenEmpty,omitempty"`
	// Whether or not this processor should be triggered when any destination queue has room.
	TriggerWhenAnyDestinationAvailable bool `json:"triggerWhenAnyDestinationAvailable,omitempty"`
	// Whether or not this processor supports batching. If a Processor uses this annotation, it allows the Framework to batch calls to session commits, as well as allowing the Framework to return the same session multiple times.
	SupportsBatching bool `json:"supportsBatching,omitempty"`
	// Whether or not this processor should be scheduled only on the primary node in a cluster.
	PrimaryNodeOnly bool `json:"primaryNodeOnly,omitempty"`
	// Whether or not this processor is considered side-effect free. Side-effect free indicate that the processor's operations on FlowFiles can be safely repeated across process sessions.
	SideEffectFree bool `json:"sideEffectFree,omitempty"`
	// The supported scheduling strategies, such as TIME_DRIVER, CRON, or EVENT_DRIVEN.
	SupportedSchedulingStrategies []string `json:"supportedSchedulingStrategies,omitempty"`
	// The default scheduling strategy for the processor.
	DefaultSchedulingStrategy string `json:"defaultSchedulingStrategy,omitempty"`
	// The default concurrent tasks for each scheduling strategy.
	DefaultConcurrentTasksBySchedulingStrategy map[string]int32 `json:"defaultConcurrentTasksBySchedulingStrategy,omitempty"`
	// The default scheduling period for each scheduling strategy. The scheduling period is expected to be a time period, such as \"30 sec\".
	DefaultSchedulingPeriodBySchedulingStrategy map[string]string `json:"defaultSchedulingPeriodBySchedulingStrategy,omitempty"`
	// The default penalty duration as a time period, such as \"30 sec\".
	DefaultPenaltyDuration string `json:"defaultPenaltyDuration,omitempty"`
	// The default yield duration as a time period, such as \"1 sec\".
	DefaultYieldDuration string `json:"defaultYieldDuration,omitempty"`
	// The default bulletin level, such as WARN, INFO, DEBUG, etc.
	DefaultBulletinLevel string `json:"defaultBulletinLevel,omitempty"`
	// The FlowFile attributes this processor reads
	ReadsAttributes []Attribute `json:"readsAttributes,omitempty"`
	// The FlowFile attributes this processor writes/updates
	WritesAttributes []Attribute `json:"writesAttributes,omitempty"`
	// A list of use cases that have been documented for this Processor
	UseCases []UseCase `json:"useCases,omitempty"`
	// A list of use cases that have been documented that involve this Processor in conjunction with other Processors
	MultiProcessorUseCases []MultiProcessorUseCase `json:"multiProcessorUseCases,omitempty"`
}
