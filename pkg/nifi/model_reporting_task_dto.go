/*
 * Apache NiFi REST API
 *
 * REST API definition for Apache NiFi web services
 *
 * API version: 2.6.0
 * Contact: dev@nifi.apache.org
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package nifi

type ReportingTaskDto struct {
	// The number of active threads for the reporting task.
	ActiveThreadCount int32 `json:"activeThreadCount,omitempty"`
	// The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
	AnnotationData string `json:"annotationData,omitempty"`
	Bundle *BundleDto `json:"bundle,omitempty"`
	// The comments of the reporting task.
	Comments string `json:"comments,omitempty"`
	// The URL for the custom configuration UI for the reporting task.
	CustomUiUrl string `json:"customUiUrl,omitempty"`
	// The default scheduling period for the different scheduling strategies.
	DefaultSchedulingPeriod map[string]string `json:"defaultSchedulingPeriod,omitempty"`
	// Whether the reporting task has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`
	// The descriptors for the reporting tasks properties.
	Descriptors map[string]PropertyDescriptorDto `json:"descriptors,omitempty"`
	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`
	// The id of the component.
	Id string `json:"id,omitempty"`
	// Whether the reporting task has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`
	// The name of the reporting task.
	Name string `json:"name,omitempty"`
	// The id of parent process group of this component if applicable.
	ParentGroupId string `json:"parentGroupId,omitempty"`
	// Whether the reporting task persists state.
	PersistsState bool `json:"persistsState,omitempty"`
	Position *PositionDto `json:"position,omitempty"`
	// The properties of the reporting task.
	Properties map[string]string `json:"properties,omitempty"`
	// Whether the reporting task requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`
	// The frequency with which to schedule the reporting task. The format of the value will depend on the value of the schedulingStrategy.
	SchedulingPeriod string `json:"schedulingPeriod,omitempty"`
	// The scheduling strategy that determines how the schedulingPeriod value should be interpreted.
	SchedulingStrategy string `json:"schedulingStrategy,omitempty"`
	// Set of sensitive dynamic property names
	SensitiveDynamicPropertyNames []string `json:"sensitiveDynamicPropertyNames,omitempty"`
	// The state of the reporting task.
	State string `json:"state,omitempty"`
	// Whether the reporting task supports sensitive dynamic properties.
	SupportsSensitiveDynamicProperties bool `json:"supportsSensitiveDynamicProperties,omitempty"`
	// The fully qualified type of the reporting task.
	Type_ string `json:"type,omitempty"`
	// Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
	ValidationErrors []string `json:"validationErrors,omitempty"`
	// Indicates whether the Reporting Task is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Reporting Task is valid)
	ValidationStatus string `json:"validationStatus,omitempty"`
	// The ID of the corresponding component that is under version control
	VersionedComponentId string `json:"versionedComponentId,omitempty"`
}
