/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.24.0
 * Contact: dev@nifi.apache.org
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package nifi

type ParameterProviderDto struct {
	// The id of the component.
	Id string `json:"id,omitempty"`
	// The ID of the corresponding component that is under version control
	VersionedComponentId string `json:"versionedComponentId,omitempty"`
	// The id of parent process group of this component if applicable.
	ParentGroupId string `json:"parentGroupId,omitempty"`
	// The position of this component in the UI if applicable.
	Position *PositionDto `json:"position,omitempty"`
	// The name of the parameter provider.
	Name string `json:"name,omitempty"`
	// The fully qualified type of the parameter provider.
	Type_ string `json:"type,omitempty"`
	// The details of the artifact that bundled this parameter provider type.
	Bundle *BundleDto `json:"bundle,omitempty"`
	// The comments of the parameter provider.
	Comments string `json:"comments,omitempty"`
	// Whether the parameter provider persists state.
	PersistsState bool `json:"persistsState,omitempty"`
	// Whether the parameter provider requires elevated privileges.
	Restricted bool `json:"restricted,omitempty"`
	// Whether the parameter provider has been deprecated.
	Deprecated bool `json:"deprecated,omitempty"`
	// Whether the parameter provider has multiple versions available.
	MultipleVersionsAvailable bool `json:"multipleVersionsAvailable,omitempty"`
	// The properties of the parameter provider.
	Properties map[string]string `json:"properties,omitempty"`
	// The descriptors for the parameter providers properties.
	Descriptors map[string]PropertyDescriptorDto `json:"descriptors,omitempty"`
	// Configuration for any fetched parameter groups.
	ParameterGroupConfigurations []ParameterGroupConfigurationEntity `json:"parameterGroupConfigurations,omitempty"`
	// The set of all components in the flow that are referencing Parameters provided by this provider
	AffectedComponents []AffectedComponentEntity `json:"affectedComponents,omitempty"`
	// The status of all provided parameters for this parameter provider
	ParameterStatus []ParameterStatusDto `json:"parameterStatus,omitempty"`
	// The Parameter Contexts that reference this Parameter Provider
	ReferencingParameterContexts []ParameterProviderReferencingComponentEntity `json:"referencingParameterContexts,omitempty"`
	// The URL for the custom configuration UI for the parameter provider.
	CustomUiUrl string `json:"customUiUrl,omitempty"`
	// The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.
	AnnotationData string `json:"annotationData,omitempty"`
	// Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.
	ValidationErrors []string `json:"validationErrors,omitempty"`
	// Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)
	ValidationStatus string `json:"validationStatus,omitempty"`
	// Whether the underlying extension is missing.
	ExtensionMissing bool `json:"extensionMissing,omitempty"`
}
