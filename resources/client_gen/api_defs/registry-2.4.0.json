{
  "openapi" : "3.0.1",
  "info" : {
    "contact" : {
      "email" : "dev@nifi.apache.org",
      "url" : "https://nifi.apache.org"
    },
    "description" : "REST API definition for Apache NiFi Registry web services",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title" : "Apache NiFi Registry REST API",
    "version" : "2.4.0"
  },
  "paths" : {
    "/about" : {
      "get" : {
        "description" : "Gets the NiFi Registry version.",
        "operationId" : "getVersion",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryAbout"
                }
              }
            }
          }
        },
        "summary" : "Get version",
        "tags" : [ "About" ]
      }
    },
    "/access" : {
      "get" : {
        "description" : "Returns the current client's authenticated identity and permissions to top-level resources",
        "operationId" : "getAccessStatus",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentUser"
                }
              }
            }
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might be running unsecured."
          }
        },
        "summary" : "Get access status",
        "tags" : [ "Access" ]
      }
    },
    "/access/logout" : {
      "delete" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "logout",
        "responses" : {
          "200" : {
            "description" : "User was logged out successfully."
          },
          "401" : {
            "description" : "Authentication token provided was empty or not in the correct JWT format."
          },
          "500" : {
            "description" : "Client failed to log out."
          }
        },
        "summary" : "Performs a logout for other providers that have been issued a JWT.",
        "tags" : [ "Access" ]
      }
    },
    "/access/logout/complete" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "logoutComplete",
        "responses" : {
          "200" : {
            "description" : "User was logged out successfully."
          },
          "401" : {
            "description" : "Authentication token provided was empty or not in the correct JWT format."
          },
          "500" : {
            "description" : "Client failed to log out."
          }
        },
        "summary" : "Completes the logout sequence.",
        "tags" : [ "Access" ]
      }
    },
    "/access/oidc/callback" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "oidcCallback",
        "responses" : {
          "200" : {
            "content" : {
              "*/*" : { }
            },
            "description" : "default response"
          }
        },
        "summary" : "Redirect/callback URI for processing the result of the OpenId Connect login sequence.",
        "tags" : [ "Access" ]
      }
    },
    "/access/oidc/exchange" : {
      "post" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "oidcExchange",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : { }
            },
            "description" : "default response"
          }
        },
        "summary" : "Retrieves a JWT following a successful login sequence using the configured OpenId Connect provider.",
        "tags" : [ "Access" ]
      }
    },
    "/access/oidc/logout" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "oidcLogout",
        "responses" : {
          "200" : {
            "content" : {
              "*/*" : { }
            },
            "description" : "default response"
          }
        },
        "summary" : "Performs a logout in the OpenId Provider.",
        "tags" : [ "Access" ]
      }
    },
    "/access/oidc/logout/callback" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "oidcLogoutCallback",
        "responses" : {
          "200" : {
            "content" : {
              "*/*" : { }
            },
            "description" : "default response"
          }
        },
        "summary" : "Redirect/callback URI for processing the result of the OpenId Connect logout sequence.",
        "tags" : [ "Access" ]
      }
    },
    "/access/oidc/request" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "oidcRequest",
        "responses" : {
          "200" : {
            "content" : {
              "*/*" : { }
            },
            "description" : "default response"
          }
        },
        "summary" : "Initiates a request to authenticate through the configured OpenId Connect provider.",
        "tags" : [ "Access" ]
      }
    },
    "/access/token" : {
      "post" : {
        "description" : "Creates a token for accessing the REST API via auto-detected method of verifying client identity claim credentials. The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenByTryingAllProviders",
        "responses" : {
          "201" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with username/password."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Create token trying all providers",
        "tags" : [ "Access" ]
      }
    },
    "/access/token/identity-provider" : {
      "post" : {
        "description" : "Creates a token for accessing the REST API via a custom identity provider. The user credentials must be passed in a format understood by the custom identity provider, e.g., a third-party auth token in an HTTP header. The exact format of the user credentials expected by the custom identity provider can be discovered by 'GET /access/token/identity-provider/usage'. The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingIdentityProviderCredentials",
        "responses" : {
          "201" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Create token using identity provider",
        "tags" : [ "Access" ]
      }
    },
    "/access/token/identity-provider/test" : {
      "post" : {
        "description" : "Tests the format of the credentials against this identity provider without preforming authentication on the credentials to validate them. The user credentials should be passed in a format understood by the custom identity provider as defined by 'GET /access/token/identity-provider/usage'.",
        "operationId" : "testIdentityProviderRecognizesCredentialsFormat",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "The format of the credentials were not recognized by the currently configured identity provider."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Test identity provider",
        "tags" : [ "Access" ]
      }
    },
    "/access/token/identity-provider/usage" : {
      "get" : {
        "description" : "Provides a description of how the currently configured identity provider expects credentials to be passed to POST /access/token/identity-provider",
        "operationId" : "getIdentityProviderUsageInstructions",
        "responses" : {
          "200" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Get identity provider usage",
        "tags" : [ "Access" ]
      }
    },
    "/access/token/kerberos" : {
      "post" : {
        "description" : "Creates a token for accessing the REST API via Kerberos Service Tickets or SPNEGO Tokens (which includes Kerberos Service Tickets). The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingKerberosTicket",
        "responses" : {
          "201" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login Kerberos credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Create token using kerberos",
        "tags" : [ "Access" ]
      }
    },
    "/access/token/login" : {
      "post" : {
        "description" : "Creates a token for accessing the REST API via username/password. The user credentials must be passed in standard HTTP Basic Auth format. That is: 'Authorization: Basic <credentials>', where <credentials> is the base64 encoded value of '<username>:<password>'. The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingBasicAuthCredentials",
        "responses" : {
          "201" : {
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with username/password."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "summary" : "Create token using basic auth",
        "tags" : [ "Access" ]
      }
    },
    "/buckets" : {
      "get" : {
        "description" : "The returned list will include only buckets for which the user is authorized.If the user is not authorized for any buckets, this returns an empty list.",
        "operationId" : "getBuckets",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bucket"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "summary" : "Get all buckets",
        "tags" : [ "Buckets" ]
      },
      "post" : {
        "operationId" : "createBucket",
        "parameters" : [ {
          "description" : "Whether source properties like identifier should be kept",
          "in" : "query",
          "name" : "preserveSourceProperties",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Bucket"
              }
            }
          },
          "description" : "The bucket to create",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bucket"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          }
        },
        "summary" : "Create bucket",
        "tags" : [ "Buckets" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets"
        }
      }
    },
    "/buckets/fields" : {
      "get" : {
        "description" : "Retrieves bucket field names for searching or sorting on buckets.",
        "operationId" : "getAvailableBucketFields",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fields"
                }
              }
            }
          }
        },
        "summary" : "Get bucket fields",
        "tags" : [ "Buckets" ]
      }
    },
    "/buckets/{bucketId}" : {
      "delete" : {
        "description" : "Deletes the bucket with the given id, along with all objects stored in the bucket",
        "operationId" : "deleteBucket",
        "parameters" : [ {
          "description" : "The version is used to verify the client is working with the latest version of the entity.",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LongParameter"
          }
        }, {
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "in" : "query",
          "name" : "clientId",
          "schema" : {
            "$ref" : "#/components/schemas/ClientIdParameter"
          }
        }, {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bucket"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "summary" : "Delete bucket",
        "tags" : [ "Buckets" ],
        "x-access-policy" : {
          "action" : "delete",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "get" : {
        "description" : "Gets the bucket with the given id.",
        "operationId" : "getBucket",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bucket"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "summary" : "Get bucket",
        "tags" : [ "Buckets" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "put" : {
        "description" : "Updates the bucket with the given id.",
        "operationId" : "updateBucket",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Bucket"
              }
            }
          },
          "description" : "The updated bucket",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bucket"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Update bucket",
        "tags" : [ "Buckets" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/bundles" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionBundles",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bundle"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension bundles by bucket",
        "tags" : [ "BucketBundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/bundles/{bundleType}" : {
      "post" : {
        "description" : "Creates a version of an extension bundle by uploading a binary artifact. If an extension bundle already exists in the given bucket with the same group id and artifact id as that of the bundle being uploaded, then it will be added as a new version to the existing bundle. If an extension bundle does not already exist in the given bucket with the same group id and artifact id, then a new extension bundle will be created and this version will be added to the new bundle. Client's may optionally supply a SHA-256 in hex format through the multi-part form field 'sha256'. If supplied, then this value will be compared against the SHA-256 computed by the server, and the bundle will be rejected if the values do not match. If not supplied, the bundle will be accepted, but will be marked to indicate that the client did not supply a SHA-256 during creation. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "createExtensionBundleVersion",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The type of the bundle",
          "in" : "path",
          "name" : "bundleType",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "NIFI_NAR", "MINIFI_CPP" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "$ref" : "#/components/schemas/FormDataContentDisposition"
                  },
                  "sha256" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BundleVersion"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Create extension bundle version",
        "tags" : [ "BucketBundles" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows" : {
      "get" : {
        "description" : "Retrieves all flows in the given bucket.",
        "operationId" : "getFlows",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VersionedFlow"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bucket flows",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "post" : {
        "description" : "Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.",
        "operationId" : "createFlow",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VersionedFlow"
              }
            }
          },
          "description" : "The details of the flow to create.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Create flow",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}" : {
      "delete" : {
        "description" : "Deletes a flow, including all saved versions of that flow.",
        "operationId" : "deleteFlow",
        "parameters" : [ {
          "description" : "The version is used to verify the client is working with the latest version of the entity.",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LongParameter"
          }
        }, {
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "in" : "query",
          "name" : "clientId",
          "schema" : {
            "$ref" : "#/components/schemas/ClientIdParameter"
          }
        }, {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlow"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Delete bucket flow",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "delete",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "get" : {
        "description" : "Retrieves the flow with the given id in the given bucket.",
        "operationId" : "getFlow",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bucket flow",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "put" : {
        "description" : "Updates the flow with the given id in the given bucket.",
        "operationId" : "updateFlow",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VersionedFlow"
              }
            }
          },
          "description" : "The updated flow",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Update bucket flow",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}" : {
      "get" : {
        "description" : "Computes the differences between two given versions of a flow.",
        "operationId" : "getFlowDiff",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The first version number",
          "in" : "path",
          "name" : "versionA",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "description" : "The second version number",
          "in" : "path",
          "name" : "versionB",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowDifference"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bucket flow diff",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions" : {
      "get" : {
        "description" : "Gets summary information for all versions of a flow. Versions are ordered newest->oldest.",
        "operationId" : "getFlowVersions",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VersionedFlowSnapshotMetadata"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bucket flow versions",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "post" : {
        "description" : "Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.",
        "operationId" : "createFlowVersion",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether source properties like author should be kept",
          "in" : "query",
          "name" : "preserveSourceProperties",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/VersionedFlowSnapshot"
              }
            }
          },
          "description" : "The new versioned flow snapshot.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Create flow version",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/import" : {
      "post" : {
        "description" : "Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.",
        "operationId" : "importVersionedFlow",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "header",
          "name" : "Comments",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VersionedFlowSnapshot"
              }
            }
          },
          "description" : "file"
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            },
            "description" : "The resource has been successfully created."
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Import flow version",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/latest" : {
      "get" : {
        "description" : "Gets the latest version of a flow, including the metadata and content of the flow.",
        "operationId" : "getLatestFlowVersion",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get latest bucket flow version content",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/latest/metadata" : {
      "get" : {
        "description" : "Gets the metadata for the latest version of a flow.",
        "operationId" : "getLatestFlowVersionMetadata",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshotMetadata"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get latest bucket flow version metadata",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}" : {
      "get" : {
        "description" : "Gets the given version of a flow, including the metadata and content for the version.",
        "operationId" : "getFlowVersion",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version number",
          "in" : "path",
          "name" : "versionNumber",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bucket flow version",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}/export" : {
      "get" : {
        "description" : "Exports the specified version of a flow, including the metadata and content of the flow.",
        "operationId" : "exportVersionedFlow",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version number",
          "in" : "path",
          "name" : "versionNumber",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Exports specified bucket flow version content",
        "tags" : [ "BucketFlows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles" : {
      "get" : {
        "description" : "Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundles",
        "parameters" : [ {
          "description" : "Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as 'My Bucket%' to select all bundles where the bucket name starts with 'My Bucket'.",
          "in" : "query",
          "name" : "bucketName",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundles where the groupId starts with 'com.'.",
          "in" : "query",
          "name" : "groupId",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundles where the artifactId starts with 'nifi-'.",
          "in" : "query",
          "name" : "artifactId",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Bundle"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "summary" : "Get all bundles",
        "tags" : [ "Bundles" ]
      }
    },
    "/bundles/versions" : {
      "get" : {
        "description" : "Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersions_1",
        "parameters" : [ {
          "description" : "Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundle versions where the groupId starts with 'com.'.",
          "in" : "query",
          "name" : "groupId",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundle versions where the artifactId starts with 'nifi-'.",
          "in" : "query",
          "name" : "artifactId",
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Optional version to filter results. The value maye be an exact match, or a wildcard, such as '1.0.%' to select all bundle versions where the version starts with '1.0.'.",
          "in" : "query",
          "name" : "version",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BundleVersionMetadata"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "summary" : "Get all bundle versions",
        "tags" : [ "Bundles" ]
      }
    },
    "/bundles/{bundleId}" : {
      "delete" : {
        "description" : "Deletes the given extension bundle and all of it's versions. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "deleteBundle",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bundle"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Delete bundle",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "get" : {
        "description" : "Gets the metadata about an extension bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundle",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bundle"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions" : {
      "get" : {
        "description" : "Gets the metadata for the versions of the given extension bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersions",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BundleVersionMetadata"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle versions",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}" : {
      "delete" : {
        "description" : "Deletes the given extension bundle version and it's associated binary content. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "deleteBundleVersion",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BundleVersion"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Delete bundle version",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/buckets/{bucketId}"
        }
      },
      "get" : {
        "description" : "Gets the descriptor for the given version of the given extension bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersion",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BundleVersion"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}/content" : {
      "get" : {
        "description" : "Gets the binary content for the given version of the given extension bundle. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersionContent",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version content",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}/extensions" : {
      "get" : {
        "description" : "Gets the metadata about the extensions in the given extension bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersionExtensions",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionMetadata"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version extensions",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}/extensions/{name}" : {
      "get" : {
        "description" : "Gets the metadata about the extension with the given name in the given extension bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersionExtension",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Extension"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version extension",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs" : {
      "get" : {
        "description" : "Gets the documentation for the given extension in the given extension bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersionExtensionDocs",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version extension docs",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details" : {
      "get" : {
        "description" : "Gets the additional details documentation for the given extension in the given extension bundle version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getBundleVersionExtensionAdditionalDetailsDocs",
        "parameters" : [ {
          "description" : "The extension bundle identifier",
          "in" : "path",
          "name" : "bundleId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get bundle version extension docs details",
        "tags" : [ "Bundles" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/config" : {
      "get" : {
        "description" : "Gets the NiFi Registry configurations.",
        "operationId" : "getConfiguration",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryConfiguration"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "summary" : "Get configration",
        "tags" : [ "Config" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/policies,/tenants"
        }
      }
    },
    "/extension-repository" : {
      "get" : {
        "description" : "Gets the names of the buckets the current user is authorized for in order to browse the repo by bucket. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoBuckets",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionRepoBucket"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo buckets",
        "tags" : [ "ExtensionRepository" ]
      }
    },
    "/extension-repository/{bucketName}" : {
      "get" : {
        "description" : "Gets the groups in the extension repository in the given bucket. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoGroups",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionRepoGroup"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo groups",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}" : {
      "get" : {
        "description" : "Gets the artifacts in the extension repository in the given bucket and group. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoArtifacts",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group id",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionRepoArtifact"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo artifacts",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}" : {
      "get" : {
        "description" : "Gets the versions in the extension repository for the given bucket, group, and artifact. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersions",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionRepoVersionSummary"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo versions",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}" : {
      "get" : {
        "description" : "Gets information about the version in the given bucket, group, and artifact. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersion",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtensionRepoVersion"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo version",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content" : {
      "get" : {
        "description" : "Gets the binary content of the bundle with the given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionContent",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo version content",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions" : {
      "get" : {
        "description" : "Gets information about the extensions in the given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionExtensions",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExtensionMetadata"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo extensions",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}" : {
      "get" : {
        "description" : "Gets information about the extension with the given name in the given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionExtension",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Extension"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo extension",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs" : {
      "get" : {
        "description" : "Gets the documentation for the extension with the given name in the given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionExtensionDocs",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo extension docs",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs/additional-details" : {
      "get" : {
        "description" : "Gets the additional details documentation for the extension with the given name in the given bucket, group, artifact, and version. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionExtensionAdditionalDetailsDocs",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The fully qualified name of the extension",
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo extension details",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/sha256" : {
      "get" : {
        "description" : "Gets the hex representation of the SHA-256 digest for the binary content of the bundle with the given bucket, group, artifact, and version.\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionRepoVersionSha256",
        "parameters" : [ {
          "description" : "The bucket name",
          "in" : "path",
          "name" : "bucketName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension repo version checksum",
        "tags" : [ "ExtensionRepository" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/extension-repository/{groupId}/{artifactId}/{version}/sha256" : {
      "get" : {
        "description" : "Gets the hex representation of the SHA-256 digest for the binary content with the given bucket, group, artifact, and version. Since the same group-artifact-version can exist in multiple buckets, this will return the checksum of the first one returned. This will be consistent since the checksum must be the same when existing in multiple buckets. \n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getGlobalExtensionRepoVersionSha256",
        "parameters" : [ {
          "description" : "The group identifier",
          "in" : "path",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifact identifier",
          "in" : "path",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version",
          "in" : "path",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get global extension repo version checksum",
        "tags" : [ "ExtensionRepository" ]
      }
    },
    "/extensions" : {
      "get" : {
        "description" : "Gets the metadata for all extensions that match the filter params and are part of bundles located in buckets the current user is authorized for. If the user is not authorized to any buckets, an empty result set will be returned.\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensions",
        "parameters" : [ {
          "description" : "The type of bundles to return",
          "in" : "query",
          "name" : "bundleType",
          "schema" : {
            "type" : "string",
            "enum" : [ "NIFI_NAR", "MINIFI_CPP" ]
          }
        }, {
          "description" : "The type of extensions to return",
          "in" : "query",
          "name" : "extensionType",
          "schema" : {
            "type" : "string",
            "enum" : [ "PROCESSOR", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_PROVIDER" ]
          }
        }, {
          "description" : "The tags to filter on, will be used in an OR statement",
          "in" : "query",
          "name" : "tag",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "uniqueItems" : true
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtensionMetadataContainer"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get all extensions",
        "tags" : [ "Extensions" ]
      }
    },
    "/extensions/provided-service-api" : {
      "get" : {
        "description" : "Gets the metadata for extensions that provide the specified API and are part of bundles located in buckets the current user is authorized for. If the user is not authorized to any buckets, an empty result set will be returned.\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getExtensionsProvidingServiceAPI",
        "parameters" : [ {
          "description" : "The name of the service API class",
          "in" : "query",
          "name" : "className",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The groupId of the bundle containing the service API class",
          "in" : "query",
          "name" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The artifactId of the bundle containing the service API class",
          "in" : "query",
          "name" : "artifactId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version of the bundle containing the service API class",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExtensionMetadataContainer"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extensions providing service API",
        "tags" : [ "Extensions" ]
      }
    },
    "/extensions/tags" : {
      "get" : {
        "description" : "Gets all the extension tags known to this NiFi Registry instance, along with the number of extensions that have the given tag.\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getTags",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TagCount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get extension tags",
        "tags" : [ "Extensions" ]
      }
    },
    "/flows/fields" : {
      "get" : {
        "description" : "Retrieves the flow field names that can be used for searching or sorting on flows.",
        "operationId" : "getAvailableFlowFields",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fields"
                }
              }
            }
          }
        },
        "summary" : "Get flow fields",
        "tags" : [ "Flows" ]
      }
    },
    "/flows/{flowId}" : {
      "get" : {
        "description" : "Gets a flow by id.",
        "operationId" : "getFlow_1",
        "parameters" : [ {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlow"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get flow",
        "tags" : [ "Flows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/flows/{flowId}/versions" : {
      "get" : {
        "description" : "Gets summary information for all versions of a given flow. Versions are ordered newest->oldest.",
        "operationId" : "getFlowVersions_1",
        "parameters" : [ {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VersionedFlowSnapshotMetadata"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get flow versions",
        "tags" : [ "Flows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/flows/{flowId}/versions/latest" : {
      "get" : {
        "description" : "Gets the latest version of a flow, including metadata and flow content.",
        "operationId" : "getLatestFlowVersion_1",
        "parameters" : [ {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get latest flow version",
        "tags" : [ "Flows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/flows/{flowId}/versions/latest/metadata" : {
      "get" : {
        "description" : "Gets the metadata for the latest version of a flow.",
        "operationId" : "getLatestFlowVersionMetadata_1",
        "parameters" : [ {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshotMetadata"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get latest flow version metadata",
        "tags" : [ "Flows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/flows/{flowId}/versions/{versionNumber}" : {
      "get" : {
        "description" : "Gets the given version of a flow, including metadata and flow content.",
        "operationId" : "getFlowVersion_1",
        "parameters" : [ {
          "description" : "The flow identifier",
          "in" : "path",
          "name" : "flowId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The version number",
          "in" : "path",
          "name" : "versionNumber",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedFlowSnapshot"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get flow version",
        "tags" : [ "Flows" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/items" : {
      "get" : {
        "description" : "Get items across all buckets. The returned items will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.",
        "operationId" : "getItems",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BucketItem"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "summary" : "Get all items",
        "tags" : [ "Items" ]
      }
    },
    "/items/fields" : {
      "get" : {
        "description" : "Retrieves the item field names for searching or sorting on bucket items.",
        "operationId" : "getAvailableBucketItemFields",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fields"
                }
              }
            }
          }
        },
        "summary" : "Get item fields",
        "tags" : [ "Items" ]
      }
    },
    "/items/{bucketId}" : {
      "get" : {
        "description" : "Gets the items located in the given bucket.",
        "operationId" : "getItems_1",
        "parameters" : [ {
          "description" : "The bucket identifier",
          "in" : "path",
          "name" : "bucketId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BucketItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "summary" : "Get bucket items",
        "tags" : [ "Items" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/buckets/{bucketId}"
        }
      }
    },
    "/policies" : {
      "get" : {
        "operationId" : "getAccessPolicies",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessPolicy"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get all access policies",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/policies"
        }
      },
      "post" : {
        "operationId" : "createAccessPolicy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessPolicy"
              }
            }
          },
          "description" : "The access policy configuration details.",
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          },
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          }
        },
        "summary" : "Create access policy",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/policies"
        }
      }
    },
    "/policies/resources" : {
      "get" : {
        "description" : "Gets the available resources that support access/authorization policies",
        "operationId" : "getResources",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Resource"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          }
        },
        "summary" : "Get available resources",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/policies"
        }
      }
    },
    "/policies/{action}/{resource}" : {
      "get" : {
        "description" : "Gets an access policy for the specified action and resource",
        "operationId" : "getAccessPolicyForResource",
        "parameters" : [ {
          "description" : "The request action.",
          "in" : "path",
          "name" : "action",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The resource of the policy.",
          "in" : "path",
          "name" : "resource",
          "required" : true,
          "schema" : {
            "type" : "string",
            "pattern" : ".+"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get access policy for resource",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/policies"
        }
      }
    },
    "/policies/{id}" : {
      "delete" : {
        "operationId" : "removeAccessPolicy",
        "parameters" : [ {
          "description" : "The version is used to verify the client is working with the latest version of the entity.",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LongParameter"
          }
        }, {
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "in" : "query",
          "name" : "clientId",
          "schema" : {
            "$ref" : "#/components/schemas/ClientIdParameter"
          }
        }, {
          "description" : "The access policy id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          }
        },
        "summary" : "Delete access policy",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "delete",
          "resource" : "/policies"
        }
      },
      "get" : {
        "operationId" : "getAccessPolicy",
        "parameters" : [ {
          "description" : "The access policy id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get access policy",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/policies"
        }
      },
      "put" : {
        "operationId" : "updateAccessPolicy",
        "parameters" : [ {
          "description" : "The access policy id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessPolicy"
              }
            }
          },
          "description" : "The access policy configuration details.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          }
        },
        "summary" : "Update access policy",
        "tags" : [ "Policies" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/policies"
        }
      }
    },
    "/tenants/user-groups" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUserGroups",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get user groups",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/tenants"
        }
      },
      "post" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "createUserGroup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            }
          },
          "description" : "The user group configuration details.",
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Create user group",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/tenants"
        }
      }
    },
    "/tenants/user-groups/{id}" : {
      "delete" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "removeUserGroup",
        "parameters" : [ {
          "description" : "The version is used to verify the client is working with the latest version of the entity.",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LongParameter"
          }
        }, {
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "in" : "query",
          "name" : "clientId",
          "schema" : {
            "$ref" : "#/components/schemas/ClientIdParameter"
          }
        }, {
          "description" : "The user group id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Delete user group",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "delete",
          "resource" : "/tenants"
        }
      },
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUserGroup",
        "parameters" : [ {
          "description" : "The user group id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get user group",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/tenants"
        }
      },
      "put" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "updateUserGroup",
        "parameters" : [ {
          "description" : "The user group id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            }
          },
          "description" : "The user group configuration details.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Update user group",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/tenants"
        }
      }
    },
    "/tenants/users" : {
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUsers",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get all users",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/tenants"
        }
      },
      "post" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "createUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "description" : "The user configuration details.",
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Create user",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/tenants"
        }
      }
    },
    "/tenants/users/{id}" : {
      "delete" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "removeUser",
        "parameters" : [ {
          "description" : "The version is used to verify the client is working with the latest version of the entity.",
          "in" : "query",
          "name" : "version",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LongParameter"
          }
        }, {
          "description" : "If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.",
          "in" : "query",
          "name" : "clientId",
          "schema" : {
            "$ref" : "#/components/schemas/ClientIdParameter"
          }
        }, {
          "description" : "The user id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Delete user",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "delete",
          "resource" : "/tenants"
        }
      },
      "get" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUser",
        "parameters" : [ {
          "description" : "The user id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Get user",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "read",
          "resource" : "/tenants"
        }
      },
      "put" : {
        "description" : "\n\nNOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "description" : "The user id.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "description" : "The user configuration details.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "summary" : "Update user",
        "tags" : [ "Tenants" ],
        "x-access-policy" : {
          "action" : "write",
          "resource" : "/tenants"
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AccessPolicy" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "description" : "The action associated with this access policy.",
            "enum" : [ "read", "write", "delete" ]
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "Indicates if this access policy is configurable, based on which Authorizer has been configured to manage it.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "The id of the policy. Set by server at creation time.",
            "readOnly" : true
          },
          "resource" : {
            "type" : "string",
            "description" : "The resource for this access policy."
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          },
          "userGroups" : {
            "type" : "array",
            "description" : "The set of user group IDs associated with this access policy.",
            "items" : {
              "$ref" : "#/components/schemas/Tenant"
            },
            "uniqueItems" : true
          },
          "users" : {
            "type" : "array",
            "description" : "The set of user IDs associated with this access policy.",
            "items" : {
              "$ref" : "#/components/schemas/Tenant"
            },
            "uniqueItems" : true
          }
        }
      },
      "AccessPolicySummary" : {
        "type" : "object",
        "description" : "The access policies granted to this tenant.",
        "properties" : {
          "action" : {
            "type" : "string",
            "description" : "The action associated with this access policy.",
            "enum" : [ "read", "write", "delete" ]
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "Indicates if this access policy is configurable, based on which Authorizer has been configured to manage it.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "The id of the policy. Set by server at creation time.",
            "readOnly" : true
          },
          "resource" : {
            "type" : "string",
            "description" : "The resource for this access policy."
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          }
        },
        "readOnly" : true
      },
      "AllowableValue" : {
        "type" : "object",
        "description" : "The allowable values for this property",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the allowable value"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The display name of the allowable value"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the allowable value"
          }
        }
      },
      "Attribute" : {
        "type" : "object",
        "description" : "The attributes written to flow files by the extension",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the attribute"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the attribute"
          }
        }
      },
      "BatchSize" : {
        "type" : "object",
        "description" : "The batch settings for data transmission.",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Preferred number of flow files to include in a transaction."
          },
          "duration" : {
            "type" : "string",
            "description" : "Preferred amount of time that a transaction should span."
          },
          "size" : {
            "type" : "string",
            "description" : "Preferred number of bytes to include in a transaction."
          }
        }
      },
      "Bucket" : {
        "type" : "object",
        "description" : "The bucket where the flow is located",
        "properties" : {
          "allowBundleRedeploy" : {
            "type" : "boolean",
            "description" : "Indicates if this bucket allows the same version of an extension bundle to be redeployed and thus overwrite the existing artifact. By default this is false."
          },
          "allowPublicRead" : {
            "type" : "boolean",
            "description" : "Indicates if this bucket allows read access to unauthenticated anonymous users"
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when the bucket was first created. This is set by the server at creation time.",
            "minimum" : 1,
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the bucket."
          },
          "identifier" : {
            "type" : "string",
            "description" : "An ID to uniquely identify this object.",
            "minLength" : 1,
            "readOnly" : true
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the bucket.",
            "minLength" : 1
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          }
        },
        "readOnly" : true,
        "required" : [ "identifier", "name" ]
      },
      "BucketItem" : {
        "type" : "object",
        "properties" : {
          "bucketIdentifier" : {
            "type" : "string",
            "description" : "The identifier of the bucket this items belongs to. This cannot be changed after the item is created.",
            "minLength" : 1
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The name of the bucket this items belongs to.",
            "readOnly" : true
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when the item was created, as milliseconds since epoch.",
            "minimum" : 1,
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the item."
          },
          "identifier" : {
            "type" : "string",
            "description" : "An ID to uniquely identify this object.",
            "minLength" : 1,
            "readOnly" : true
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when the item was last modified, as milliseconds since epoch.",
            "minimum" : 1,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the item.",
            "minLength" : 1
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of item.",
            "enum" : [ "Flow", "Bundle" ]
          }
        },
        "required" : [ "bucketIdentifier", "identifier", "name", "type" ]
      },
      "BuildInfo" : {
        "type" : "object",
        "description" : "The build information about this version",
        "properties" : {
          "buildBranch" : {
            "type" : "string",
            "description" : "The branch used to build the version of the bundle"
          },
          "buildFlags" : {
            "type" : "string",
            "description" : "The flags used to build the version of the bundle"
          },
          "buildRevision" : {
            "type" : "string",
            "description" : "The revision used to build the version of the bundle"
          },
          "buildTag" : {
            "type" : "string",
            "description" : "The tag used to build the version of the bundle"
          },
          "buildTool" : {
            "type" : "string",
            "description" : "The tool used to build the version of the bundle"
          },
          "built" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp the version of the bundle was built"
          },
          "builtBy" : {
            "type" : "string",
            "description" : "The identity of the user that performed the build"
          }
        }
      },
      "Bundle" : {
        "type" : "object",
        "description" : "The details of the artifact that bundled this parameter provider.",
        "properties" : {
          "artifact" : {
            "type" : "string",
            "description" : "The artifact of the bundle"
          },
          "group" : {
            "type" : "string",
            "description" : "The group of the bundle"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the bundle"
          }
        }
      },
      "BundleInfo" : {
        "type" : "object",
        "description" : "The information for the bundle where this extension is located",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id of the bundle"
          },
          "bucketId" : {
            "type" : "string",
            "description" : "The id of the bucket where the bundle is located"
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The name of the bucket where the bundle is located"
          },
          "bundleId" : {
            "type" : "string",
            "description" : "The id of the bundle"
          },
          "bundleType" : {
            "type" : "string",
            "description" : "The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)",
            "enum" : [ "NIFI_NAR", "MINIFI_CPP" ]
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id of the bundle"
          },
          "systemApiVersion" : {
            "type" : "string",
            "description" : "The version of the system API the bundle was built against"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the bundle"
          }
        }
      },
      "BundleVersion" : {
        "type" : "object",
        "properties" : {
          "bucket" : {
            "$ref" : "#/components/schemas/Bucket"
          },
          "bundle" : {
            "$ref" : "#/components/schemas/Bundle"
          },
          "dependencies" : {
            "type" : "array",
            "description" : "The set of other bundle versions that this version is dependent on",
            "items" : {
              "$ref" : "#/components/schemas/BundleVersionDependency"
            },
            "readOnly" : true,
            "uniqueItems" : true
          },
          "filename" : {
            "type" : "string"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "versionMetadata" : {
            "$ref" : "#/components/schemas/BundleVersionMetadata"
          }
        },
        "required" : [ "versionMetadata" ]
      },
      "BundleVersionDependency" : {
        "type" : "object",
        "description" : "The set of other bundle versions that this version is dependent on",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id of the bundle dependency",
            "minLength" : 1
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id of the bundle dependency",
            "minLength" : 1
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the bundle dependency",
            "minLength" : 1
          }
        },
        "readOnly" : true,
        "required" : [ "artifactId", "groupId", "version" ]
      },
      "BundleVersionMetadata" : {
        "type" : "object",
        "properties" : {
          "artifactId" : {
            "type" : "string"
          },
          "author" : {
            "type" : "string",
            "description" : "The identity that created this version",
            "minLength" : 1
          },
          "bucketId" : {
            "type" : "string",
            "description" : "The id of the bucket the extension bundle belongs to",
            "minLength" : 1
          },
          "buildInfo" : {
            "$ref" : "#/components/schemas/BuildInfo"
          },
          "bundleId" : {
            "type" : "string",
            "description" : "The id of the extension bundle this version is for",
            "minLength" : 1
          },
          "contentSize" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The size of the binary content for this version in bytes",
            "minimum" : 0
          },
          "description" : {
            "type" : "string",
            "description" : "The description for this version"
          },
          "groupId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of this version of the extension bundle",
            "minLength" : 1
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "sha256" : {
            "type" : "string",
            "description" : "The hex representation of the SHA-256 digest of the binary content for this version",
            "minLength" : 1
          },
          "sha256Supplied" : {
            "type" : "boolean",
            "description" : "Whether or not the client supplied a SHA-256 when uploading the bundle"
          },
          "systemApiVersion" : {
            "type" : "string",
            "description" : "The version of the system API that this bundle version was built against",
            "minLength" : 1
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of the create date of this version",
            "minimum" : 1
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the extension bundle",
            "minLength" : 1
          }
        },
        "required" : [ "author", "bucketId", "buildInfo", "bundleId", "contentSize", "id", "sha256", "sha256Supplied", "systemApiVersion", "version" ]
      },
      "ClientIdParameter" : {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string"
          }
        }
      },
      "ComponentDifference" : {
        "type" : "object",
        "description" : "The list of changes related to this component between the 2 versions.",
        "properties" : {
          "changeDescription" : {
            "type" : "string",
            "description" : "The description of the change."
          },
          "differenceType" : {
            "type" : "string",
            "description" : "The key to the difference."
          },
          "differenceTypeDescription" : {
            "type" : "string",
            "description" : "The description of the change type."
          },
          "valueA" : {
            "type" : "string",
            "description" : "The earlier value from the difference."
          },
          "valueB" : {
            "type" : "string",
            "description" : "The newer value from the difference."
          }
        }
      },
      "ComponentDifferenceGroup" : {
        "type" : "object",
        "properties" : {
          "componentId" : {
            "type" : "string",
            "description" : "The id of the component whose changes are grouped together."
          },
          "componentName" : {
            "type" : "string",
            "description" : "The name of the component whose changes are grouped together."
          },
          "componentType" : {
            "type" : "string",
            "description" : "The type of component these changes relate to."
          },
          "differences" : {
            "type" : "array",
            "description" : "The list of changes related to this component between the 2 versions.",
            "items" : {
              "$ref" : "#/components/schemas/ComponentDifference"
            },
            "uniqueItems" : true
          },
          "processGroupId" : {
            "type" : "string",
            "description" : "The process group id for this component."
          }
        }
      },
      "ConnectableComponent" : {
        "type" : "object",
        "description" : "The destination of the connection.",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The comments for the connectable component."
          },
          "groupId" : {
            "type" : "string",
            "description" : "The id of the group that the connectable component resides in"
          },
          "id" : {
            "type" : "string",
            "description" : "The id of the connectable component."
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the connectable component"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of component the connectable is.",
            "enum" : [ "PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL" ]
          }
        }
      },
      "ControllerServiceAPI" : {
        "type" : "object",
        "description" : "Lists the APIs this Controller Service implements.",
        "properties" : {
          "bundle" : {
            "$ref" : "#/components/schemas/Bundle"
          },
          "type" : {
            "type" : "string",
            "description" : "The fully qualified name of the service interface."
          }
        }
      },
      "ControllerServiceDefinition" : {
        "type" : "object",
        "description" : "The controller service required by this property, or null if none is required",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id of the service API"
          },
          "className" : {
            "type" : "string",
            "description" : "The class name of the service API"
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id of the service API"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the service API"
          }
        }
      },
      "CurrentUser" : {
        "type" : "object",
        "properties" : {
          "anonymous" : {
            "type" : "boolean",
            "description" : "Indicates if the current user is anonymous",
            "readOnly" : true
          },
          "identity" : {
            "type" : "string",
            "description" : "The identity of the current user",
            "readOnly" : true
          },
          "loginSupported" : {
            "type" : "boolean",
            "description" : "Indicates if the NiFi Registry instance supports logging in"
          },
          "oidcloginSupported" : {
            "type" : "boolean",
            "description" : "Indicates if the NiFi Registry instance supports logging in with an OIDC provider"
          },
          "resourcePermissions" : {
            "$ref" : "#/components/schemas/ResourcePermissions"
          }
        }
      },
      "DefaultSchedule" : {
        "type" : "object",
        "description" : "The default schedule for a processor reporting task",
        "properties" : {
          "concurrentTasks" : {
            "type" : "string",
            "description" : "The default concurrent tasks"
          },
          "period" : {
            "type" : "string",
            "description" : "The default scheduling period"
          },
          "strategy" : {
            "type" : "string",
            "description" : "The default scheduling strategy"
          }
        }
      },
      "DefaultSettings" : {
        "type" : "object",
        "description" : "The default settings for a processor",
        "properties" : {
          "bulletinLevel" : {
            "type" : "string",
            "description" : "The default bulletin level"
          },
          "penaltyDuration" : {
            "type" : "string",
            "description" : "The default penalty duration"
          },
          "yieldDuration" : {
            "type" : "string",
            "description" : "The default yield duration"
          }
        }
      },
      "Dependency" : {
        "type" : "object",
        "description" : "The properties that this property depends on",
        "properties" : {
          "dependentValues" : {
            "$ref" : "#/components/schemas/DependentValues"
          },
          "propertyDisplayName" : {
            "type" : "string",
            "description" : "The display name of the dependent property"
          },
          "propertyName" : {
            "type" : "string",
            "description" : "The name of the dependent property"
          }
        }
      },
      "DependentValues" : {
        "type" : "object",
        "description" : "The values of the dependent property that enable the depending property",
        "properties" : {
          "values" : {
            "type" : "array",
            "description" : "The dependent values",
            "items" : {
              "type" : "string",
              "description" : "The dependent values",
              "xml" : {
                "name" : "dependentValue"
              }
            },
            "xml" : {
              "name" : "dependentValue"
            }
          }
        }
      },
      "DeprecationNotice" : {
        "type" : "object",
        "description" : "The deprecation notice of the extension",
        "properties" : {
          "alternatives" : {
            "type" : "array",
            "description" : "The alternatives to use",
            "items" : {
              "type" : "string",
              "description" : "The alternatives to use",
              "xml" : {
                "name" : "alternative"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the deprecation"
          }
        }
      },
      "DynamicProperty" : {
        "type" : "object",
        "description" : "The dynamic properties of the extension",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the dynamic property"
          },
          "expressionLanguageScope" : {
            "type" : "string",
            "description" : "The scope of the expression language support",
            "enum" : [ "NONE", "ENVIRONMENT", "FLOWFILE_ATTRIBUTES" ]
          },
          "expressionLanguageSupported" : {
            "type" : "boolean",
            "description" : "Whether or not expression language is supported"
          },
          "name" : {
            "type" : "string",
            "description" : "The description of the dynamic property name"
          },
          "value" : {
            "type" : "string",
            "description" : "The description of the dynamic property value"
          }
        }
      },
      "DynamicRelationship" : {
        "type" : "object",
        "description" : "The dynamic relationships of the extension",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the dynamic relationship"
          },
          "name" : {
            "type" : "string",
            "description" : "The description of the dynamic relationship name"
          }
        }
      },
      "Extension" : {
        "type" : "object",
        "properties" : {
          "defaultSchedule" : {
            "$ref" : "#/components/schemas/DefaultSchedule"
          },
          "defaultSettings" : {
            "$ref" : "#/components/schemas/DefaultSettings"
          },
          "deprecationNotice" : {
            "$ref" : "#/components/schemas/DeprecationNotice"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the extension"
          },
          "dynamicProperties" : {
            "type" : "array",
            "description" : "The dynamic properties of the extension",
            "items" : {
              "$ref" : "#/components/schemas/DynamicProperty"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "dynamicRelationship" : {
            "$ref" : "#/components/schemas/DynamicRelationship"
          },
          "inputRequirement" : {
            "type" : "string",
            "description" : "The input requirement of the extension",
            "enum" : [ "INPUT_REQUIRED", "INPUT_ALLOWED", "INPUT_FORBIDDEN" ]
          },
          "multiProcessorUseCases" : {
            "type" : "array",
            "description" : "Zero or more documented use cases for how the processor may be used in conjunction with other processors",
            "items" : {
              "$ref" : "#/components/schemas/MultiProcessorUseCase"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the extension"
          },
          "primaryNodeOnly" : {
            "type" : "boolean",
            "description" : "Indicates that a processor should be scheduled only on the primary node"
          },
          "properties" : {
            "type" : "array",
            "description" : "The properties of the extension",
            "items" : {
              "$ref" : "#/components/schemas/Property"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "providedServiceAPIs" : {
            "type" : "array",
            "description" : "The service APIs provided by this extension",
            "items" : {
              "$ref" : "#/components/schemas/ProvidedServiceAPI"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "readsAttributes" : {
            "type" : "array",
            "description" : "The attributes read from flow files by the extension",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "relationships" : {
            "type" : "array",
            "description" : "The relationships of the extension",
            "items" : {
              "$ref" : "#/components/schemas/Relationship"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "restricted" : {
            "$ref" : "#/components/schemas/Restricted"
          },
          "seeAlso" : {
            "type" : "array",
            "description" : "The names of other extensions to see",
            "items" : {
              "type" : "string",
              "description" : "The names of other extensions to see",
              "xml" : {
                "name" : "see"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "sideEffectFree" : {
            "type" : "boolean",
            "description" : "Indicates that a processor is side effect free"
          },
          "stateful" : {
            "$ref" : "#/components/schemas/Stateful"
          },
          "supportsBatching" : {
            "type" : "boolean",
            "description" : "Indicates that a processor supports batching"
          },
          "supportsSensitiveDynamicProperties" : {
            "type" : "boolean"
          },
          "systemResourceConsiderations" : {
            "type" : "array",
            "description" : "The resource considerations of the extension",
            "items" : {
              "$ref" : "#/components/schemas/SystemResourceConsideration"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "tags" : {
            "type" : "array",
            "description" : "The tags of the extension",
            "items" : {
              "type" : "string",
              "description" : "The tags of the extension",
              "xml" : {
                "name" : "tag"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "triggerSerially" : {
            "type" : "boolean",
            "description" : "Indicates that a processor should be triggered serially"
          },
          "triggerWhenAnyDestinationAvailable" : {
            "type" : "boolean",
            "description" : "Indicates that a processor should be triggered when any destinations have space for flow files"
          },
          "triggerWhenEmpty" : {
            "type" : "boolean",
            "description" : "Indicates that a processor should be triggered when the incoming queues are empty"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the extension",
            "enum" : [ "PROCESSOR", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_PROVIDER" ]
          },
          "useCases" : {
            "type" : "array",
            "description" : "Zero or more documented use cases for how the extension may be used",
            "items" : {
              "$ref" : "#/components/schemas/UseCase"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "writesAttributes" : {
            "type" : "array",
            "description" : "The attributes written to flow files by the extension",
            "items" : {
              "$ref" : "#/components/schemas/Attribute"
            },
            "xml" : {
              "wrapped" : true
            }
          }
        },
        "required" : [ "name", "type" ]
      },
      "ExtensionFilterParams" : {
        "type" : "object",
        "description" : "The filter parameters submitted for the request",
        "properties" : {
          "bundleType" : {
            "type" : "string",
            "description" : "The type of bundle",
            "enum" : [ "NIFI_NAR", "MINIFI_CPP" ]
          },
          "extensionType" : {
            "type" : "string",
            "description" : "The type of extension",
            "enum" : [ "PROCESSOR", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_PROVIDER" ]
          },
          "tags" : {
            "type" : "array",
            "description" : "The tags",
            "items" : {
              "type" : "string",
              "description" : "The tags"
            },
            "uniqueItems" : true
          }
        }
      },
      "ExtensionMetadata" : {
        "type" : "object",
        "description" : "The metadata for the extensions",
        "properties" : {
          "bundleInfo" : {
            "$ref" : "#/components/schemas/BundleInfo"
          },
          "deprecationNotice" : {
            "$ref" : "#/components/schemas/DeprecationNotice"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the extension"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The display name of the extension"
          },
          "hasAdditionalDetails" : {
            "type" : "boolean",
            "description" : "Whether or not the extension has additional detail documentation"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "linkDocs" : {
            "$ref" : "#/components/schemas/Link"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the extension"
          },
          "providedServiceAPIs" : {
            "type" : "array",
            "description" : "The service APIs provided by the extension",
            "items" : {
              "$ref" : "#/components/schemas/ProvidedServiceAPI"
            }
          },
          "restricted" : {
            "$ref" : "#/components/schemas/Restricted"
          },
          "tags" : {
            "type" : "array",
            "description" : "The tags of the extension",
            "items" : {
              "type" : "string",
              "description" : "The tags of the extension"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the extension",
            "enum" : [ "PROCESSOR", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_PROVIDER" ]
          }
        }
      },
      "ExtensionMetadataContainer" : {
        "type" : "object",
        "properties" : {
          "extensions" : {
            "type" : "array",
            "description" : "The metadata for the extensions",
            "items" : {
              "$ref" : "#/components/schemas/ExtensionMetadata"
            },
            "uniqueItems" : true
          },
          "filterParams" : {
            "$ref" : "#/components/schemas/ExtensionFilterParams"
          },
          "numResults" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of extensions in the response"
          }
        }
      },
      "ExtensionRepoArtifact" : {
        "type" : "object",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id"
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The bucket name"
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "ExtensionRepoBucket" : {
        "type" : "object",
        "properties" : {
          "bucketName" : {
            "type" : "string",
            "description" : "The name of the bucket"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "ExtensionRepoGroup" : {
        "type" : "object",
        "properties" : {
          "bucketName" : {
            "type" : "string",
            "description" : "The bucket name"
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          }
        }
      },
      "ExtensionRepoVersion" : {
        "type" : "object",
        "properties" : {
          "downloadLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "extensionsLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "sha256Link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "sha256Supplied" : {
            "type" : "boolean",
            "description" : "Indicates if the client supplied a SHA-256 when uploading this version of the extension bundle.",
            "readOnly" : true
          }
        }
      },
      "ExtensionRepoVersionSummary" : {
        "type" : "object",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id"
          },
          "author" : {
            "type" : "string",
            "description" : "The identity of the user that created this version"
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The bucket name"
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id"
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when this version was created"
          },
          "version" : {
            "type" : "string",
            "description" : "The version"
          }
        }
      },
      "ExternalControllerServiceReference" : {
        "type" : "object",
        "description" : "The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.",
        "properties" : {
          "identifier" : {
            "type" : "string",
            "description" : "The identifier of the controller service"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the controller service"
          }
        }
      },
      "Fields" : {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "uniqueItems" : true
          }
        }
      },
      "FormDataContentDisposition" : {
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fileName" : {
            "type" : "string"
          },
          "modificationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "readDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "Link" : {
        "type" : "object",
        "description" : "An WebLink to this entity.",
        "properties" : {
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "rel" : {
            "type" : "string"
          },
          "rels" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "title" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "uri" : {
            "type" : "string",
            "format" : "uri"
          },
          "uriBuilder" : {
            "$ref" : "#/components/schemas/UriBuilder"
          }
        },
        "readOnly" : true
      },
      "LongParameter" : {
        "type" : "object",
        "properties" : {
          "long" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "MultiProcessorUseCase" : {
        "type" : "object",
        "description" : "Zero or more documented use cases for how the processor may be used in conjunction with other processors",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "keywords" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "keyword"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "notes" : {
            "type" : "string"
          },
          "processorConfigurations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProcessorConfiguration"
            },
            "xml" : {
              "wrapped" : true
            }
          }
        }
      },
      "ParameterProviderReference" : {
        "type" : "object",
        "description" : "Contains basic information about parameter providers referenced in the versioned flow.",
        "properties" : {
          "bundle" : {
            "$ref" : "#/components/schemas/Bundle"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifier of the parameter provider"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the parameter provider"
          },
          "type" : {
            "type" : "string",
            "description" : "The fully qualified name of the parameter provider class."
          }
        }
      },
      "Permissions" : {
        "type" : "object",
        "description" : "The access that the current user has to any top level resources (a logical 'OR' of all other values)",
        "properties" : {
          "canDelete" : {
            "type" : "boolean",
            "description" : "Indicates whether the user can delete a given resource.",
            "readOnly" : true
          },
          "canRead" : {
            "type" : "boolean",
            "description" : "Indicates whether the user can read a given resource.",
            "readOnly" : true
          },
          "canWrite" : {
            "type" : "boolean",
            "description" : "Indicates whether the user can write a given resource.",
            "readOnly" : true
          }
        },
        "readOnly" : true
      },
      "Position" : {
        "type" : "object",
        "description" : "The position of a component on the graph",
        "properties" : {
          "x" : {
            "type" : "number",
            "format" : "double",
            "description" : "The x coordinate."
          },
          "y" : {
            "type" : "number",
            "format" : "double",
            "description" : "The y coordinate."
          }
        }
      },
      "ProcessorConfiguration" : {
        "type" : "object",
        "properties" : {
          "configuration" : {
            "type" : "string"
          },
          "processorClassName" : {
            "type" : "string"
          }
        }
      },
      "Property" : {
        "type" : "object",
        "description" : "The properties of the extension",
        "properties" : {
          "allowableValues" : {
            "type" : "array",
            "description" : "The allowable values for this property",
            "items" : {
              "$ref" : "#/components/schemas/AllowableValue"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "controllerServiceDefinition" : {
            "$ref" : "#/components/schemas/ControllerServiceDefinition"
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "The default value"
          },
          "dependencies" : {
            "type" : "array",
            "description" : "The properties that this property depends on",
            "items" : {
              "$ref" : "#/components/schemas/Dependency"
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "description" : {
            "type" : "string",
            "description" : "The description"
          },
          "displayName" : {
            "type" : "string",
            "description" : "The display name"
          },
          "dynamic" : {
            "type" : "boolean",
            "description" : "Whether or not the processor is dynamic"
          },
          "dynamicallyModifiesClasspath" : {
            "type" : "boolean",
            "description" : "Whether or not the processor dynamically modifies the classpath"
          },
          "expressionLanguageScope" : {
            "type" : "string",
            "description" : "The scope of expression language support",
            "enum" : [ "NONE", "ENVIRONMENT", "FLOWFILE_ATTRIBUTES" ]
          },
          "expressionLanguageSupported" : {
            "type" : "boolean",
            "description" : "Whether or not expression language is supported"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the property"
          },
          "required" : {
            "type" : "boolean",
            "description" : "Whether or not the property is required"
          },
          "resourceDefinition" : {
            "$ref" : "#/components/schemas/ResourceDefinition"
          },
          "sensitive" : {
            "type" : "boolean",
            "description" : "Whether or not the property is sensitive"
          }
        }
      },
      "ProvidedServiceAPI" : {
        "type" : "object",
        "description" : "The service APIs provided by the extension",
        "properties" : {
          "artifactId" : {
            "type" : "string",
            "description" : "The artifact id of the service API being provided"
          },
          "className" : {
            "type" : "string",
            "description" : "The class name of the service API being provided"
          },
          "groupId" : {
            "type" : "string",
            "description" : "The group id of the service API being provided"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the service API being provided"
          }
        }
      },
      "RegistryAbout" : {
        "type" : "object",
        "properties" : {
          "registryAboutVersion" : {
            "type" : "string",
            "description" : "The version string for this Nifi Registry",
            "readOnly" : true
          }
        }
      },
      "RegistryConfiguration" : {
        "type" : "object",
        "properties" : {
          "supportsConfigurableAuthorizer" : {
            "type" : "boolean",
            "description" : "Whether this NiFi Registry supports a configurable authorizer.",
            "readOnly" : true
          },
          "supportsConfigurableUsersAndGroups" : {
            "type" : "boolean",
            "description" : "Whether this NiFi Registry supports configurable users and groups.",
            "readOnly" : true
          },
          "supportsManagedAuthorizer" : {
            "type" : "boolean",
            "description" : "Whether this NiFi Registry supports a managed authorizer. Managed authorizers can visualize users, groups, and policies in the UI.",
            "readOnly" : true
          }
        }
      },
      "Relationship" : {
        "type" : "object",
        "description" : "The relationships of the extension",
        "properties" : {
          "autoTerminated" : {
            "type" : "boolean",
            "description" : "Whether or not the relationship is auto-terminated by default"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the relationship"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the relationship"
          }
        }
      },
      "Resource" : {
        "type" : "object",
        "properties" : {
          "identifier" : {
            "type" : "string",
            "description" : "The identifier of the resource.",
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the resource.",
            "readOnly" : true
          }
        }
      },
      "ResourceDefinition" : {
        "type" : "object",
        "description" : "The optional resource definition",
        "properties" : {
          "cardinality" : {
            "type" : "string",
            "description" : "The cardinality of the resource definition",
            "enum" : [ "SINGLE", "MULTIPLE" ]
          },
          "resourceTypes" : {
            "type" : "array",
            "description" : "The types of resources",
            "items" : {
              "type" : "string",
              "description" : "The types of resources",
              "enum" : [ "FILE", "DIRECTORY", "TEXT", "URL" ],
              "xml" : {
                "name" : "resourceType"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          }
        }
      },
      "ResourcePermissions" : {
        "type" : "object",
        "description" : "A summary top-level resource access policies granted to this tenant.",
        "properties" : {
          "anyTopLevelResource" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "buckets" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "policies" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "proxy" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "tenants" : {
            "$ref" : "#/components/schemas/Permissions"
          }
        },
        "readOnly" : true
      },
      "Restricted" : {
        "type" : "object",
        "description" : "The restrictions of the extension",
        "properties" : {
          "generalRestrictionExplanation" : {
            "type" : "string",
            "description" : "The general restriction for the extension, or null if only specific restrictions exist"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The specific restrictions",
            "items" : {
              "$ref" : "#/components/schemas/Restriction"
            },
            "xml" : {
              "wrapped" : true
            }
          }
        }
      },
      "Restriction" : {
        "type" : "object",
        "description" : "The specific restrictions",
        "properties" : {
          "explanation" : {
            "type" : "string",
            "description" : "The explanation of this restriction"
          },
          "requiredPermission" : {
            "type" : "string",
            "description" : "The permission required for this restriction"
          }
        }
      },
      "RevisionInfo" : {
        "type" : "object",
        "description" : "The revision information for an entity managed through the REST API.",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "A client identifier used to make a request. By including a client identifier, the API can allow multiple requests without needing the current revision. Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back."
          },
          "lastModifier" : {
            "type" : "string",
            "description" : "The user that last modified the entity.",
            "readOnly" : true
          },
          "version" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NiFi Registry employs an optimistic locking strategy where the client must include a revision in their request when performing an update. In a response to a mutable flow request, this field represents the updated base version."
          }
        },
        "readOnly" : true
      },
      "Stateful" : {
        "type" : "object",
        "description" : "The information about how the extension stores state",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description for how the extension stores state"
          },
          "scopes" : {
            "type" : "array",
            "description" : "The scopes used to store state",
            "items" : {
              "type" : "string",
              "description" : "The scopes used to store state",
              "enum" : [ "CLUSTER", "LOCAL" ],
              "xml" : {
                "name" : "scope"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          }
        }
      },
      "SystemResourceConsideration" : {
        "type" : "object",
        "description" : "The resource considerations of the extension",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of how the resource is affected"
          },
          "resource" : {
            "type" : "string",
            "description" : "The resource to consider"
          }
        }
      },
      "TagCount" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of occurrences of the given tag"
          },
          "tag" : {
            "type" : "string",
            "description" : "The tag label"
          }
        }
      },
      "Tenant" : {
        "type" : "object",
        "description" : "The users that belong to this user group. This can only be changed if this group is configurable.",
        "properties" : {
          "accessPolicies" : {
            "type" : "array",
            "description" : "The access policies granted to this tenant.",
            "items" : {
              "$ref" : "#/components/schemas/AccessPolicySummary"
            },
            "readOnly" : true,
            "uniqueItems" : true
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "The computer-generated identifier of the tenant.",
            "readOnly" : true
          },
          "identity" : {
            "type" : "string",
            "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
          },
          "resourcePermissions" : {
            "$ref" : "#/components/schemas/ResourcePermissions"
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          }
        }
      },
      "UriBuilder" : {
        "type" : "object"
      },
      "UseCase" : {
        "type" : "object",
        "description" : "Zero or more documented use cases for how the extension may be used",
        "properties" : {
          "configuration" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "inputRequirement" : {
            "type" : "string",
            "enum" : [ "INPUT_REQUIRED", "INPUT_ALLOWED", "INPUT_FORBIDDEN" ]
          },
          "keywords" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "keyword"
              }
            },
            "xml" : {
              "wrapped" : true
            }
          },
          "notes" : {
            "type" : "string"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "accessPolicies" : {
            "type" : "array",
            "description" : "The access policies granted to this tenant.",
            "items" : {
              "$ref" : "#/components/schemas/AccessPolicySummary"
            },
            "readOnly" : true,
            "uniqueItems" : true
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "The computer-generated identifier of the tenant.",
            "readOnly" : true
          },
          "identity" : {
            "type" : "string",
            "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
          },
          "resourcePermissions" : {
            "$ref" : "#/components/schemas/ResourcePermissions"
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          },
          "userGroups" : {
            "type" : "array",
            "description" : "The groups to which the user belongs.",
            "items" : {
              "$ref" : "#/components/schemas/Tenant"
            },
            "readOnly" : true,
            "uniqueItems" : true
          }
        }
      },
      "UserGroup" : {
        "type" : "object",
        "properties" : {
          "accessPolicies" : {
            "type" : "array",
            "description" : "The access policies granted to this tenant.",
            "items" : {
              "$ref" : "#/components/schemas/AccessPolicySummary"
            },
            "readOnly" : true,
            "uniqueItems" : true
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
            "readOnly" : true
          },
          "identifier" : {
            "type" : "string",
            "description" : "The computer-generated identifier of the tenant.",
            "readOnly" : true
          },
          "identity" : {
            "type" : "string",
            "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
          },
          "resourcePermissions" : {
            "$ref" : "#/components/schemas/ResourcePermissions"
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          },
          "users" : {
            "type" : "array",
            "description" : "The users that belong to this user group. This can only be changed if this group is configurable.",
            "items" : {
              "$ref" : "#/components/schemas/Tenant"
            },
            "uniqueItems" : true
          }
        }
      },
      "VersionedAsset" : {
        "type" : "object",
        "description" : "The assets that are referenced by this parameter",
        "properties" : {
          "identifier" : {
            "type" : "string",
            "description" : "The identifier of the asset"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the asset"
          }
        }
      },
      "VersionedConnection" : {
        "type" : "object",
        "description" : "The Connections",
        "properties" : {
          "backPressureDataSizeThreshold" : {
            "type" : "string",
            "description" : "The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
          },
          "backPressureObjectThreshold" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
          },
          "bends" : {
            "type" : "array",
            "description" : "The bend points on the connection.",
            "items" : {
              "$ref" : "#/components/schemas/Position"
            }
          },
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "destination" : {
            "$ref" : "#/components/schemas/ConnectableComponent"
          },
          "flowFileExpiration" : {
            "type" : "string",
            "description" : "The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it."
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "labelIndex" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the bend point where to place the connection label."
          },
          "loadBalanceCompression" : {
            "type" : "string",
            "description" : "Whether or not compression should be used when transferring FlowFiles between nodes",
            "enum" : [ "DO_NOT_COMPRESS, COMPRESS_ATTRIBUTES_ONLY, COMPRESS_ATTRIBUTES_AND_CONTENT" ]
          },
          "loadBalanceStrategy" : {
            "type" : "string",
            "description" : "The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.",
            "enum" : [ "DO_NOT_LOAD_BALANCE, PARTITION_BY_ATTRIBUTE, ROUND_ROBIN, SINGLE_NODE" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "partitioningAttribute" : {
            "type" : "string",
            "description" : "The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect."
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "prioritizers" : {
            "type" : "array",
            "description" : "The comparators used to prioritize the queue.",
            "items" : {
              "type" : "string",
              "description" : "The comparators used to prioritize the queue."
            }
          },
          "selectedRelationships" : {
            "type" : "array",
            "description" : "The selected relationship that comprise the connection.",
            "items" : {
              "type" : "string",
              "description" : "The selected relationship that comprise the connection."
            },
            "uniqueItems" : true
          },
          "source" : {
            "$ref" : "#/components/schemas/ConnectableComponent"
          },
          "zIndex" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The z index of the connection."
          }
        }
      },
      "VersionedControllerService" : {
        "type" : "object",
        "description" : "The Controller Services",
        "properties" : {
          "annotationData" : {
            "type" : "string",
            "description" : "The annotation for the controller service. This is how the custom UI relays configuration to the controller service."
          },
          "bulletinLevel" : {
            "type" : "string",
            "description" : "The level at which the controller service will report bulletins."
          },
          "bundle" : {
            "$ref" : "#/components/schemas/Bundle"
          },
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "controllerServiceApis" : {
            "type" : "array",
            "description" : "Lists the APIs this Controller Service implements.",
            "items" : {
              "$ref" : "#/components/schemas/ControllerServiceAPI"
            }
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "The properties for the component. Properties whose value is not set will only contain the property name."
            },
            "description" : "The properties for the component. Properties whose value is not set will only contain the property name."
          },
          "propertyDescriptors" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/VersionedPropertyDescriptor"
            },
            "description" : "The property descriptors for the component."
          },
          "scheduledState" : {
            "type" : "string",
            "description" : "The ScheduledState denoting whether the Controller Service is ENABLED or DISABLED",
            "enum" : [ "ENABLED", "DISABLED", "RUNNING" ]
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the extension component"
          }
        }
      },
      "VersionedFlow" : {
        "type" : "object",
        "description" : "The flow this snapshot is for",
        "properties" : {
          "bucketIdentifier" : {
            "type" : "string",
            "description" : "The identifier of the bucket this items belongs to. This cannot be changed after the item is created.",
            "minLength" : 1
          },
          "bucketName" : {
            "type" : "string",
            "description" : "The name of the bucket this items belongs to.",
            "readOnly" : true
          },
          "createdTimestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when the item was created, as milliseconds since epoch.",
            "minimum" : 1,
            "readOnly" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the item."
          },
          "identifier" : {
            "type" : "string",
            "description" : "An ID to uniquely identify this object.",
            "minLength" : 1,
            "readOnly" : true
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "modifiedTimestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp of when the item was last modified, as milliseconds since epoch.",
            "minimum" : 1,
            "readOnly" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the item.",
            "minLength" : 1
          },
          "permissions" : {
            "$ref" : "#/components/schemas/Permissions"
          },
          "revision" : {
            "$ref" : "#/components/schemas/RevisionInfo"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of item.",
            "enum" : [ "Flow", "Bundle" ]
          },
          "versionCount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The number of versions of this flow.",
            "minimum" : 0,
            "readOnly" : true
          }
        },
        "readOnly" : true,
        "required" : [ "bucketIdentifier", "identifier", "name", "type" ]
      },
      "VersionedFlowCoordinates" : {
        "type" : "object",
        "description" : "The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control",
        "properties" : {
          "branch" : {
            "type" : "string",
            "description" : "The name of the branch that the flow resides in"
          },
          "bucketId" : {
            "type" : "string",
            "description" : "The UUID of the bucket that the flow resides in"
          },
          "flowId" : {
            "type" : "string",
            "description" : "The UUID of the flow"
          },
          "latest" : {
            "type" : "boolean",
            "description" : "Whether or not these coordinates point to the latest version of the flow"
          },
          "registryId" : {
            "type" : "string",
            "description" : "The identifier of the Flow Registry that contains the flow"
          },
          "storageLocation" : {
            "type" : "string",
            "description" : "The location of the Flow Registry that stores the flow"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the flow"
          }
        }
      },
      "VersionedFlowDifference" : {
        "type" : "object",
        "properties" : {
          "bucketId" : {
            "type" : "string",
            "description" : "The id of the bucket that the flow is stored in."
          },
          "componentDifferenceGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ComponentDifferenceGroup"
            },
            "uniqueItems" : true
          },
          "flowId" : {
            "type" : "string",
            "description" : "The id of the flow that is being examined."
          },
          "versionA" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The earlier version from the diff operation."
          },
          "versionB" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The latter version from the diff operation."
          }
        }
      },
      "VersionedFlowSnapshot" : {
        "type" : "object",
        "properties" : {
          "bucket" : {
            "$ref" : "#/components/schemas/Bucket"
          },
          "externalControllerServices" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ExternalControllerServiceReference"
            },
            "description" : "The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow."
          },
          "flow" : {
            "$ref" : "#/components/schemas/VersionedFlow"
          },
          "flowContents" : {
            "$ref" : "#/components/schemas/VersionedProcessGroup"
          },
          "flowEncodingVersion" : {
            "type" : "string",
            "description" : "The optional encoding version of the flow contents."
          },
          "latest" : {
            "type" : "boolean"
          },
          "parameterContexts" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/VersionedParameterContext"
            },
            "description" : "The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow."
          },
          "parameterProviders" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ParameterProviderReference"
            },
            "description" : "Contains basic information about parameter providers referenced in the versioned flow."
          },
          "snapshotMetadata" : {
            "$ref" : "#/components/schemas/VersionedFlowSnapshotMetadata"
          }
        },
        "required" : [ "flowContents", "snapshotMetadata" ]
      },
      "VersionedFlowSnapshotMetadata" : {
        "type" : "object",
        "properties" : {
          "author" : {
            "type" : "string",
            "description" : "The user that created this snapshot of the flow.",
            "minLength" : 1,
            "readOnly" : true
          },
          "bucketIdentifier" : {
            "type" : "string",
            "description" : "The identifier of the bucket this snapshot belongs to.",
            "minLength" : 1
          },
          "comments" : {
            "type" : "string",
            "description" : "The comments provided by the user when creating the snapshot."
          },
          "flowIdentifier" : {
            "type" : "string",
            "description" : "The identifier of the flow this snapshot belongs to.",
            "minLength" : 1
          },
          "link" : {
            "$ref" : "#/components/schemas/Link"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The timestamp when the flow was saved, as milliseconds since epoch.",
            "minimum" : 1,
            "readOnly" : true
          },
          "version" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The version of this snapshot of the flow.",
            "minimum" : -1
          }
        },
        "required" : [ "author", "bucketIdentifier", "flowIdentifier" ]
      },
      "VersionedFunnel" : {
        "type" : "object",
        "description" : "The Funnels",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          }
        }
      },
      "VersionedLabel" : {
        "type" : "object",
        "description" : "The Labels",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "height" : {
            "type" : "number",
            "format" : "double",
            "description" : "The height of the label in pixels when at a 1:1 scale."
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "label" : {
            "type" : "string",
            "description" : "The text that appears in the label."
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "style" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "The styles for this label (font-size : 12px, background-color : #eee, etc)."
            },
            "description" : "The styles for this label (font-size : 12px, background-color : #eee, etc)."
          },
          "width" : {
            "type" : "number",
            "format" : "double",
            "description" : "The width of the label in pixels when at a 1:1 scale."
          },
          "zIndex" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The z index of the connection."
          }
        }
      },
      "VersionedParameter" : {
        "type" : "object",
        "description" : "The parameters in the context",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The description of the param"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the parameter"
          },
          "provided" : {
            "type" : "boolean",
            "description" : "Whether or not the parameter value is provided by a ParameterProvider"
          },
          "referencedAssets" : {
            "type" : "array",
            "description" : "The assets that are referenced by this parameter",
            "items" : {
              "$ref" : "#/components/schemas/VersionedAsset"
            }
          },
          "sensitive" : {
            "type" : "boolean",
            "description" : "Whether or not the parameter value is sensitive"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the parameter"
          }
        }
      },
      "VersionedParameterContext" : {
        "type" : "object",
        "description" : "The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the parameter context"
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "inheritedParameterContexts" : {
            "type" : "array",
            "description" : "The names of additional parameter contexts from which to inherit parameters",
            "items" : {
              "type" : "string",
              "description" : "The names of additional parameter contexts from which to inherit parameters"
            }
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "parameterGroupName" : {
            "type" : "string",
            "description" : "The corresponding parameter group name fetched from the parameter provider, if applicable"
          },
          "parameterProvider" : {
            "type" : "string",
            "description" : "The identifier of an optional parameter provider"
          },
          "parameters" : {
            "type" : "array",
            "description" : "The parameters in the context",
            "items" : {
              "$ref" : "#/components/schemas/VersionedParameter"
            },
            "uniqueItems" : true
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "synchronized" : {
            "type" : "boolean",
            "description" : "True if the parameter provider is set and the context should receive updates when its parameters are next fetched"
          }
        }
      },
      "VersionedPort" : {
        "type" : "object",
        "description" : "The Output Ports",
        "properties" : {
          "allowRemoteAccess" : {
            "type" : "boolean",
            "description" : "Whether or not this port allows remote access for site-to-site"
          },
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "concurrentlySchedulableTaskCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of tasks that should be concurrently scheduled for the port."
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "portFunction" : {
            "type" : "string",
            "description" : "Specifies how the Port should function",
            "enum" : [ "STANDARD", "FAILURE" ]
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "scheduledState" : {
            "type" : "string",
            "description" : "The scheduled state of the component",
            "enum" : [ "ENABLED", "DISABLED", "RUNNING" ]
          },
          "type" : {
            "type" : "string",
            "description" : "The type of port.",
            "enum" : [ "INPUT_PORT", "OUTPUT_PORT" ]
          }
        }
      },
      "VersionedProcessGroup" : {
        "type" : "object",
        "description" : "The contents of the versioned flow",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "connections" : {
            "type" : "array",
            "description" : "The Connections",
            "items" : {
              "$ref" : "#/components/schemas/VersionedConnection"
            },
            "uniqueItems" : true
          },
          "controllerServices" : {
            "type" : "array",
            "description" : "The Controller Services",
            "items" : {
              "$ref" : "#/components/schemas/VersionedControllerService"
            },
            "uniqueItems" : true
          },
          "defaultBackPressureDataSizeThreshold" : {
            "type" : "string",
            "description" : "Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied."
          },
          "defaultBackPressureObjectThreshold" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied."
          },
          "defaultFlowFileExpiration" : {
            "type" : "string",
            "description" : "The default FlowFile Expiration for this Process Group."
          },
          "executionEngine" : {
            "type" : "string",
            "description" : "The Execution Engine that should be used to run the components within the group.",
            "enum" : [ "STANDARD", "STATELESS", "INHERITED" ]
          },
          "flowFileConcurrency" : {
            "type" : "string",
            "description" : "The configured FlowFile Concurrency for the Process Group"
          },
          "flowFileOutboundPolicy" : {
            "type" : "string",
            "description" : "The FlowFile Outbound Policy for the Process Group"
          },
          "funnels" : {
            "type" : "array",
            "description" : "The Funnels",
            "items" : {
              "$ref" : "#/components/schemas/VersionedFunnel"
            },
            "uniqueItems" : true
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "inputPorts" : {
            "type" : "array",
            "description" : "The Input Ports",
            "items" : {
              "$ref" : "#/components/schemas/VersionedPort"
            },
            "uniqueItems" : true
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "labels" : {
            "type" : "array",
            "description" : "The Labels",
            "items" : {
              "$ref" : "#/components/schemas/VersionedLabel"
            },
            "uniqueItems" : true
          },
          "logFileSuffix" : {
            "type" : "string",
            "description" : "The log file suffix for this Process Group for dedicated logging."
          },
          "maxConcurrentTasks" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum number of concurrent tasks that should be scheduled for this Process Group when using the Stateless Engine"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "outputPorts" : {
            "type" : "array",
            "description" : "The Output Ports",
            "items" : {
              "$ref" : "#/components/schemas/VersionedPort"
            },
            "uniqueItems" : true
          },
          "parameterContextName" : {
            "type" : "string",
            "description" : "The name of the parameter context used by this process group"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "processGroups" : {
            "type" : "array",
            "description" : "The child Process Groups",
            "items" : {
              "$ref" : "#/components/schemas/VersionedProcessGroup"
            },
            "uniqueItems" : true
          },
          "processors" : {
            "type" : "array",
            "description" : "The Processors",
            "items" : {
              "$ref" : "#/components/schemas/VersionedProcessor"
            },
            "uniqueItems" : true
          },
          "remoteProcessGroups" : {
            "type" : "array",
            "description" : "The Remote Process Groups",
            "items" : {
              "$ref" : "#/components/schemas/VersionedRemoteProcessGroup"
            },
            "uniqueItems" : true
          },
          "scheduledState" : {
            "type" : "string",
            "description" : "The Scheduled State of the Process Group, if the group is configured to use the Stateless Execution Engine. Otherwise, this value has no relevance.",
            "enum" : [ "ENABLED", "DISABLED", "RUNNING" ]
          },
          "statelessFlowTimeout" : {
            "type" : "string",
            "description" : "The maximum amount of time that the flow is allows to run using the Stateless engine before it times out and is considered a failure"
          },
          "versionedFlowCoordinates" : {
            "$ref" : "#/components/schemas/VersionedFlowCoordinates"
          }
        }
      },
      "VersionedProcessor" : {
        "type" : "object",
        "description" : "The Processors",
        "properties" : {
          "annotationData" : {
            "type" : "string",
            "description" : "The annotation data for the processor used to relay configuration between a custom UI and the procesosr."
          },
          "autoTerminatedRelationships" : {
            "type" : "array",
            "description" : "The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.",
            "items" : {
              "type" : "string",
              "description" : "The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated."
            },
            "uniqueItems" : true
          },
          "backoffMechanism" : {
            "type" : "string",
            "description" : "Determines whether the FlowFile should be penalized or the processor should be yielded between retries.",
            "enum" : [ "PENALIZE_FLOWFILE, YIELD_PROCESSOR" ]
          },
          "bulletinLevel" : {
            "type" : "string",
            "description" : "The level at which the processor will report bulletins."
          },
          "bundle" : {
            "$ref" : "#/components/schemas/Bundle"
          },
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "concurrentlySchedulableTaskCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored."
          },
          "executionNode" : {
            "type" : "string",
            "description" : "Indicates the node where the process will execute."
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "maxBackoffPeriod" : {
            "type" : "string",
            "description" : "Maximum amount of time to be waited during a retry period."
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "penaltyDuration" : {
            "type" : "string",
            "description" : "The amout of time that is used when the process penalizes a flowfile."
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "The properties for the component. Properties whose value is not set will only contain the property name."
            },
            "description" : "The properties for the component. Properties whose value is not set will only contain the property name."
          },
          "propertyDescriptors" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/VersionedPropertyDescriptor"
            },
            "description" : "The property descriptors for the component."
          },
          "retriedRelationships" : {
            "type" : "array",
            "description" : "All the relationships should be retried.",
            "items" : {
              "type" : "string",
              "description" : "All the relationships should be retried."
            },
            "uniqueItems" : true
          },
          "retryCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Overall number of retries."
          },
          "runDurationMillis" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The run duration for the processor in milliseconds."
          },
          "scheduledState" : {
            "type" : "string",
            "description" : "The scheduled state of the component",
            "enum" : [ "ENABLED", "DISABLED", "RUNNING" ]
          },
          "schedulingPeriod" : {
            "type" : "string",
            "description" : "The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy."
          },
          "schedulingStrategy" : {
            "type" : "string",
            "description" : "Indicates how the processor should be scheduled to run."
          },
          "style" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Stylistic data for rendering in a UI"
            },
            "description" : "Stylistic data for rendering in a UI"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the extension component"
          },
          "yieldDuration" : {
            "type" : "string",
            "description" : "The amount of time that must elapse before this processor is scheduled again after yielding."
          }
        }
      },
      "VersionedPropertyDescriptor" : {
        "type" : "object",
        "description" : "The property descriptors for the component.",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "The display name of the property"
          },
          "dynamic" : {
            "type" : "boolean",
            "description" : "Whether or not the property is user-defined"
          },
          "identifiesControllerService" : {
            "type" : "boolean",
            "description" : "Whether or not the property provides the identifier of a Controller Service"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the property"
          },
          "resourceDefinition" : {
            "$ref" : "#/components/schemas/VersionedResourceDefinition"
          },
          "sensitive" : {
            "type" : "boolean",
            "description" : "Whether or not the property is considered sensitive"
          }
        }
      },
      "VersionedRemoteGroupPort" : {
        "type" : "object",
        "description" : "A Set of Output Ports that can be connected to, in order to pull data from the remote NiFi instance",
        "properties" : {
          "batchSize" : {
            "$ref" : "#/components/schemas/BatchSize"
          },
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "concurrentlySchedulableTaskCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of task that may transmit flowfiles to the target port concurrently."
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "remoteGroupId" : {
            "type" : "string",
            "description" : "The id of the remote process group that the port resides in."
          },
          "scheduledState" : {
            "type" : "string",
            "description" : "The scheduled state of the component",
            "enum" : [ "ENABLED", "DISABLED", "RUNNING" ]
          },
          "targetId" : {
            "type" : "string",
            "description" : "The ID of the port on the target NiFi instance"
          },
          "useCompression" : {
            "type" : "boolean",
            "description" : "Whether the flowfiles are compressed when sent to the target port."
          }
        }
      },
      "VersionedRemoteProcessGroup" : {
        "type" : "object",
        "description" : "The Remote Process Groups",
        "properties" : {
          "comments" : {
            "type" : "string",
            "description" : "The user-supplied comments for the component"
          },
          "communicationsTimeout" : {
            "type" : "string",
            "description" : "The time period used for the timeout when communicating with the target."
          },
          "componentType" : {
            "type" : "string",
            "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT" ]
          },
          "groupIdentifier" : {
            "type" : "string",
            "description" : "The ID of the Process Group that this component belongs to"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The component's unique identifier"
          },
          "inputPorts" : {
            "type" : "array",
            "description" : "A Set of Input Ports that can be connected to, in order to send data to the remote NiFi instance",
            "items" : {
              "$ref" : "#/components/schemas/VersionedRemoteGroupPort"
            },
            "uniqueItems" : true
          },
          "instanceIdentifier" : {
            "type" : "string",
            "description" : "The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component"
          },
          "localNetworkInterface" : {
            "type" : "string",
            "description" : "The local network interface to send/receive data. If not specified, any local address is used. If clustered, all nodes must have an interface with this identifier."
          },
          "name" : {
            "type" : "string",
            "description" : "The component's name"
          },
          "outputPorts" : {
            "type" : "array",
            "description" : "A Set of Output Ports that can be connected to, in order to pull data from the remote NiFi instance",
            "items" : {
              "$ref" : "#/components/schemas/VersionedRemoteGroupPort"
            },
            "uniqueItems" : true
          },
          "position" : {
            "$ref" : "#/components/schemas/Position"
          },
          "proxyHost" : {
            "type" : "string"
          },
          "proxyPassword" : {
            "type" : "string"
          },
          "proxyPort" : {
            "type" : "integer",
            "format" : "int32"
          },
          "proxyUser" : {
            "type" : "string"
          },
          "targetUris" : {
            "type" : "string",
            "description" : "The target URIs of the remote process group. If target uris is not set but target uri is set, then returns the single target uri. If neither target uris nor target uri is set, then returns null."
          },
          "transportProtocol" : {
            "type" : "string",
            "description" : "The Transport Protocol that is used for Site-to-Site communications",
            "enum" : [ "RAW, HTTP" ]
          },
          "yieldDuration" : {
            "type" : "string",
            "description" : "When yielding, this amount of time must elapse before the remote process group is scheduled again."
          }
        }
      },
      "VersionedResourceDefinition" : {
        "type" : "object",
        "description" : "Returns the Resource Definition that defines which type(s) of resource(s) this property references, if any",
        "properties" : {
          "cardinality" : {
            "type" : "string",
            "description" : "The cardinality of the resource",
            "enum" : [ "SINGLE", "MULTIPLE" ]
          },
          "resourceTypes" : {
            "type" : "array",
            "description" : "The types of resource that the Property Descriptor is allowed to reference",
            "items" : {
              "type" : "string",
              "description" : "The types of resource that the Property Descriptor is allowed to reference",
              "enum" : [ "FILE", "DIRECTORY", "TEXT", "URL" ]
            },
            "uniqueItems" : true
          }
        }
      }
    }
  }
}